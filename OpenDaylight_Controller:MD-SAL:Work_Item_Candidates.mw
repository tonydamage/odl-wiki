This page contains ideas for work items that need to be done post-Hydrogen. It's just an unprioritized list right now.

* Add documentation generator from yang tools into the controller runtime. When the controller finds a new model, it can auto-generate documentation for it as well. Make the documentation available in the controller's web server.
* Fix configuration packaging; right now, config models for all projects need to be included in the config subsystem, which is in the controller
* Code generation from models: 
** Skeletons for service providers and service consumers
** More advanced checking (parameter ranges, for example)
* WADL generation from yang modules
* Improve automated generation of documentation (both REST and Java)
* Python language binding for yang modules and remote Python library for controller clients
* JavaScript language binding: generate JavaScript from models in runtime, which could be downloaded by clients at runtime
* Notifying plugins when the first listener for a notification registers and the last unregisters.
** Use Case: Packet Decode.  If someone is listening for DHCPDecode... then DHCP decode registers to listen for UDPDecode.  When the last listener deregisters from DHCPDecode, it stops listening for UDPDecode
* Move component wiring configuration from the Config Subsystem to something simpler
* Create/improve troubleshooting tools for MD-SAL & protocol plugins - statistics, message traces, etc.
* Fix component initialization and add model dependencies to component loading & initialization.
