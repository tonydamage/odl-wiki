This page contains ideas for work items that need to be done post-Hydrogen. It's just an unprioritized list right now.

=All Projects=
* Unit test coverage
* Integration & regression tests

=Yang Tools =
* Code generation from models: 
** Skeletons for service providers and service consumers
** More advanced checking (parameter ranges, for example)
** Update binding specification to fix current problems
* WADL generation from yang modules
* Improve automated generation of documentation (both REST and Java)
* Python language binding for yang modules and remote Python library for controller clients
* JavaScript language binding: generate JavaScript from models in runtime, which could be downloaded by clients at runtime
* Define YANG->XSD mapping and provide tools for performing the transformation
* Define model artifact versioning and lifecycle, its relationship to to binding spec and model revisions
* Extensions for revision-level compatibility and inter-revision transformators
* Put more debug & tracing into generated code

=Controller= 
* Add documentation generator from yang tools into the controller runtime. When the controller finds a new model, it can auto-generate documentation for it as well. Make the documentation available in the controller's web server.
* Fix configuration packaging; right now, config models for all projects need to be included in the config subsystem, which is in the controller
* Notifying plugins when the first listener for a notification registers and the last unregisters.
** Use Case: Packet Decode.  If someone is listening for DHCPDecode... then DHCP decode registers to listen for UDPDecode.  When the last listener deregisters from DHCPDecode, it stops listening for UDPDecode
* Move component wiring configuration from the Config Subsystem to something simpler
* Create/improve troubleshooting tools for MD-SAL & protocol plugins - statistics, message traces, etc.
* Fix component initialization/loading order and add model dependencies to component loading & initialization.
* Cleanup Flow and Inventory yang models
* Move OpenFlow related functionality form the Controller into its own project (e.g. openflow models, OF NSFs, etc.) The controller should be just the container and infrastructure (configuration, SAL, etc.)
* Memory footprint optimizations
* Make bundle startup order deterministic
* Move clustering into its own project

==Netconf Client==
* Implement automatic renconnect after connection to the server has been lost
** This needs revision of state tracking in SessionListener and use of AbstractDispatcher.createReconnectingClient(). In general, the entire Netconf project needs to be reorganized to unify server and client.
* Asynchronous APIs for RPCs - sendMessage() will return a future with response, and will not block caller's thread.

=BGP-LS Plugin=
* Enable listening to BGP port so that remote peers can initiate the session
* Support for route dissemination
* Reorganize code/config to support [http://tools.ietf.org/html/draft-zhdankin-netmod-bgp-cfg draft-zhdankin-netmod-bgp-cfg] or similar
* Split out BGP/LS types into their respective technologies (ISO, OSPF, RSVP/TE, etc.)
* BGP Monitoring Protocol support

=OpenFlow Plugin=
* Migrate onto the Configuration Subsystem
* Do proper MarK & Sweep state sync between controller & switch on switch reconnect
