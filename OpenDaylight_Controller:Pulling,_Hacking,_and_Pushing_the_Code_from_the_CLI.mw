{| align="right" border="1"
|align="center"|'''Guide Contents'''
|-
|[[OpenDaylight Controller:Overview|OpenDaylight Controller Overview]]<br>[[OpenDaylight Controller:Architectural Framework|Architectural Framework]]<br>[[OpenDaylight Controller:Development Infrastructure Overview|Development Infrastructure Overview]]<br>[[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from the CLI|Pulling, Hacking, and Pushing the Code from the CLI]]<br>[[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from Eclipse|Pulling, Hacking, and Pushing the Code from Eclipse]]<br>[[OpenDaylight Controller:Sample Applications|Sample Applications]]<br>[[OpenDaylight Controller:Library Descriptions|Library Descriptions]]<br>[[OpenDaylight Controller:REST Reference and Authentication|REST Reference and Authentication]]<br>[[OpenDaylight Controller:Java API Reference|Java API Reference]]<br>[[OpenDaylight Controller:Topologies|Topologies]]<br>[[OpenDaylight Controller:Main|Top Level Contents]]
|}

== Gerrit Setup ==
Code reviews are enabled through Gerrit. [[OpenDaylight Controller:Gerrit Setup|Set up Gerrit]] for use.

Note: You will need to perform the [[OpenDaylight Controller:Gerrit Setup|Gerrit Setup]] before you can access git via
ssh as described below.

== Pull code via git CLI ==
Pull the code by cloning the controller repository.
<pre>
git clone ssh://<username>@git.opendaylight.org:29418/controller.git
</pre>

(or if you just want to do an anonymous git clone, you can use:

<pre>
git clone https://git.opendaylight.org/gerrit/p/controller.git
</pre>
)
== Setup Gerrit Change-id Commit Msg Hook==
This command inserts a unique Change-Id tag in the footer of a commit message. This step is optional but highly recommended for tracking changes.

<pre>
cd controller
scp -p -P 29418 <username>@git.opendaylight.org:hooks/commit-msg .git/hooks/
chmod 755 .git/hooks/commit-msg
</pre>

== Hack the code ==
The following tasks are used to help you hack the code. 

=== Build the code ===

<pre>
cd opendaylight/distribution/opendaylight/
mvn clean install
</pre>

* Maven build may run out of PermGen depending on the number of artifacts built, this is usually the case when building the ''opendaylight'' distribution for this the PermGen need to be increased. In order to do this and to make permanent the changes set in the environment the following environment variable: 
<pre>MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=256m"
/* syntax for setting varies on the OS used by the build machine.*/</pre>

* If you receive a Maven error when building northbound integration tests you can skip building those tests running the following:

<pre>mvn clean install -DskipTests 
/* instead of "mvn clean install" */</pre>

=== Find the controller === 

<pre>
ls target/distribution.opendaylight-0.1.0-SNAPSHOT-osgipackage.zip 
</pre>

=== Run the controller ===

<pre>
cd target/distribution.opendaylight-0.1.0-SNAPSHOT-osgipackage/opendaylight/
./run.sh
</pre>

Note: target is located in /controller/opendaylight/distribution/opendaylight/target

And point your browser at http://localhost:8080/

[[File:OpenDaylight - Login.jpg]]

There is much much more complete documentation on running the controller in the [[OpenDaylight Controller:Installation|Installation Guide]].

== Commit the code via git CLI ==
Note: To be accepted, all code must come with a [http://elinux.org/Developer_Certificate_Of_Origin  developer certificate of origin] as expressed by having a Signed-off-by.
This means that you are asserting that you have made the change and you understand that the work was done as part of an open-source license. 

<pre>
Developer's Certificate of Origin 1.1

        By making a contribution to this project, I certify that:

        (a) The contribution was created in whole or in part by me and I
            have the right to submit it under the open source license
            indicated in the file; or

        (b) The contribution is based upon previous work that, to the best
            of my knowledge, is covered under an appropriate open source
            license and I have the right under that license to submit that
            work with modifications, whether created in whole or in part
            by me, under the same open source license (unless I am
            permitted to submit under a different license), as indicated
            in the file; or

        (c) The contribution was provided directly to me by some other
            person who certified (a), (b) or (c) and I have not modified
            it.

        (d) I understand and agree that this project and the contribution
            are public and that a record of the contribution (including all
            personal information I submit with it, including my sign-off) is
            maintained indefinitely and may be redistributed consistent with
            this project or the open source license(s) involved.
</pre>

Mechanically you do it this way
<pre>
git commit --signoff
</pre>

or in a shorter version:
<pre>
git commit -s
</pre>

You will be prompted for a commit message, and if you are fixing a buzilla bug, you can add that to your commit message as well and it will get linked from the Gerrit:

<pre>
Fix for bug 2.

Signed-off-by: Ed Warnicke <eaw@cisco.com>

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   README
#
</pre>

If you wish to add the signoff to the commit message on your every commit without the need to specify -s or --signoff, 
add the following lines in the end of .git/hooks/commit-msg, after the line "add_ChangeId":

<pre>
SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
</pre>

Make sure your credentials (name, email) are configured properly in git.
They can be configured by adding the following settings:

<pre>
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
</pre>

== Pull the code changes via git CLI ==
Use git pull to get the latest changes from the remote repository
<pre>
git pull ssh://<username>@git.opendaylight.org:29418/controller.git HEAD:refs/for/master
</pre>

== Push the code via git CLI ==
Use git push to push your changes back to the remote repository.

<pre>
git push  ssh://<username>@git.opendaylight.org:29418/controller.git HEAD:refs/for/master
</pre>

You will get a message pointing you to your gerrit request like:

<pre>
remote: Resolving deltas: 100% (2/2)
remote: Processing changes: new: 1, refs: 1, done    
remote: 
remote: New Changes:
remote:   http://git.opendaylight.org/gerrit/64
remote: 
</pre>

== Seeing your change in Gerrit ==

Follow the link you got above to see your commit in Gerrit:

[[File:Gerrit Code Review.jpg|700px]]

Note the Jenkins Controller User has verified your code, and at the bottom is a link to the Jenkins build.

Once your code has been reviewed and submitted by a committer it will be merged into the authoritative repo, which would look like this:

[[File:Gerrit Merged.jpg|700px]]

== What to do if your Firewall blocks port 29418 ==

There have been reports that many corporate firewalls block port 29418.  If that's the case, please follow the [[OpenDaylight Controller:Setting up HTTP in Gerrit|Setting up HTTP in Gerrit]] instructions and use git URL:

<pre>
git clone https://<your_username>@git.opendaylight.org/gerrit/p/controller.git
</pre>

You will be prompted for the password you generated in [[OpenDaylight Controller:Setting up HTTP in Gerrit|Setting up HTTP in Gerrit]].

All other instructions on this page remain unchanged :)

== External Links From the Community for Dev and Ops with ODP ==

The following are how-tos and resources posted from community engineers, operators, devs, and architects that blog:

* [http://destinationunreachable.net/2013/07/22/opendaylight-with-python/ OpenDaylight with Python]

* [http://edwarnicke.org/2013/06/03/debugging-opendaylight-controller-in-eclipse/ Debugging OpenDaylight controller in Eclipse]

* [http://fredhsu.wordpress.com/2013/07/11/handling-packets-on-the-opendaylight-controller/ Handling packets on the OpenDaylight controller]

* [http://www.openflow.org/wk/index.php?title=OpenDayLight_Tutorial OpenDaylight Tutorial with example MacHub or L2Switch]

* [http://edwarnicke.org/2013/06/03/debugging-opendaylight-controller-in-eclipse/ Debugging OpenDaylight controller in Eclipse]

* [http://networkstatic.net/opendaylight-maven-and-osgi-dev-notes/ OpenDaylight Maven and OSGI Dev Notes]

* [http://fredhsu.wordpress.com/2013/05/21/opendaylight-with-scala/ OpenDaylight with Scala]

* [http://blog.cyberpunkture.net/2013/04/on-the-opendaylight-sdn-controller/ On The OpenDaylight Controller]

* [http://www.dasblinkenlichten.com/installing-opendaylight-on-centos/ Installing OpenDaylight on CentOS]  

* [http://destinationunreachable.net/2013/07/22/opendaylight-with-python/ Python interface to the OpenDaylight REST API]

* [http://fredhsu.wordpress.com/2013/04/25/getting-started-with-opendaylight-and-python/ Getting started with OpenDaylight and Python]  

* [http://fredhsu.wordpress.com/2013/05/03/opendaylight-and-osgi-basics/ OpenDaylight and OSGI basics]

* [http://mrfogg97.blogspot.com/2013/04/opendaylight-sdn-on-windows.html Installing OpenDaylight SDN Controller on Windows]  

* [http://www.forwardingplane.net/2013/05/scripting-the-build-of-opendayight-controller-under-centos/ Scripting the Build of OpenDayight Controller Under Centos]

* [http://www.jedelman.com/1/post/2012/01/future-openflowsdn-applications.html Getting OpenDaylight Installed]

* [http://packetpushers.net/show-148-talking-with-opendaylight-leadership/  (Podcast) Talking With OpenDaylight Leadership]

* [http://yeasy.blogspot.com/2013/08/open-daylight-sal.html OpenDaylight Code Analysis: SAL (CN version)]

* [https://github.com/yeasy/tech_writing/blob/master/SDN/Open%20Daylight%20Controller%E6%8C%87%E5%8D%97.pdf OpenDaylight Guidance (CN version)]

To download pre-built images with ODP bootstraps see the following Github project:

* [https://github.com/nerdalert/OpenDaylight-Lab  Pre-Built OpenDaylight VM Images]

Key methods for early community understanding, assistance and involvement:

* [https://lists.opendaylight.org/mailman/listinfo  Joining the ODP Listserv ]

* [[TSC:Main]] Listening to the weekly TSC meetings.

* [[Tech Work Stream:Main]] Listening to the weekly Technical Work Stream meeting.

* There is an IRC channel #opendaylight on irc.freenode.net


[[Category:OpenDaylight Controller]]
