{| align="right" border="1"
|align="center"|'''Guide Contents'''
|-
|[[OpenDaylight Controller:Overview|OpenDaylight Controller Overview]]<br>[[OpenDaylight Controller:Architectural Framework|Architectural Framework]]<br>[[OpenDaylight Controller:Development Infrastructure Overview|Development Infrastructure Overview]]<br>[[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from the CLI|Pulling, Hacking, and Pushing the Code from the CLI]]<br>[[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from Eclipse|Pulling, Hacking, and Pushing the Code from Eclipse]]<br>
[[OpenDaylight_Controller:Developing_With_Intellij]]<br>
[[OpenDaylight Controller:Sample Applications|Sample Applications]]<br>[[OpenDaylight Controller:Library Descriptions|Library Descriptions]]<br>[[OpenDaylight Controller:REST Reference and Authentication|REST Reference and Authentication]]<br>[[OpenDaylight Controller:Java API Reference|Java API Reference]]<br>[[OpenDaylight Controller:Topologies|Topologies]]<br>[[OpenDaylight Controller:Main|Top Level Contents]]
|}

==Git Cheat Sheet==
For a quick overview of Git commands, check out the [[GIT Cheat Sheet | Git Cheat Sheet]]. For more specifics, see below.

== Gerrit Setup ==
Creating a Gerrit account, including registering a public/private key pair, is required for using Git over SSH as documented below. Gerrit is also used for code reviews. If you don't already have an account with established keys, follow the documentation on [[OpenDaylight Controller:Gerrit Setup|setting up Gerrit]].

== Pull code via Git CLI ==
Pull the code by cloning the controller repository:
<pre>
git clone ssh://<username>@git.opendaylight.org:29418/controller.git
</pre>

Note that the command above assumes you've registered a Gerrit account and have a valid keypair for authentication. The public key should be known to Gerrit, and the private key should be on your local system at ~/.ssh/id_rsa.pub.

If you just want to do an anonymous git clone, you can use HTTPS:
<pre>
git clone https://git.opendaylight.org/gerrit/p/docs.git
</pre>

== Setup Gerrit Change-id Commit Msg Hook ==
The following Git hook automatically inserts a unique Change-Id tag in the footer of each commit message. Git doesn't track hooks, so after pulling the project you'll want to go ahead and grab this one manually. Using this hook is optional, but highly recommended for tracking changes.

<pre>
cd docs
scp -p -P 29418 <username>@git.opendaylight.org:hooks/commit-msg .git/hooks/
chmod 755 .git/hooks/commit-msg
</pre>

== Working on documentation ==

=== Prerequisites ===
The following are required for building the codebase.

:* [http://maven.apache.org/ Maven] 3.04 or greater.

Install (assuming yum is your package manager, adjust accordingly):
<pre>
sudo yum install maven
</pre>

Check your version (example output included):
<pre>
[~]$ mvn -v
Apache Maven 3.1.1 (NON-CANONICAL_2013-11-08_14-32_mockbuild; 2013-11-08 09:32:41-0500)
Maven home: /usr/share/maven
Java version: 1.7.0_55, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.60-2.4.7.0.fc20.x86_64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.13.10-200.fc20.x86_64", arch: "amd64", family: "unix"
</pre>

:* Java 1.7+, including the JDK.

Install (assuming yum is your package manager, adjust accordingly):
<pre>
sudo yum install java-1.7.0-openjdk
</pre>

Check your version (example output included):
<pre>
[~]$ java -version
java version "1.7.0_55"
OpenJDK Runtime Environment (fedora-2.4.7.0.fc20-x86_64 u55-b13)
OpenJDK 64-Bit Server VM (build 24.51-b03, mixed mode)
</pre>

For more information about setting up a development environment, see [[GettingStarted:Development Environment Setup]].

=== Build the code ===
<pre>
cd docs
mvn clean install
</pre>

== Commit the code via Git CLI ==
Note: To be accepted, all code must come with a [http://elinux.org/Developer_Certificate_Of_Origin  developer certificate of origin] as expressed by having a Signed-off-by.
This means that you are asserting that you have made the change and you understand that the work was done as part of an open-source license. 

<pre>
Developer's Certificate of Origin 1.1

        By making a contribution to this project, I certify that:

        (a) The contribution was created in whole or in part by me and I
            have the right to submit it under the open source license
            indicated in the file; or

        (b) The contribution is based upon previous work that, to the best
            of my knowledge, is covered under an appropriate open source
            license and I have the right under that license to submit that
            work with modifications, whether created in whole or in part
            by me, under the same open source license (unless I am
            permitted to submit under a different license), as indicated
            in the file; or

        (c) The contribution was provided directly to me by some other
            person who certified (a), (b) or (c) and I have not modified
            it.

        (d) I understand and agree that this project and the contribution
            are public and that a record of the contribution (including all
            personal information I submit with it, including my sign-off) is
            maintained indefinitely and may be redistributed consistent with
            this project or the open source license(s) involved.
</pre>

Mechanically you do it this way
<pre>
git commit --signoff
</pre>

or in a shorter version:
<pre>
git commit -s
</pre>

You will be prompted for a commit message, and if you are fixing a buzilla bug, you can add that to your commit message as well and it will get linked from the Gerrit:

<pre>
Fix for bug 2.

Signed-off-by: Ed Warnicke <eaw@cisco.com>

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   README
#
</pre>

If you wish to add the signoff to the commit message on your every commit without the need to specify -s or --signoff, 
add the following lines in the end of .git/hooks/commit-msg, after the line "add_ChangeId":

<pre>
SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"
</pre>

Make sure your credentials (name, email) are configured properly in git.
They can be configured by adding the following settings:

<pre>
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com
</pre>

== Pull the code changes via git CLI ==
Use git pull to get the latest changes from the remote repository
<pre>
git pull ssh://<username>@git.opendaylight.org:29418/docs.git HEAD:refs/for/master
</pre>

== Push the code via git CLI ==
Use git push to push your changes back to the remote repository.

<pre>
git push  ssh://<username>@git.opendaylight.org:29418/docs.git HEAD:refs/for/master
</pre>

To push a draft (for something that is work in progress or for a discussion, that should not be merged)
<pre>
git push  ssh://<username>@git.opendaylight.org:29418/docs.git HEAD:refs/drafts/master
</pre>

You will get a message pointing you to your gerrit request like:

<pre>
remote: Resolving deltas: 100% (2/2)
remote: Processing changes: new: 1, refs: 1, done    
remote: 
remote: New Changes:
remote:   http://git.opendaylight.org/gerrit/64
remote: 
</pre>

== Seeing your change in Gerrit ==

Follow the link you got above to see your commit in Gerrit:

[[File:Gerrit Code Review.jpg|700px]]

Note the Jenkins Controller User has verified your code, and at the bottom is a link to the Jenkins build.

Once your code has been reviewed and submitted by a committer it will be merged into the authoritative repo, which would look like this:

[[File:Gerrit Merged.jpg|700px]]

== What to do if your Firewall blocks port 29418 ==

There have been reports that many corporate firewalls block port 29418.  If that's the case, please follow the [[OpenDaylight Controller:Setting up HTTP in Gerrit|Setting up HTTP in Gerrit]] instructions and use git URL:

<pre>
git clone https://<your_username>@git.opendaylight.org/gerrit/p/controller.git
</pre>

You will be prompted for the password you generated in [[OpenDaylight Controller:Setting up HTTP in Gerrit|Setting up HTTP in Gerrit]].

All other instructions on this page remain unchanged :)

* There is an IRC channel #opendaylight and #opendaylight-docs on irc.freenode.net. IRC is probably the best resource for realtime Q&A collaboration and meeting others in the community both vendor and non-vendor alike).
