= Installing From Zip =

== Getting the Zip File ==

You can find the OpenDaylight Hydrogen Release Virtualization Edition zip file on the download page here: http://nexus.opendaylight.org/content/repositories/opendaylight.release/org/opendaylight/integration/distributions-virtualization/0.1.0/distributions-virtualization-0.1.0-osgipackage.zip


== Installing ==
The simplest and easiest way to install OpenDaylight is to download the pre-built zip file which you can find above. 

===== Prerequisites: =====
* OpenDaylight Hydrogen has been developed and tested for Java 1.7 JVMs and JDKs

:* Note: on some platforms, there are known issues with Oracle Java 1.7.0_21 and 1.7.0_25, but 1.7.0_45 and 1.7.0_51 have worked fine
:*  In general, OpenDaylight requires appropriate setting of the JAVA_HOME directory
:*  More information can be found in the [https://wiki.opendaylight.org/view/Release/Hydrogen/Release_Notes OpenDaylight Hydrogen Release Notes].

===== Understanding The Structure: =====
* The main content of OpenDaylight Hydrogen is in a directory called opendaylight, where you will see the following files:

:*  run.sh — launches OpenDaylight on Linux/Mac/Unix systems
:*  run.bat — launches OpenDaylight on Windows systems
:*  run.base.sh —
:*  run.internal.sh —
:*  externalapps — for applications such as VTN
:*  version.properties — indicates the build version
:*  configuration — basic initialization files (internal to OpenDaylight)
:*  lib — Java libraries
:*  plugins — OpenDaylight's OSGi plugins

===== Running OpenDaylight: ===== 
# Enter ''./run.sh -virt &nbsp; {ovsdb | opendove | vtn} &nbsp; [advanced options]'' &nbsp; or similary on windows using ''./run.bat'' with administrator privileges to launch OpenDaylight.
 :* You must select one of the 3 supported network virtualization technologies: ovsdb | opendove | vtn
:* Advanced options : [-jmx]  &nbsp;  [-jmxport <num>] &nbsp; [-debug] &nbsp; [-debugsuspend] &nbsp; [-debugport <num>] &nbsp; [-start [<console port>]] &nbsp; [-stop] &nbsp; [-status] &nbsp; [-console] &nbsp; [-help] &nbsp; [-of13] &nbsp; [-bundlefilter <bundlefilter>] &nbsp; [<other args will automatically be used for the JVM>]

# Navigate to http://<ip-address-of-machine-where-you-ran-opendaylight>:8080 to open the web interface, then use the following credentials to log in:
:* User: admin
:* Password: admin 

# If you are running OpenDaylight on the same machine as your browser, you can browse to http://localhost:8080 or http://127.0.0.1:8080 to avoid needing to know the IP address of the machine you are using.

= Installing From RPM =

= VirtualBox Image =

= Docker Image =
== What is Docker ==
Docker, provided by [http://docker.io docker.io], and available in most Linux distributions as well as available on MacOS and Windows, is an open-source project to easily create lightweight, portable, self-sufficient containers from any application. The same container that a developer builds and tests on a laptop can run at scale, in production, on VMs, bare metal, OpenStack clusters, public clouds and more.

''For more information on docker please read [http://docker.io docker.io's documentation].'' 

== The sudo command and the docker Group ==
(reprinted from [http://docs.docker.io/en/latest/use/basics/ docker.io's basic documentation]):

The docker daemon always runs as the root user, and since Docker version 0.5.2, the docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root, and so, by default, you can access it with sudo.

Starting in version 0.5.3, if you (or your Docker installer) create a Unix group called docker and add users to it, then the docker daemon will make the ownership of the Unix socket read/writable by the docker group when the daemon starts. The docker daemon must always run as the root user, but if you run the docker client as a user in the docker group then you don't need to add sudo to all the client commands.

== OpenDaylight Docker Images ==
There are public images available via the public docker repository. You can find the images by issuing a docker search command looking for 'opendaylight' i.e.

    $ docker search opendaylight
    Found 3 results matching your query ("opendaylight")
    NAME                             DESCRIPTION
    opendaylight/base                The base OpenDaylight SDN controlelr
    opendaylight/serviceprovider     The service provider version of the OpenDaylight SDN controller
    opendaylight/virtualization      The virtualization version of the OpenDaylight SDN controller

Each of these images have version tags that allow the specification of the version via the version name. `<code>latest</code> is also a support tag to identify the latest official release. For the first release of OpenDaylight, the version tag is <code>hydrogen</code>.

== Using the Image ==
The OpenDaylight docker image is meant to be used to start an instance of the OpenDaylight SDN controller and that process will be invoked when the docker image is <code>run</code>. Any command line options you append to the <code>docker run</code> command will be passed on to the the OpenDaylight <code>run.sh</code> startup script. In its simplest form you can invoke an instance of the Opendaylight controller using the command:

    docker run -d <image-identifier> 

Where <code><image-identifier></code> can be one of the pre-build image references, i.e. <code>opendaylight/virtualization:hydrogen</code>. Additional information and options for 'running' a docker image can be found at [http://docs.docker.io/en/latest/commandline/cli/#run docker.io's run documentation].

=== Ports ===
The OpenDaylight controller image will expose the following ports from the container to the host system:

* 1088 - JMX access
* 1830 - Netconf use 
* 2400 - OSGi console
* 4342 - Lisp Flow Mapping (for Service Provider Edition only)
* 5666 - ODL Internal clustering RPC
* 6633 - OpenFlow use
* 7800 - ODL Clustering
* 8000 - Java debug access
* 8080 - OpenDaylight web portal
* 8383 - Netconf use
* 12001 - ODL Clustering

By default these ports not will be mapped to ports on the host system (i.e. the system on which the <code>docker run</code> command is invoked). To understand how to enable docker container instances to communicate without having to 'hard wire' the port information see [http://docs.docker.io/en/latest/use/working_with_links_names/ docker.io's documentation on linking].

If you wish to map these ports to specific port numbers on the host system, this can be accomplished as command line options to the <code>docker run</code> command using the 'port map' option specified using the <code>-p</code> option. The syntax for this option is documented in [http://docs.docker.io/en/latest/commandline/cli/#run docker.io's run documentation], but is essentially <code>-p <host-port>:<container-port></code>.

== Clustering ==
OpenDaylight supports the concept of [https://wiki.opendaylight.org/view/OpenDaylight_Controller:Programmer_Guide:Clustering clustering] using a command line option [https://wiki.opendaylight.org/view/OpenDaylight_Controller:Clustering:HowTo <code>-Dsupernodes</code>] to support high availability. 

The docker images can be used to set up a cluster on a single docker server (host) using the [http://blog.docker.io/2013/10/docker-0-6-5-links-container-naming-advanced-port-redirects-host-integration/ docker naming and linking capability] along with some modifications that were made to the OpenDaylight's processing of the <code>supernodes</code> host specifications. 

'NOTE: The cluster configuration setup described in this document does not work for containers that are running on separate hosts. Supporting clustering using docker images across hosts is an advanced topic that relies on setting up virtual networks between the containers and is beyond the scope of this introduction.'

To support docker based clustering the syntax of the <code>supernodes</code> parameter has been extended. The important changes are:

* <code>+self</code> - interpreted as a reference to the local host's address (not 127.0.0.1) and will be resolved to an IP address through the environment variable <code>HOSTNAME</code>.
* <code>+<name></code> - interpreted as a reference to another container, <code><name></code>, and will be resolved using the environment variables defined by docker when the <code>-link</code> command line option is used

It is important to note that these extensions will only be used if OpenDaylight determines that it is running inside a container. This is determined by the value of the environment variable <code>container</code> being set to <code>lxc</code>.

All values not prefixed by a <code>+</code> will be interpreted normally.

Below is an example of starting up a three node cluster using this syntax:

    $ docker run -d -name node1 opendaylight/virtualization:hydrogen -Dsupernodes=+self
    a8435cc23e13cb4e04c3c9788789e7e831af61c735d14a33025b3dd6c76e2938
    $ docker run -d -name node2 -link node1:n1 d44fd77ebbdf -Dsupernodes=+self:+n1
    fa0b37dfd216291e36fd645a345751a1a6079123c99d75326a5775dce8414a93
    $ docker run -d -name node3 -link node1:n1 d44fd77ebbdf -Dsupernodes=+self:+n1
    9ad6874aa85cad29736030239baf836f46ceb0c242baf873ab455674040d96b1

The cluster can be verified through the OpenDaylight user interface. This can be accomplished by first determining the IP address of one of the nodes:

    $ docker inspect -format='{ { .NetworkSettings.IPAddress } }' node1
    172.17.0.46

After determining the IP address you can view the web interface by typing <code>http://172.17.0.46:8080</code> in the browser address bar, authenticating with the default user name and password (<code>admin/admin</code>), and then viewing the cluster information by selecting <code>Cluster</code> from the right hand drop down menu. A popup window should be displayed that shows all the nodes in the cluster with the master marked with a <code>C</code> and the node to which you are currently connected marked with a <code>*</code> (asterisks).
