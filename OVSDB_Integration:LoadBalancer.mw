
== Name ==

LoadBalancer Strawman

== LoadBalancer Description  ==

A loadbalancer application would provide the ability to divide traffic at the switch level to multiple endhosts. A Northbound 
interface would be provided to create Virtual IPs which will map to pools of servers. The pools will consist of members identified by a Ethernet or IP address.

An optional Service check mecanism would be provide the means to verify that a service is currently running on member hosts and provide information that the loadbalancer can use to determine if a member should be removed from a pool.

The goal is to closerly match the OpenStack LBaaS v2 API 
http://docs.openstack.org/api/openstack-network/2.0/content/lbaas_ext.html

== Reactive vs. Proactive ==

The curent sample loadbalancer application implements a reactive loadbalancer with the inital packet in the flow being encapsulated 
to the controller to determine how the flow will be forwarded. An alternative mechanism would be to have the
switches controlled by ODL to hash traffic by flow (e.g. based on IP src/dst and L4 protocol and Src/Dst port). The proactive mecanism should be able to scale without bottlenecks with messages throught the control plane and lowering latency of the first packet 

A sample script showing flows to be deployed and how ARPs for the VIP and disciovery of hosts will be handled.

== Integration with OpenStack ==

One of the main use cases for an ODL Loadbalancer would be to implement the OpenStack LBaaS. The Load Balancer should have a NorthBound interface that implements the latest OpenStack LBaaS API (currently v2)

The current OpenStack LBaaS API implements Loadbalancing as a Neutron Advanced Service. A plugin interface wilol need to be implemented to point to the OpenDayLight OpenStack LBaaS interface.

Intergration between the ML2 OpenStack module to determine the location of the ODL controller(s) is a possibility but a cleaner implementation would be completly independant what ML2 module is used. 

== Internal Interface ==

Creating a ODL LoadBalancing northbound interface seperate from the 

This could allow for: 
# The creation of a LoadBalancer standalone application completly independant of OpenStack
# Addition of parameters specific to the undilying implementation (OVS) 
# Feature addition without requiring implementation in OpenStack
# Intergration with other agents top provide the Loadbalancing service

== Steps/Tasks ==

*  Nicera extensions
** MD-SAL data model?
** AD-SAL?
* OS LBaaS Neutron API V2 and latest changes
* ODL LBaaS API: non-neutron API
* OVSDB code
**   Interaction with existing tenant network functions
**   OpenFlow Table consistency, table per VIP
* ARP Handler - only reactive piece
* Where does code live in ODL, part of OVSDB, new project, etc?
* Need to work with other services, L3, Security, etc?
* Monitoring on backend servers? 
* OS ODL driver

== Developers  ==

* Chris Small <chsmall22@gmail.com>
* Sam Hague <shague@redhat.com>
* Anilkumar Vishnoi <avishnoi@in.ibm.com>
