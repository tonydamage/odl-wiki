__TOC__
==Writing General Integration Tests with Pax-Exam==

To learn more about writing integration tests in general with Pax-Exam, please follow the guide here first:  
[[OpenDaylight Controller:Integration Tests|Integration Tests]]

==Northbound Integration Test Differences==

'''Dependency Setup'''

When running the normal integration test, you only needed a very small subset of bundles for the specific test.  For testing the northbound API, you will need a much more complete set of dependencies to get the controller running and listening for requests.  The existing NorthboundIT.java and its associated pom.xml already has the necessary dependencies included for the Opendaylight Controller and is a good base for future tests.

'''Individual Test Methods'''

Each @Test annotated method in an Integration test is completely independent of the others.  That means for each northbound test method, the controller will first start up, go through the method, and shutdown afterwards.  As the controller is being shutdown and started for each method, there is some overhead for each test method.  If writing many small tests, it may be worthwhile to combine multiple related tests into one method to reduce the time needed to complete.

===Writing The Tests===

'''Sending a GET Request'''

In this example, we want to give the request to get the subnets in the default container.  The API documentation gives the following to use:
http://127.0.0.1:8080/controller/nb/v2/subnet/default

To send the request to the controller, the URL connection needs to be built with proper authentication.  

<source>
 //creating a new URL with the request
 String restUrl = "http://127.0.0.1:8080/controller/nb/v2/subnet/default";
 URL url = new URL(restUrl);

 //attaching authentication information
 String authString = "admin:admin";
 byte[] authEncBytes = Base64.encodeBase64(authString.getBytes());
 String authStringEnc = new String(authEncBytes);

 //creating the URLConnection
  HttpURLConnection connection = (HttpURLConnection) url.openConnection();
  connection.setRequestMethod("GET");
  connection.setRequestProperty("Authorization", "Basic " + authStringEnc);
  connection.setRequestProperty("Content-Type", "application/json");
  connection.setRequestProperty("Accept", "application/json");
  connection.connect();

  //getting the result, first check response code
  Integer httpResponseCode = connection.getResponseCode();
  if (httpResponseCode > 299)
     return httpResponseCode.toString();
  //get the result string from the inputstream.
  InputStream is = connection.getInputStream();
  BufferedReader rd = new BufferedReader(new InputStreamReader(is, Charset.forName("UTF-8")));
  StringBuilder sb = new StringBuilder();
  int cp;
  while ((cp = rd.read()) != -1) {
     sb.append((char) cp);
  }
  is.close();
  connection.disconnect();
  return sb.toString();
</source>

'''Reading Result'''

To read the result, create a JSON object out of the resulting string.
<source>
   JSONTokener jt = new JSONTokener(result);
   JSONObject json = new JSONObject(jt);    
   //test that the resulting name and subnet matches what was expected in variables name1, subnet1
   Assert.assertEquals(name1, json.getString("@name"));
   Assert.assertEquals(subnet1, json.getString("@subnet"));
</source>


'''Sending POST Requests'''

When sending POST requests, change the request method to POST
  <source>
    connection.setRequestMethod("POST");
  </source>

If the request requires data in the request body, write the object string into the connection's output stream.
<source>
  //building request body for inserting a static route
 String requestBody = "{\"name\":\"" + name1 + "\", \"prefix\":\"" + prefix1 + "\", \"nextHop\":\"" + nextHop1
                + "\"}";

  ...  //build a connection like before

 //now add the request body
  connection.setDoOutput(true);
  OutputStreamWriter wr = new OutputStreamWriter(connection.getOutputStream());
  wr.write(body);
  wr.flush();

  //send request, get result, and verify that it receives successful response code.
  connection.connect();
  httpResponseCode = connection.getResponseCode();
  Assert.assertEquals(201, httpResponseCode.intValue());

</source>
