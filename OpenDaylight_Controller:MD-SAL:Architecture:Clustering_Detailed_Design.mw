[[OpenDaylight_Controller:MD-SAL:Architecture:Clustering|MD-SAL Clustering High Level Design ]] covers the high level design of the Clustered Datastore in Helium Release 

This wiki captures the detailed design based on our discussions [Note: This Wiki is work in progress & will have frequent updates]

== Packaging ==
The following packages are used for the Clustered Datastore  

* org.opendaylight.controller.cluster.datastore
* org.opendaylight.controller.cluster.rpc
* org.opendaylight.controller.cluster.notification
* org.opendaylight.controller.cluster.monitoring
* org.opendaylight.controller.cluster.common


== Interfaces ==
The Akka Actors involed in supporting clustered datastore, the messages they exchange and the packages they belong to are explained below. 

=== org.opendaylight.controller.cluster.datastore ===
  
==== ShardManager ====
ShardManager is an actor that creates the shard/shard replicas on system initialization based on configuration. It supports the ability to find a Shard and Monitor the Shard's health. It initiates the Shard "Primary" election scheme if any its created primary shards goes down. It also  register to get cluster Node UP/DOWN events
 
   Messages/API: 
          FindPrimary => Address[Shard]

==== Shard ====
Represents a Shard created by ShardManager based on Shard strategy specified in configuration. Methods of Shard provides the transaction/change notification registration support.It maintains the state whether it is replica or primary shard in addition to being a shard store. 

          - primary : boolean
   Messages/API:
          - RegisterListener => ListenerRegistration  
          - CreateTransactionChain => Address[ShardTransactionChain]
          - Commit(snapShot : NormalizedNode, compositeTransactionOperation) -- compositeTranscationOperation tracks all the operation that    
                                                                                happenned in a Transaction 
          - Persistent(compositeTransactionOperation)
          - Persistent(Replicated(compositeTransactionOperation))
==== ShardReplicator ====
Shard Replicator gets persistent messages that Shard has applied to its store and replicates the same to other Shard Replicas. 
   Messages/API:
          - Persistent(compositeTransactionOperation)
====ShardTransaction ====
Supports the CRUD operations. 
    Messages/API:  
          - Read
          - Write
          - Delete
          - Ready

====ShardTransactionChain ====
The current InMemoryDatastore seems to have introduced TransactionChaining. This helps in having TransactionChaining on Shard(s)?
     Messages/API 
          - CreateTransaction
====ShardCommitCohort ====
The current InMemoryDatastore supports 3-phase commit cohort.  Same/Similiar semantics are applied to Shard 
     Messages/API 
          - CanCommit
          - PreCommit
          - Abort
          - Commit


===org.opendaylight.controller.cluster.rpc ===
     - RemoteRpcBroker
     - RouteRegistry

===org.opendaylight.controller.cluster.notification ===

===org.opendaylight.controller.cluster.monitoring ===

===org.opendaylight.controller.cluster.common ===
