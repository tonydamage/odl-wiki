This page presents how to prepare OpenDaylight project pom files for supporting the maven site and site:deploy targets, as well as how to set up the maven's site:deploy as a separate jenkins job.

Note: this page doesn't discuss how to set up parameterized site:deploy, that is left as an exercise for a reader.

==Assumptions==

#It is assumed that there is a single project root that all project bundles inherit from

==Setting up POM Files==

===Adding Site Deploy and Javadoc Report Generation to parent pom===

*If not already defined, add the following lines to the properties section (where <branch> is replaced with hydrogen or master):

 <sitedeploy>${nexusproxy}/sites/site/${project.groupId}/<branch>/${project.artifactId}</sitedeploy>
 <enunciate.version>1.26.2</enunciate.version></blockquote>
*After the properties section, add the following so that URL generation is properly "relativized":

 <url>${sitedeploy}</url>

*If not already present, add in the following repository section before the <build> section:
  <repositories>
      <repository>
          <id>opendaylight-release</id>
          <name>opendaylight-release</name>
          <url>${nexusproxy}/repositories/opendaylight.release/</url>
      </repository>
      <repository>
          <id>opendaylight-snapshot</id>
          <name>opendaylight-snapshot</name>
          <url>${nexusproxy}/repositories/opendaylight.snapshot/</url>
      </repository>
  </repositories>
*In the <build> section, add the maven site plugin:
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.1</version>
        <dependencies>
            <!-- add support for WebDAV -->
            <dependency>
                <groupId>org.apache.maven.wagon</groupId>
                <artifactId>wagon-webdav-jackrabbit</artifactId>
                <version>2.2</version>
            </dependency>
            <!-- force slf4j 1.6.x or it fails due to missing class StaticLoggerBinder -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>1.6.1</version>
            </dependency>
        </dependencies>
      </plugin>
*After the <build> section, add the reporting section:
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <links>
            <link>${sitedeploy}/api</link>
          </links>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
*In the <DistributionManagement> section, add:
    <site>
      <id>opendove-master</id>
      <url>dav:${sitedeploy}/</url>
    </site>
note: in the above, replace opendove-master with your particular project's site id (opendove uses opendove-release and opendove-master) and let Andy (tykeal) know your choice so he can make sure the necessary system support is in place

===Clean Up Other Poms===
*Remove the nexusproxy parameter, reportistories and distributionManagement sections and javadoc plugin section from any other project poms.

===Set up enunciate in Poms that need to generate REST API doucmentation===

*Add the following to the properties section
        <enunciate.version>1.26.2</enunciate.version>
*If not present, add the enunciate plugin to the plugins section:
            <plugin>
                <groupId>org.codehaus.enunciate</groupId>
                <artifactId>maven-enunciate-plugin</artifactId>
                <version>${enunciate.version}</version>
                <configuration>
                    <configFile>enunciate.xml</configFile>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>docs</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
*After the build section, add in a reporting section for the REST apis:
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.codehaus.enunciate</groupId>
                <artifactId>maven-enunciate-plugin</artifactId>
                <version>${enunciate.version}</version>
                <configuration>
                    <docsSubdir>rest</docsSubdir>
                    <indexPageName>rest.html</indexPageName>
                </configuration>
            </plugin>
        </plugins>
    </reporting>

===Create enunciate.xml File where needed===
*Create a enunciate with the following contents:
 <enunciate label="full" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="http://enunciate.codehaus.org/schemas/enunciate-1.26.xsd">
   <services>
     <rest defaultRestSubcontext="/controller/nb/v2/opendove/odmc"/>
   </services>
   <modules>
     <docs docsDir="rest" title="OpenDOVE NB REST API" includeExampleXml="false" includeExampleJson="true"/>
   </modules>
 </enunciate>
In the above:
# replace the defaultRestSubcontext attribute with the proper root URI point for the particular project
# replace the title attribute with the correct title for the particular project
# set the includeExampleXml and includeExampleJson attributes correctly
===Commit to gerrit and work through project verify and merge jobs===
*Do what the heading says
==Create Jenkins Site Deploy Job==
*Create a new Jenkins job for the site deploy (in opendove, these jobs are called opendove-master-site-deploy and opendove-stable-site-deploy).
*For description, use "Deploy <project> site information from <fill in> branch into nexus.
[[File:DeployJenkins1.png]]
*Set Discard Old Builds and use Log Rotation as the strategy and set 40 as the number of builds to keep
[[File:DeployJenkins2.png]]
*Make sure "this build is parameterized" is unchecked, select Git source code management and use the git URL as Repository URL
[[File:DeployJenkins3.png]]
*Set branches to build as "origin/<branch>" and "Wipe out repository & force clone" as Additional Behaviours
[[File:DeployJenkins4.png]]
*Clear all Build Triggers
[[File:DeployJenkins5.png]]
*Set build to be Maven 3.0.4 with a root pom of pom.xml and the Goals and options to include
"-Dmaven.repo.local=$WORKSPACE/.m2repo -Dorg.ops4j.pax.url.mvn.localRepository=$WORKSPACE/.m2repo site site:deploy"
[[File:DeployJenkins6.png]]
*Include email notification in case the build fails
[[File:DeployJenkins7.png]]
*Save and manually trigger from Jenkins dashboard to test.
*site is available at ${nexusproxy}/sites/site/${project.groupId}/<branch>/${project.artifactId} or
