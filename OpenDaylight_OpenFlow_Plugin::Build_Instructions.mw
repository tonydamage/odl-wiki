== Building a Base Edition that has the new openflowplugin ==

# Checkout the openflowplugin project (if you need help with this see [[GettingStarted:Pulling,_Hacking,_and_Pushing_All_the_Code_from_the_CLI|Pulling Hacking and Pushing All the Code from the CLI]] ).
# cd into the openflowplugin/distribution/base directory
#: <pre>cd openflowplugin/distribution/base</pre>
# Build the distribution
#: <pre>mvn clean install</pre>
# Run the controller
#: <pre>cd target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight/</pre>
#: <pre>./run.sh -debug</pre>

== Testing controller application module with new openflowplugin ==
If you want to test your application module that's in under development stage with the new openflowplugin, following are the two ways:

1) Push your changes to the controller repository and merge it. Once new artifacts get publish to nexus repository you can follow above steps (1-4) to test it.

2) Build the bundle and its dependency locally and use it with the new openflowplugin. Fire following command from controller project's root directory

 <pre>mvn clean install -pl :<bundle-name> -amd
e.g mvn clean install -pl :statistics-manager -amd</pre>

Above command will install the new packages to the local maven repo. Now follow steps mentioned in above section to build the base edition of openflowplugin project. It will pick up the latest bundle from local maven repo.

== Remote debug ==
The easiest way how to debug OFPlugin is to [[#Building a Base Edition that has the new openflowplugin |start distribution/base]] with '''-debug''' parameter. This will start jvm with listening to remote debugger on port '''8000''' turned on. Now you can attach your eclipse to this process:

[[File:Eclipse-remote-debug.png|eclipse-remote-debug]]

Active breakpoint should look like this (checked):

[[File:Eclipse-remote-debug-breakpoint.png|active breakpoint]]

It is not important, which project is the "debugged" one, but if all projects are added in tab '''Source'''. Having a project attached to debug session as source will enable you to step through sources during debug and place breakpoints.
