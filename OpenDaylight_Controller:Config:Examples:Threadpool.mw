=Example configuration of thread pools using yuma=
==Requirements:==
yangcli-pro version 13.04-7.1 or later

==Connecting to plaintext TCP socket==
Currently TCP and SSH is exposed by the controller. The network interface and port are configured in configuration/config.ini . Current configuration of netconf is:

<source>
# Netconf startup configuration
netconf.tcp.address=0.0.0.0
netconf.tcp.port=8383

netconf.ssh.address=0.0.0.0
netconf.ssh.port=1830
</source>

To connect the yangcli-pro client, use following syntax:
<source>
yangcli-pro --user=a --password=a --transport=tcp --ncport=8383 --server=localhost
</source>

or if you wish to use ssh : 

<source>
yangcli-pro --user=netconf --password=netconf --transport=ssh --ncport=1830 --server=localhost
</source>
Authentication in this case is ignored. For better debugging please include following arguments:
<source>
 --log=/tmp/yuma.log --log-level=debug4
</source>
Note that when log file is set, output will not appear on stdout.

==Configuring threadfactory==
'''threadfactory''' is a service interface that can be plugged into threadpools, defined in config-threadpool-api 
(see yang file [https://git.opendaylight.org/gerrit/gitweb?p=controller.git;a=blob;f=opendaylight/config/threadpool-config-api/src/main/yang/threadpool.yang;h=8f3064822be319dfee6fd7c7061c8bee14db268f;hb=refs/heads/master here]). 

The implementation we are going to use is called '''threadfactory-naming'''. This implementation will set a name for each thread created using configurable prefix and auto incremented index. Yang file can be found [https://git.opendaylight.org/gerrit/gitweb?p=controller.git;a=blob;f=opendaylight/config/threadpool-config-impl/src/main/yang/threadpool-impl.yang;h=a2366f285a0c0b8682b1093f18fb5ee184c9cde3;hb=refs/heads/master here].

* Launch yangcli-pro and connect to the server. 
* enter '''get-config source=running''' to see current configuration. Example output:
<source>
rpc-reply {
  data {
    modules {
      module  binding-broker-singleton {
        type binding-impl:binding-broker-impl-singleton
        name binding-broker-singleton
      }
    }
    services {
      service  md-sal-binding:binding-broker-osgi-registry {
        type md-sal-binding:binding-broker-osgi-registry
        instance  ref_binding-broker-singleton {
          name ref_binding-broker-singleton
          provider /config/modules/module[name='binding-broker-impl-singleton']/instance[name='binding-broker-singleton']
        }
      }
    }
  }
}
</source>
* enter '''merge /modules/module'''
* you will be asked to enter string value for leaf <name>. This is name of the config module. Enter '''threadfactory-bgp'''
* next set identityref for leaf <type>. You can press Tab to see a list of available module names. Enter '''threadfactory-naming'''
* you will be then asked to choose case statement. Example output:
<source>
  1: case netty-threadgroup-fixed:
       leaf thread-count
  2: case netty-hashed-wheel-timer:
       leaf tick-duration
       leaf ticks-per-wheel
       container thread-factory
  3: case async-eventbus:
       container threadpool
  4: case threadfactory-naming:
       leaf name-prefix
  5: case threadpool-fixed:
       leaf max-thread-count
       container threadFactory
  6: case threadpool-flexible:
       leaf max-thread-count
       leaf minThreadCount
       leaf keepAliveMillis
       container threadFactory
  7: case threadpool-scheduled:
       leaf max-thread-count
       container threadFactory
  8: case logback:
       list file-appenders
       list rolling-appenders
       list console-appenders
       list loggers
</source>
In this case, we choose 4.
* Next fill string value for leaf <name-prefix>. Enter '''bgp'''
You should get an OK response from the server.
* Optionally issue '''get-config source=candidate''' to verify the change.
* Issue '''commit'''
* Issue '''get-config source=running'''. Example output:
<source>
rpc-reply {
  data {
    modules {
      module  binding-broker-singleton {
        type binding-impl:binding-broker-impl-singleton
        name binding-broker-singleton
      }
      module  threadfactory-bgp {
        type th-java:threadfactory-naming
        name threadfactory-bgp
        name-prefix bgp
      }
    }
    services {
      service  th:threadfactory {
        type th:threadfactory
        instance  ref_threadfactory-bgp {
          name ref_threadfactory-bgp
          provider /config/modules/module[name='threadfactory-naming']/instance[name='threadfactory-bgp']
        }
      }
      service  md-sal-binding:binding-broker-osgi-registry {
        type md-sal-binding:binding-broker-osgi-registry
        instance  ref_binding-broker-singleton {
          name ref_binding-broker-singleton
          provider /config/modules/module[name='binding-broker-impl-singleton']/instance[name='binding-broker-singleton']
        }
      }
    }
  }
}
</source>
==Configuring fixed threadpool==
Service interface '''threadpool''' is defined in config-threadpool-api. Implementation we will use is called '''threadpool-fixed''' that is defined in config-threadpool-impl (see previous chapter). This implementation creates a threadpool of fixed size. There are two mandatory attributes: size and dependency on a threadfactory.
* Issue '''get-config source=running'''. As you can see in last step of configuring threadfactory, /services/service node associated with it has instance name '''ref_threadfactory-bgp'''.
* Issue '''merge /modules/module'''
* Enter name '''bgp-threadpool'''
* Enter type '''threadpool-fixed'''
* Select appropriate case statement
* Enter value for leaf <max-thread-count>: '''100'''
* Enter '''threadfactory''' for attribute threadfactory/type. This is reference to /services/service/type, in other words, service interface.
* Enter '''ref_threadfactory-bgp'''
Server should reply with OK message.
* Issue commit
* Issue '''get-config source=running'''
Example output:
<source>
rpc-reply {
  data {
    modules {
      module  binding-broker-singleton {
        type binding-impl:binding-broker-impl-singleton
        name binding-broker-singleton
      }
      module  bgp-threadpool {
        type th-java:threadpool-fixed
        name bgp-threadpool
        threadFactory {
          type th:threadfactory
          name ref_threadfactory-bgp
        }
        max-thread-count 100
      }
      module  threadfactory-bgp {
        type th-java:threadfactory-naming
        name threadfactory-bgp
        name-prefix bgp
      }
    }
    services {
      service  th:threadpool {
        type th:threadpool
        instance  ref_bgp-threadpool {
          name ref_bgp-threadpool
          provider /config/modules/module[name='threadpool-fixed']/instance[name='bgp-threadpool']
        }
      }
      service  th:threadfactory {
        type th:threadfactory
        instance  ref_threadfactory-bgp {
          name ref_threadfactory-bgp
          provider /config/modules/module[name='threadfactory-naming']/instance[name='threadfactory-bgp']
        }
      }
      service  md-sal-binding:binding-broker-osgi-registry {
        type md-sal-binding:binding-broker-osgi-registry
        instance  ref_binding-broker-singleton {
          name ref_binding-broker-singleton
          provider /config/modules/module[name='binding-broker-impl-singleton']/instance[name='binding-broker-singleton']
        }
      }
    }
  }
}
</source>

To see actual netconf messages, use the logging arguments described at top of this page.
To validate that a threadpool has been created, tool like VisualVM can be used.

[[File:Configure-threadpools-visualvm.png]]

=Example configuration of thread pools using telnet=
It is also possible to manipulate configuration without the yuma cli. With just a telnet or ssh connection, it is possible to send plain text containing netconf rpcs encoded in xml format and achieve the same results as with yuma cli.

In this example we will reproduce configuration of a threadpool and a threadfactory from the previous example using just a telnet connection. We can also use ssh connection, netconf rpcs sending procedure will be the same. For detailed information about initial configuration for the controller as well as the configuration process, please consult page related to the example using yuma cli. 

== Connecting to plaintext TCP socket ==
Open a telnet connection:
<source>
telnet 127.0.0.1 8383
</source>

Open a ssh connection:
<source>
ssh netconf@127.0.0.1 -p 1830 -s netconf
</source>

The separator for messages is:
<source>
]]>]]>
</source>
and every message needs to be ended with these 6 characters.

You should see a hello message from the server:
<syntaxhighlight lang="xml">
<hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
<capabilities>
<capability>urn:ietf:params:netconf:base:1.0</capability>
<capability>urn:ietf:params:netconf:capability:exi:1.0</capability>
<capability>urn:opendaylight:l2:types?module=opendaylight-l2-types&amp;revision=2013-08-27</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:netty:threadgroup?module=threadgroup&amp;revision=2013-11-07</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding?module=opendaylight-md-sal-binding&amp;revision=2013-10-28</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:threadpool?module=threadpool&amp;revision=2013-04-09</capability>
<capability>urn:ietf:params:netconf:capability:candidate:1.0</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:config?module=config&amp;revision=2013-04-05</capability>
<capability>urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring?module=ietf-netconf-monitoring&amp;revision=2010-10-04</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:netty:eventexecutor?module=netty-event-executor&amp;revision=2013-11-12</capability>
<capability>urn:ietf:params:xml:ns:yang:rpc-context?module=rpc-context&amp;revision=2013-06-17</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding:impl?module=opendaylight-sal-binding-broker-impl&amp;revision=2013-10-28</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:netty:timer?module=netty-timer&amp;revision=2013-11-19</capability>
<capability>urn:ietf:params:xml:ns:yang:ietf-inet-types?module=ietf-inet-types&amp;revision=2010-09-24</capability>
<capability>urn:ietf:params:netconf:capability:rollback-on-error:1.0</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl?module=threadpool-impl&amp;revision=2013-04-05</capability>
<capability>urn:ietf:params:xml:ns:yang:ietf-yang-types?module=ietf-yang-types&amp;revision=2010-09-24</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:logback:config?module=config-logging&amp;revision=2013-07-16</capability>
<capability>urn:opendaylight:params:xml:ns:yang:iana?module=iana&amp;revision=2013-08-16</capability>
<capability>urn:opendaylight:yang:extension:yang-ext?module=yang-ext&amp;revision=2013-07-09</capability>
<capability>urn:opendaylight:params:xml:ns:yang:controller:netty?module=netty&amp;revision=2013-11-19</capability>
<capability>http://netconfcentral.org/ns/toaster?module=toaster&amp;revision=2009-11-20</capability>
<capability>urn:opendaylight:params:xml:ns:yang:ieee754?module=ieee754&amp;revision=2013-08-19</capability>
<capability>urn:opendaylight:params:xml:ns:yang:nps-concepts?module=nps-concepts&amp;revision=2013-09-30</capability>
</capabilities>

<session-id>4</session-id>
</hello>
]]>]]>
</syntaxhighlight>
 
You as the client need to respond with hello message:
<syntaxhighlight lang="xml">
<hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
    <capabilities>
        <capability>urn:ietf:params:netconf:base:1.0</capability>
    </capabilities>
</hello>
]]>]]>
</syntaxhighlight>

There is no response to hello message, but the session is already established.

== Configuring threadfactory ==
Xml equivalent to '''get-config source=running''':
<syntaxhighlight lang="xml">
<rpc xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="101">
    <get-config>
        <source>
            <running/>
        </source>
    </get-config>
</rpc>
]]>]]>
</syntaxhighlight>

Response containing current configuration:
<syntaxhighlight lang="xml">
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="101">
	<data>
		<modules xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
			<module>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding:impl">prefix:binding-broker-impl-singleton</type>
				<name>binding-broker-singleton</name>
			</module>
		</modules>
		<services xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
			<service>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding">prefix:binding-broker-osgi-registry</type>
				<instance>
					<name>ref_binding-broker-singleton</name>
					<provider>/config/modules/module[name='binding-broker-impl-singleton']/instance[name='binding-broker-singleton']</provider>
				</instance>
			</service>
		</services>
	</data>
</rpc-reply>]]>]]>
</syntaxhighlight>

To create an instance of '''threadfactory-naming''' with name '''threadfactory-bgp''' and attribute '''name-prefix''' set to '''bgp''', send message:
<syntaxhighlight lang="xml">
<rpc message-id="101" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
	<edit-config>
		<target>
			<candidate/>
		</target>
		<default-operation>merge</default-operation>
		<config>
			<modules xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
				<module xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" nc:operation="merge">
					<name>threadfactory-bgp</name>
					<type xmlns:th-java="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">th-java:threadfactory-naming</type>
					<name-prefix xmlns="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">bgp</name-prefix>
				</module>
			</modules>
		</config>
	</edit-config>
</rpc>]]>]]>
</syntaxhighlight>

To commit the threadfactory instance, send a commit message:
<syntaxhighlight lang="xml">
<rpc message-id="101" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
	<commit/>
</rpc>]]>]]>
</syntaxhighlight>

Netconf endpoint should respond with ok to edit-config as well as commit message:
<syntaxhighlight lang="xml">
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="101">
        <ok/>
</rpc-reply>]]>]]>
</syntaxhighlight>

Now the response to get-config message (same as the first message sent in this example) should contain commited instance of threadfactory-naming:
<syntaxhighlight lang="xml">
<rpc-reply xmlns="urn:ietf:params:xml:ns:netconf:base:1.0" message-id="101">
	<data>
		<modules xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
			<module>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding:impl">prefix:binding-broker-impl-singleton</type>
				<name>binding-broker-singleton</name>
			</module>

			<module>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">prefix:threadfactory-naming</type>
				<name>threadfactory-bgp</name>
				<name-prefix xmlns="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">bgp</name-prefix>
			</module>
		</modules>
		
		<services xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
			<service>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool">prefix:threadfactory</type>
				<instance>
					<name>ref_threadfactory-bgp</name>
					<provider>/config/modules/module[name='threadfactory-naming']/instance[name='threadfactory-bgp']</provider>
				</instance>
			</service>
			<service>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:binding">prefix:binding-broker-osgi-registry</type>
				<instance>
					<name>ref_binding-broker-singleton</name>
					<provider>/config/modules/module[name='binding-broker-impl-singleton']/instance[name='binding-broker-singleton']</provider>
				</instance>
			</service>
		</services>
	</data>
</rpc-reply>]]>]]>
</syntaxhighlight>

== Configuring fixed threadpool ==
To create an instance of '''threadpool-fixed ''' with the same configuration and the same dependency as before, we need to send following message:
<syntaxhighlight lang="xml">
<rpc message-id="101" xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
	<edit-config>
		<target>
			<candidate/>
		</target>
		<default-operation>merge</default-operation>
		<config>
			<modules xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
				<module xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0" nc:operation="merge">
					<name>bgp-threadpool</name>
					<type xmlns:th-java="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">th-java:threadpool-fixed</type>
					<max-thread-count xmlns="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">100</max-thread-count>
					<threadFactory xmlns="urn:opendaylight:params:xml:ns:yang:controller:threadpool:impl">
						<type xmlns:th="urn:opendaylight:params:xml:ns:yang:controller:threadpool">th:threadfactory</type>
						<name>ref_th-bgp</name>
					</threadFactory>
				</module>
			</modules>
			
			<services xmlns="urn:opendaylight:params:xml:ns:yang:controller:config">
			<service>
				<type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:threadpool">prefix:threadfactory</type>
				<instance>
					<name>ref_th-bgp</name>
					<provider>/config/modules/module[name='threadfactory-naming']/instance[name='threadfactory-bgp']</provider>
				</instance>
			</service>
		</services>
		</config>
	</edit-config>
</rpc>]]>]]>
</syntaxhighlight>

Notice the ''services'' tag. If an instance is to be referenced as a dependency by another module, it needs to be placed under this tag as a service instance with a unique reference name. Tag ''provider'' points to a unique instance that is already present in the config subsystem or is created within current edit-config operation. Tag ''name'' contains the reference name, that can be referenced by other modules to create a dependency (in this case, new instance of threadpool  uses this reference in its configuration under ''threadFactory'' tag).

You should get an ok response again and the configuration subsystem will take care of injecting the dependency into the threadpool. Now you can commit the configuration (ok response once more) and the process is finished. Config subsystem is now in the same state as it was at the end of the previous example.
