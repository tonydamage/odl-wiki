

Back to [[Defense4All:User_Guide|Defense4All User Guide Page]]

=Defense4All REST APIs Overview=

Defense4All supports REST APIs with json encoding. All framework REST resources appear under “/rest/general/”, while all Defense4All application resources appear under “/rest/app/df/”.

=Set Defense4All host address=

'''Description''' – Sets the IP address of the machine on which Defense4All is run. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/general/hostaddress

'''Request body''' – '''hostaddress''' 

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''hostaddress'''

|
IP address of the machine on which Defense4All is run

|
Hostname or IP address in CIDR or address-mask format

|}
=Get Defense4All host address=

'''Description''' – Gets the IP address of the machine on which Defense4All is run. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/general/hostaddress

'''Request body''' – none

'''Result body''' - '''hostaddress'''

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''hostaddress'''

|
IP address of the machine on which Defense4All is run

|
Hostname or IP address in CIDR or address-mask format

|}
=Terminate Defense4All=

'''Description''' – Terminate Defense4All. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/general/terminate

'''Request body''' (optional) – '''scope'''

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – In this version Defense4All is not clustered, so “this” and “cluster” mean the same thing.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''scope'''

|
Scope of termination – this instance or entire Defense4All cluster

|
“this” – this instance (default if no scope provided).

“cluster” – entire Defense4All cluster

|}

=Reset Defense4All=

'''Description''' – Reset Defense4All. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/general/reset

'''Request body''' (optional) – '''level'''

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – In this version all resets are treated as factory reset. More granular resets are to be supported in future versions.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''level'''

|
Level of reset to perform

|
“soft” – Reset easily reconstructable dynamic state (e.g., latest traffic statistics, network topology).

“dynamic” – In addition to “soft”, reset all dynamic state portions, including the not easily reconstructable (e.g., traffic baselines).

“factory” - Full reset of both dynamic state as well as user configurations

|}
=Get Selected Flight Recorder Events=

'''Description''' – Get an optionally limited by number flight recorded events matching an optional specification of filters (event categories) and optional date-time range. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/general/fr/events

'''Request body''' (url encoded) – maxNum='''maxNum'''&fromDate='''fromDate'''&toDate=''' toDate''' &filter='''filterList'''

'''Result body''' – 

   [
       {
        "key":"'''key'''",
        "eventTime":“'''eventTime'''”,
        "eventType":"'''eventType''' ",
        "eventData":" '''eventData''' ",
        "timeCounter":" '''timeCounter''' "
       }
   ]


'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''maxNum'''

|
Max number of event records to return. Optional, if not specified 2147483647 is assumed.

|
Number.

|-
|
'''fromDate'''

|
Earliest events date-time

|
Example: 10/13/2013_16:55:00 

|-
|
'''toDate'''

|
Latest events date-time

|
Example: 10/20/2013_16:55:00

|-
|
'''filterList'''

|
List of textual filters. Optional. If not specified all categories of events are assumed. 

Filter names: ''DF'' stands for Defense4All, ''AMS'' stands for Attack Mitigation System, ''OFC'' stands for OpenDaylight Controller. ''config'' events record user configurations. ''operational'' events record informational runtime data. ''failure'' events record failures. ''security'' events record information about security detections, attacks and mitigations, as well as monitored traffic periodically recorded baselines.

|
Filter example: DF_security,AMS_security

Valid Filters: 

Framework_config, Framework_operational, Framework_failure, DF_config, DF_operational, DF_failure, DF_security, AMS_operational, AMS_failure, AMS_security, OFC_operational, OFC_failure



|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''key'''

|
Event record key

|
String

|-
|
'''eventTime'''

|
Time of the event

|
String value of the number of milliseconds since January 1, 1970, 00:00:00 GMT

|-
|
'''eventType'''

|
Event type (category)

|
See filterList above.

|-
|
'''eventData'''

|
Textual event description

|
String.

|-
|
'''timeCounter'''

|
Distinct time value for each event. 

String System times are frequently limited in precision to milliseconds or mote. Distinct value for each event is achieved by concatinating a unique counter value to event time.

|
String value of the number of milliseconds since January 1, 1970, 00:00:00 GMT, concatenated with “_” and a string value of a counter.

|}

=Get Latest Flight Recorder Events=

'''Description''' – Get an optionally limited by number flight recorded events matching an optional specification of filters (event categories). 

'''HTTP Method''' - GET

'''Request URI''' - /rest/general/fr/latest

'''Request body''' (optional. url encoded) – maxNum='''maxNum'''&filter='''filterList'''

'''Result body''' - 

   [
       {
        "key":"'''key'''",
        "eventTime":“'''eventTime'''”,
        "eventType":"'''eventType''' ",
        "eventData":" '''eventData''' ",
        "timeCounter":" '''timeCounter''' "
       }
   ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''maxNum'''

|
Max number of event records to return. Optional, if not specified 2147483647 is assumed.

|
Number.

|-
|
'''filterList'''

|
List of textual filters. Optional. If not specified all categories of events are assumed. 

Filter names: DF stands for Defense4All, AMS stands for Attack Mitigation System, OFC stands for OpenDaylight Controller. config events record user configurations. operational events record informational runtime data. failure events record failures. security events record information about security detections, attacks and mitigations, as well as monitored traffic periodically recorded baselines.

|
Filter example: DF_security,AMS_security

Valid Filters: 

Framework_config, Framework_operational, Framework_failure, DF_config, DF_operational, DF_failure, DF_security, AMS_operational, AMS_failure, AMS_security, OFC_operational, OFC_failure

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''key'''

|
Event record key

|
String

|-
|
'''eventTime'''

|
Time of the event

|
String value of the number of milliseconds since January 1, 1970, 00:00:00 GMT

|-
|
'''eventType'''

|
Event type (category)

|
See filterList above.

|-
|
'''eventData'''

|
Textual event description

|
String.

|-
|
'''imeCounter'''

|
Distinct time value for each event. 

String System times are frequently limited in precision to milliseconds or mote. Distinct value for each event is achieved by concatinating a unique counter value to event time.

|
String value of the number of milliseconds since January 1, 1970, 00:00:00 GMT, concatenated with “_” and a string value of a counter.

|}

=Dump Flight Recorder Events=

'''Description''' – Dump to file and delete from Flight Recorder logs a set of recorded events. The events are optionally limited by number, optionally match one of specified filters (event categories), and have an optional date-time range. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/general/fr/dump

'''Request body''' (url encoded) – maxNum='''maxNum'''&fromDate='''fromDate'''&toDate=''' toDate''' &filter='''filterList''' &toFile='''toFile'''

'''Result body''' - '''fileName'''

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''maxNum'''

|
Max number of event records to return. Optional, if not specified 2147483647 is assumed.

|
Number.

|-
|
'''fromDate'''

|
Earliest events date-time

|
Example: 10/13/2013_16:55:00 

|-
|
'''toDate'''

|
Latest events date-time

|
Example: 10/20/2013_16:55:00

|-
|
'''filterList'''

|
List of textual filters. Optional. If not specified all categories of events are assumed. 

Filter names: ''DF'' stands for Defense4All, ''AMS'' stands for Attack Mitigation System, ''OFC'' stands for OpenDaylight Controller. ''config'' events record user configurations. ''operational'' events record informational runtime data. ''failure'' events record failures. ''security'' events record information about security detections, attacks and mitigations, as well as monitored traffic periodically recorded baselines.

|
Filter example: DF_security,AMS_security

Valid Filters: 

Framework_config, Framework_operational, Framework_failure, DF_config, DF_operational, DF_failure, DF_security, AMS_operational, AMS_failure, AMS_security, OFC_operational, OFC_failure

|-
|
'''toFile'''

|
Name of the file to write event records to.

|
String. File name.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''fileName'''

|
The name of the file into which the event records were written

|
String. File name.

|}

=Cleanup Flight Recorder Events=

'''Description''' – Cleanup (delete) from Flight Recorder logs a set of recorded events older than specified number of days ago. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/general/fr/cleanup

'''Request body '''(url encoded) – olderDays='''olderDays'''

'''Result body''' - '''olderDates'''

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''olderDays'''

|
Delete all events dated '''olderDays '''ago or more

|
Number

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''olderDays'''

|
The passed in number of days to delete events earlier than that number of days ago.

|
Number

|}
=Get PNs=

'''Description''' – Get all the information (configured and dynamic) of all PNs. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/pns

'''Request body''' – none

'''Result body''' - 

   [
    '''PN_RECORD'''
   ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''PN_RECORD'''

|
PN Information. See get PN for details

|


|}

=Get PNs Count=

'''Description''' – Get the number of PNs. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/pns/count

'''Request body''' – none

'''Result body''' - '''count'''

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''count'''

|
The number of existing PNs

|
Number

|}
=Get PN=

'''Description''' – Get all the information (configured and dynamic) of a PN. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/pns/'''label'''

'''Request body''' – none

'''Result body''' - 

   {
     "label":"'''label'''",
     "ipVersion":“'''ipVersion'''”,
     "dstAddr":"'''dstAddr''' ",
     "dstAddrPrefixLen":"'''dstAddrPrefixLen'''",
     "virtualNetid":"'''virtualNetid'''",
     "protectionSLA":"'''protectionSLA'''",
     "mitigationConfirmation":"'''mitigationConfirmation'''",
     "detectorLabel":”'''detectorLabel'''",
     "baselinesTime":"'''baselinesTime'''",
     "ofBasedDetection":"'''ofBasedDetection'''",
     "symmetricDvsn":"'''symmetricDvsn'''",
     "anomallyThresholdPercentage":"'''anomallyThresholdPercentage'''",
     "pnCanceled":"'''pnCanceled'''",
     "mitigationScope":"'''mitigationScope'''",
     "statsCollectionStatus":"'''statsCollectionStatus'''",
     "thresholdStr":"'''thresholdStr'''",
     "averageStr":"'''averageStr'''",
     "baselineStr":"'''baselineStr'''",
     "latestRateStr":"'''latestRateStr'''",
     "amsConfigProps":
           [
              {
                 “'''amsConfigPropertyName'''":”'''amsConfigPropertyValue'''"
              }
           ],  
     "props":
           [
              {
                 “'''propertyName'''":”'''propertyValue'''"
              }
           ],     
     "netNodeLabels":
           [
                 “'''netNodeLabel'''"
           ]
   }

'''Format of '''TrafficTuple, used in thresholdStr, averageStr, baselineStr, latestRateStr – 

[[File:traffic_tuple.jpg|none|900px|Traffic Tuple]]

         For example - 17:0:0.0:0.0:true:INBOUND::6:0:25389.31:314.92477:true:INBOUND::1:0:0.0:0.0:true:INBOUND::0:0:0.0:0.0:true:INBO



'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – See Remarks in Add PN.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
PN label

|
Textual value of size less than 100 bytes, starting with a letter

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
PN unique label

|
String up to 256 bytes.

|-
|
'''ipVersion'''

|
IP Version 

|
'''IPV4''' | '''IPV6'''

|-
|
'''dstAddr'''

|
Protected destination address prefix

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number. The protected address range is the subnet of size '''dstAddressPrefixLen''' containing the address.

|-
|
'''dstAddrPrefixLen'''

|
Protected destination address prefix length

|
Number

|-
|
'''virtualNetid'''

|
Id of a virtual network in which the PN lives. Optional. Examples: VLAN, NEC VTN

|
String

|-
|
'''protectionSLA'''

|
Service Level Agreement for this PN

|
Currently empty

|-
|
'''mitigationConfirmation'''

|
Indicator whether user confirmation is needed for mitigation of an attack (e.g., traffic redirection to a mitigation device).

|
'''true '''| '''false'''

|-
|
'''detectorLabel'''

|
Label of desired detector of attacks for this PN

|
For detection based on stats collected from Controller “of_rate_based_detector” should appear.

|-
|
'''baselinesTime'''

|
Time of last snapshot of traffic baselines. 

|
Number - milliseconds since January 1, 1970, 00:00:00 GMT

|-
|
'''ofBasedDetection'''

|
Indicator whether detection is based on stats collected from ODC.

|
'''true '''| '''false'''

|-
|
'''symmetricDvsn'''

|
Indicator whether upon attack mitigation traffic redirection should be done both for inbound (to protected servers) and outbound traffic (back from protected servers).

|
'''true '''| '''false'''

|-
|
'''anomallyThresholdPercentage'''

|
Percentage of deviation of current traffic rate from baselines triggering detection of attack in the. Can be either in bytes or packets per second for each protocol portion of the traffic (see protocol).

|
Number.

|-
|
'''pnCanceled'''

|
Indicator whether the PN has been logically deleted (and appears only for recording and analysis purposes).

|
Boolean.

|-
|
'''mitigationScope'''

|
Indicator what portion of the traffic is to be mitigated (redirected to mitigation device).

|
'''ALL '''– all PN traffic should be mitigated.

'''ATTACKED''' - only the attacked portion (e.g., tcp) should be mitigated.

|-
|
'''statsCollectionStatus'''

|
Status of Stats collection for this PN.

|
'''INVALID '''– For PNs with no Controller stats based attack detection.

'''NONE''' - No stats collection locations are found yet. Defense4All will keep retrying to find locations each time the topology changes.

'''STOPPED''' - Stats collection has been stopped. Can be because of attack mitigation, resource preemption, etc. Not applied.

'''ACTIVE''' – Defense4All periodically collects from Controller for detecting attacks.

|-
|
'''thresholdStr'''

|
Vector of static thresholds for attack detection – for bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''averageStr'''

|
Vector of calculated traffic averages – for bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''baselineStr'''

|
Vector of periodically taken baselines (from calculated traffic averages) – for bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''latestRateStr'''

|
Vector of latest traffic rates – for bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''amsConfigPropertyName'''

|
Name of AMS configuration property. AMS specific – please refer to remarks below.

|
String

|-
|
'''amsConfigPropertyValue'''

|
Value of AMS configuration property. AMS specific – please refer to remarks.

|
String

|-
|
'''propertyName'''

|
Name of general configuration property. Please refer to remarks.

|
String

|-
|
'''propertyValue'''

|
Name of general configuration property. Please refer to remarks.

|
String

|-
|
'''netNodeLabel'''

|
Label of a NetNode relevant to protection of this PN. Please refer to remarks. 

|
String

|-
|
'''protocol'''

|
Traffic data protocol for which stats were obtained. 

|
'''TCP'''|'''UDP'''|'''ICMP'''|'''OTHER''' (rest of IP traffic)

|-
|
'''port'''

|
Traffic data L4 port for which stats were obtained. 

|
Number

|-
|
'''bytes'''

|
Traffic data bytes rate for specified protocol and port. Please refer also to remarks.

|
Number

|-
|
'''packets'''

|
Traffic data packets rate for specified protocol and port. Please refer also to remarks.

|
Number

|-
|
'''forTrafficLearning'''

|
This indicator is applicable only to latestRateStr, indicating whether the subject trafficData should be accounted for averages or not. For attacked traffic the value is false, otherwise true. Please refer to remarks for additional information. 

|
'''true'''|'''false'''

|-
|
'''direction'''

|
Direction of the counted trafficData – can be inbound (traffic into the protected servers) or outbound (traffic returning from protected servers).

|
'''INBOUND '''| '''OUTBOUND'''

|}

=Add PN=

'''Description''' – Configure a PN in Defense4All. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/pns

'''Request body''' – 

   {
     "label":"'''label'''",
     "ipVersion":“'''ipVersion'''”,
     "dstAddr":"'''dstAddr''' ",
     "dstAddrPrefixLen":"'''dstAddrPrefixLen'''",
     "virtualNetid":"'''virtualNetid'''",
     "protectionSLA":"'''protectionSLA'''",
     "mitigationConfirmation":"'''mitigationConfirmation'''",
     "detectorLabel":”'''detectorLabel'''",
     "ofBasedDetection":"'''ofBasedDetection'''",
     "symmetricDvsn":"'''symmetricDvsn'''",
     "anomallyThresholdPercentage":"'''anomallyThresholdPercentage'''",
     "mitigationScope":"'''mitigationScope'''",
     "thresholdStr":"'''thresholdStr'''",
     "amsConfigProps":
          [
             {
               “'''amsConfigPropertyName'''":”'''amsConfigPropertyValue'''"
             }
          ],  
     "props":
          [
            {
              “'''propertyName'''":”'''propertyValue'''"
            }
          ],     
     "netNodeLabels":
          [
             “'''netNodeLabel'''"
          ]
   }

'''Format of '''TrafficTuple, used in thresholdStr – 

[[File:traffic_tuple.jpg|none|900px|Traffic Tuple]]

         For example - 17:0:0.0:0.0:true:INBOUND::6:0:25389.31:314.92477:true:INBOUND::1:0:0.0:0.0:true:INBOUND::0:0:0.0:0.0:true:INBO


'''Results body''' – none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – 

# Defining PNs with overlapping destination addresses should be avoided (may lead to unpredictable results).
# Configuration properties - Because Defense4All is a pluggable application and framework, its general REST API must not include any component specific configurations as named parameters in PN. To allow configuration of pluggable components the notion of configuration properties is used. Any configuration setup, specific to a pluggable component should be configured as a property carrying a unique property name. '''amsConfigProps''' properties are optional AMS configuration properties, specific per each AMS. Read AMS specific documentation to see what properties should be set. The reference AMS implementation over Radware DefensePro uses default configuration and therefore does not require configuration properties. '''Props''' are optional configuration properties of all other pluggable components (like additional future pluggable attack detectors, mitigation drivers, or versions of ODC).
# Specified NetNodes - NetNodes through which PN traffic normally flows (if not redirected), NetNodes to which AMSs relevant to this PN attack mitigation are connected, or both. Defense4All places traffic counters on NetNodes with traffic ports. It diverts attacked PN traffic to one/some of the AMSs connected to NetNodes in this set.
# Bytes and packets values represent combined values of the respective protocol-port-direction from all counter locations, from which statistics for this PN are taken. 
# A trafficData contains bytes and packets rate values per some combination of protocol-port-direction). '''forTrafficLearning''' associated with each trafficData indicates whether that trafficData should be accounted for traffic learning – calculating averages. '''forTrafficLearning''' is set to false for attacked trafficData, otherwise it is normally true. This indicator is only relevant to '''latestRateStr'''.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
PN unique label

|
String up to 256 bytes.

|-
|
'''ipVersion'''

|
IP Version 

|
IPV4 | IPV6

|-
|
'''dstAddr'''

|
Protected destination address prefix

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number. The protected address range is the subnet of size '''dstAddressPrefixLen''' containing the address.

|-
|
'''dstAddrPrefixLen'''

|
Protected destination address prefix length

|
Number

|-
|
'''virtualNetid'''

|
Id of a virtual network in which the PN lives. Optional. Examples: VLAN, NEC VTN

|
String

|-
|
'''protectionSLA'''

|
Service Level Agreement for this PN

|
Currently empty

|-
|
'''mitigationConfirmation'''

|
Indicator whether user confirmation is needed for mitigation of an attack (e.g., traffic redirection to a mitigation device).

|
'''True |''' '''false '''(default)

|-
|
'''detectorLabel'''

|
Label of desired detector of attacks for this PN

|
For detection based on stats collected from Controller “of_rate_based_detector” should appear.

|-
|
'''ofBasedDetection'''

|
Indicator whether detection is based on stats collected from ODC.

|
'''True |''' '''false '''(default)

|-
|
'''symmetricDvsn'''

|
Indicator whether upon attack mitigation traffic redirection should be done both for inbound (to protected servers) and outbound traffic (back from protected servers).

|
'''True |''' '''false '''(default)

|-
|
'''anomallyThresholdPercentage'''

|
Percentage of deviation of current traffic rate from baselines triggering detection of attack in the. Can be either in bytes or packets per second for each protocol portion of the traffic (see protocol).

|
Number

|-
|
'''mitigationScope'''

|
Indicator what portion of the traffic is to be mitigated (redirected to mitigation device).

|
'''ALL '''– all PN traffic should be mitigated.

'''ATTACKED''' - (default) only the attacked portion (e.g., tcp) should be mitigated.

|-
|
'''thresholdStr'''

|
Vector of static thresholds for attack detection – for bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''amsConfigPropertyName'''

|
Name of AMS configuration property. AMS specific – please refer to remarks below.

|
String

|-
|
'''amsConfigPropertyValue'''

|
Value of AMS configuration property. AMS specific – please refer to remarks.

|
String

|-
|
'''propertyName'''

|
Name of a general configuration property. Please refer to remarks.

|
String

|-
|
'''propertyValue'''

|
Name of a general configuration property. Please refer to remarks.

|
String

|-
|
'''netNodeLabel'''

|
Label of a NetNode relevant to protection of this PN. Please refer to remarks. 

|
String

|-
|
'''protocol'''

|
Threshold traffic data protocol

|
'''TCP'''|'''UDP'''|'''ICMP'''|'''OTHER''' (rest of IP traffic)

|-
|
'''port'''

|
Threshold traffic data L4 port

|
Number


|}

=Delete PN=

'''Description''' – Delete a PN. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/pns/'''label'''

'''Request body''' – none

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
PN label

|
String up to 256 bytes.

|}
=Get AMSs=

'''Description''' – Get all the information (configured and dynamic) of all AMSs. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/amss

'''Request body''' – none

'''Result body''' - 

   [
       '''AMS_RECORD'''
   ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''AMS_RECORD'''

|
AMS Information. See Get AMS for details

|


|}
=Get AMSs Count=

'''Description''' – Get the number of AMSs. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/amss/count

'''Request body''' – none

'''Result body''' - '''count'''

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''count'''

|
The number of existing AMSs

|
Number

|}

=Get AMS=

'''Description''' – Get all the information (configured and dynamic) of an AMS. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/amss/'''label'''

'''Request body''' – none

'''Result body''' - 

  {
     "label":"'''label'''",
     "brand":“'''brand'''”,
     "version":"'''version''' ",
     "mgmtAddr":"'''mgmtAddr'''",
     "mgmtPort":"'''mgmtPort'''",
     "username":"'''username'''",
     "password":"'''password'''",
     "forStatsCollection":”'''forStatsCollection'''",
     "forDiversion":"'''forDiversion'''",
     "healthCheckFrequency":"'''healthCheckFrequency'''", 
     "props":
          [
             {
                 “'''propertyName'''":”'''propertyValue'''"
             }
          ],     
     "securityConfigKeys":
          [
             “'''securityConfigKey'''"
          ]
   }

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# See remarks in Add AMS.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
AMS label

|
String up to 256 bytes.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
AMS label

|
String up to 256 bytes.

|-
|
'''brand'''

|
AMS brand

|
String up to 256 bytes.

|-
|
'''version'''

|
AMS version

|
String up to 256 bytes.

|-
|
'''mgmtAddr'''

|
AMS management address

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number.

|-
|
'''mgmtPort'''

|
AMS management L4 port

|
Number

|-
|
'''username'''

|
Username used to communicate with AMS

|
String up to 256 bytes. Additional AMS specific limitations may apply.

|-
|
'''password'''

|
Password used to  communicate with AMS

|
String up to 256 bytes. Additional AMS specific limitations may apply.

|-
|
'''forStatsCollection'''

|
Indicator whether this AMS is used at peace-time for stats collection and attack detection - instead of  ODC stats based detection.

|
'''true''' | '''false'''

|-
|
'''forDiversion'''

|
Indicator whether this AMS is used for attack mitigation (traffic diversion)

|
'''true''' | '''false'''

|-
|
'''healthCheckFrequency'''

|
Frequency to check health of this AMS – check every '''healthCheckFrequency '''seconds

|
Number

|-
|
'''propertyName'''

|
Name of a configuration property. Please refer to remarks.

|
String.

|-
|
'''propertyValue'''

|
Value of a configuration property. Please refer to remarks.

|
String.

|-
|
'''securityConfigKey'''

|
Key to a specific security configuration in the AMS. Defense4All may configure security upfront or for the duration of mitigation of a specific attack. API to retrieve the corresponding security configuration record in Defense4All is to be added in the future.

|
String

|}

=Add AMS=

'''Description''' – Configure an AMS to Defense4All. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/amss/'''label'''

'''Request body''' – none

'''Result body''' - 

   {
     "label":"'''label'''",
     "brand":“'''brand'''”,
     "version":"'''version''' ",
     "mgmtAddr":"'''mgmtAddr'''",
     "mgmtPort":"'''mgmtPort'''",
     "username":"'''username'''",
     "password":"'''password'''",
     "forStatsCollection":”'''forStatsCollection'''",
     "forDiversion":"'''forDiversion'''",
     "healthCheckFrequency":"'''healthCheckFrequency'''", 
     "props":
          [
            {
                “'''propertyName'''":”'''propertyValue'''"
            }
          ]
   }

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# Configuration properties - Because AMS is a pluggable component, the Defense4All general REST API must not include any component specific configurations as named parameters in AMS. To allow configuration of pluggable components the notion of configuration properties is used. Any AMS specific configuration setup should be configured as a property carrying a unique property name. '''Props''' are the optional configuration properties of the AMS.
# An AMS may be connected to a NetNode via multiple input-output port pairs. The can be done for enhanced availability or traffic isolation. However the AMS label for each connection must be unique. Logically, therefore, each AMS port-pair map to a separate AMS with its unique label.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
AMS label

|
String up to 256 bytes.

|-
|
'''brand'''

|
AMS brand

|
String up to 256 bytes.

|-
|
'''version'''

|
AMS version

|
String up to 256 bytes.

|-
|
'''mgmtAddr'''

|
AMS management address

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number.

|-
|
'''mgmtPort'''

|
AMS management L4 port

|
Number

|-
|
'''username'''

|
Username to be used communicating with AMS

|
String up to 256 bytes. Additional AMS specific limitations may apply.

|-
|
'''password'''

|
Password to be used communicating with AMS

|
String up to 256 bytes. Additional AMS specific limitations may apply.

|-
|
'''forStatsCollection'''

|
Indicator whether this AMS is to be used at peace-time for stats collection and attack detection - instead of  ODC stats based detection.

|
'''true''' | '''false'''

|-
|
'''forDiversion'''

|
Indicator whether this AMS is to be used for attack mitigation (traffic diversion)

|
'''true''' | '''false'''

|-
|
'''healthCheckFrequency'''

|
Frequency to check health of this AMS – check every '''healthCheckFrequency '''seconds

|
Number

|-
|
'''propertyName'''

|
Name of a configuration property. Please refer to remarks.

|
String.

|-
|
'''propertyValue'''

|
Value of a configuration property. Please refer to remarks.

|
String.

|}

=Delete AMS=

'''Description''' – Delete an AMS. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/pns/'''label'''

'''Request body''' – none

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
AMS label

|
String up to 256 bytes.

|}


=Get NetNodes=

'''Description''' – Get all the information (configured and dynamic) of all NetNodes. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/netnodes

'''Request body''' – none

'''Result body''' - 

   [
    '''NETNODE_RECORD'''
   ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''NETNODE_RECORD'''

|
NetNode Information. See Get NetNode for details

|


|}

=Get NetNodes Count=

'''Description''' – Get the number of NetNodes. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/netnodes/count

'''Request body''' – none

'''Result body''' - '''count'''

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''count'''

|
The number of existing NetNodes

|
Number

|}
=Get NetNode=

'''Description''' – Get all the information (configured and dynamic) of a NetNode. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/netnodes/'''label'''

'''Request body''' – none

'''Result body''' - 

   {
     "label":"'''label'''",
     "id":“'''id'''”,
     "type":"'''type''' ",
     "mgmtAddr":"'''mgmtAddr'''",
     "mgmtPort":"'''mgmtPort'''",
     "sdnNodeMode":"'''sdnNodeMode'''",
     "healthCheckFrequency":"'''healthCheckFrequency'''", 
     "status":"'''status'''",
     "props":
          [
            {
               “'''propertyName'''":”'''propertyValue'''"
            }
          ],     
     "amsConnectionsStr":"'''amsConnectionsStr'''",
     "trafficPortsStr":"'''trafficPortsStr'''",
     "protectedLinksStr":"'''protectedLinksStr'''"
   }

'''Format of '''amsConnections, used in amsConnectionsStr – 

 [[File:ams_connections.jpg|none|900px|AMS Connections]]

         For example – ams1:netnodePort1:netnodePort2:5:6::ams2:netnodePort3:netnodePort4:1:2 

'''Format of '''trafficPorts, used in trafficPortStr – 

 [[File:traffic_ports.jpg|none|900px|Traffic Ports]]

         For example – trafficPort5:5:1020:north::trafficPort6:6:1030:south::trafficPort7:7:1040:north::trafficPort8:8:1050:south

'''Format of '''protectedLinks, used in protectedLinksStr – 

 [[File:protected_links.jpg|none|900px|Protected Links]]

         For example – protectedLink56:5:6:0000005056a31b80:: protectedLink78:7:8:0000005056a31b81



'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# See remarks in Add NetNode.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
NetNode label

|
String up to 256 bytes.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
NetNode label

|
String up to 256 bytes.

|-
|
'''id'''

|
NetNode id. See remarks.

|
String up to 256 bytes.

|-
|
'''type'''

|
NetNode type. 

|
'''OF''' – for ODC managed switches/routers

|-
|
'''mgmtAddr'''

|
NetNode management address

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number.

|-
|
'''mgmtPort'''

|
NetNode management L4 port

|
Number

|-
|
'''sdnNodeMode'''

|
Mode of operation of this NetNode. See remarks.

|
'''Sdnenablednative''' |  '''sdnenabledhybrid'''

|-
|
'''healthCheckFrequency'''

|
Frequency to check this NetNode’s health – every '''healthCheckFrequency '''seconds

|
Number

|-
|
'''status'''

|
NetNode status indicating whether the NetNode is active or has logically been removed (and appears only for recording and analysis purposes).

|
'''ACTIVE'''|'''REMOVED'''

|-
|
'''propertyName'''

|
Name of a NetNode configuration property. Please refer to remarks.

|
String.

|-
|
'''propertyValue'''

|
Value of a NetNode  configuration property. Please refer to remarks.

|
String.

|-
|
'''amsConnection amsLabel'''

|
Unique label of an AMS connected to this NetNode. Please see remarks.

|
String

|-
|
'''amsConnection netNodeNorthPort'''

|
Id of the north port in the NetNode connecting to the AMS. Defense4All redirects inbound traffic through this port to the AMS, and returns (legitimate) outbound traffic to clients.

|
String

|-
|
'''amsConnection netNodeSouthPort'''

|
Id of the south port in the NetNode connecting to the AMS. Defense4All redirects outbound traffic through this port to the AMS, and returns (legitimate) inbound traffic to protected servers.

|
String

|-
|
'''amsConnection amsNorthPort'''

|
Id of the north port in the AMS connecting to the netNodeNorthPort in the NetNode

|
String

|-
|
'''amsConnection amsSouthPort'''

|
Id of the north port in the AMS connecting to the netNodeSouth in the NetNode

|
String

|-
|
'''trafficPort label'''

|
Unique label of a traffic port – port through which inbound or outbound traffic enters the NetNode.

|
String

|-
|
'''trafficPort number'''

|
Unique number of a traffic port – port through which inbound or outbound traffic enters the NetNode. 

|
Number. 0 if trafficPort number is not used (trafficPort label sufficient) 

|-
|
'''trafficPort vlan'''

|
VLAN id associated with the trafficPort

|
Number

|-
|
'''trafficPort location'''

|
Location of the traffic port – north (client side) or south (protected server side) 

|
'''north''' | '''south'''

|-
|
'''protectedLink label'''

|
Unique label of the protected link

|
String

|-
|
'''protectedLink northPort'''

|
North trafficPort of the protectedLink port pair

|
Number

|-
|
'''protectedLink southPort'''

|
South trafficPort of the protectedLink port pair

|
Number

|-
|
'''protectedLink  macOfConnectedToNorthPort'''

|
MAC address of the L2 network element connected to the north port of protected link port-pair.

|
String

|}

=Add NetNode=

'''Description''' – Configure a NetNode in Defense4All. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/netnodes/'''label'''

'''Request body''' – 

   {
     "label":"'''label'''",
     "id":“'''id'''”,
     "type":"'''type''' ",
     "mgmtAddr":"'''mgmtAddr'''",
     "mgmtPort":"'''mgmtPort'''",
     "sdnNodeMode":"'''sdnNodeMode'''",
     "healthCheckFrequency":"'''healthCheckFrequency'''", 
     "props":
          [
             {
                “'''propertyName'''":”'''propertyValue'''"
             }
          ],     
     "amsConnectionsStr":"'''amsConnectionsStr'''",
     "trafficPortsStr":"'''trafficPortsStr'''",
     "protectedLinksStr":"'''protectedLinksStr'''"
   }

'''Format of '''amsConnections, used in amsConnectionsStr – 

 [[File:ams_connections.jpg|none|900px|AMS Connections]]

         For example – ams1:netnodePort1:netnodePort2:5:6::ams2:netnodePort3:netnodePort4:1:2 

'''Format of '''trafficPorts, used in trafficPortStr – 

 [[File:traffic_ports.jpg|none|900px|Traffic Ports]]

         For example – trafficPort5:5:1020:north::trafficPort6:6:1030:south::trafficPort7:7:1040:north::trafficPort8:8:1050:south

'''Format of '''protectedLinks, used in protectedLinksStr – 

 [[File:protected_links.jpg|none|900px|Protected Links]]

         For example – protectedLink56:5:6:0000005056a31b80:: protectedLink78:7:8:0000005056a31b81

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# Configuration properties - Because NetNode is a pluggable component in nature, the Defense4All general REST API must not include any component specific configurations as named parameters in NetNode. To allow configuration of pluggable components the notion of configuration properties is used. Any NetNode specific configuration setup should be configured as a property carrying a unique property name. '''Props''' are the optional configuration properties of the AMS.
# NetNode id field can mean different things in different kinds of NetNodes. In SDN switches/routers this is the DPID. In virtual environments, like VTN this is the VTN id. In other abstracted domains of network control sphere this may be the id of the domain.
# SdnNodeMode and ProtectedLinks - ODL Reps supports two types of SDN Switches: sdn-hybrid, which support both SDN and legacy routing, and sdn-native, which supports SDN only routing. Counting traffic in sdn-hybrid switch can be simply accomplished by programming a flow entry with desired traffic selection criteria and the action is “send to normal”, i.e., continue with legacy routing. Counting traffic in sdn-native switch requires an explicit routing action (i.e., which output port to send the traffic to). Defense4All avoids learning all routing tables by requiring an sdn-native switch which is more or less a bump-in the wire with respect to traffic routing, If a NetNode is configured with switch entry-exit port pairs, say 1-2 and 3-4, then traffic entering port 1 normally exits port 2 and traffic entering port 3 normally exits port 4 and vice versa. Such a switch allows for easy programming of flow entries just to count traffic or to divert traffic to/from attached AMS. So when Defense4All programs a traffic counting flow entry with selection criteria that includes port 1, its action will be output to port 2, and similarly with 3 to 4.
# An AMS may be connected to a NetNode via multiple input-output port pairs. The can be done for enhanced availability or traffic isolation. However the AMS label for each connection must be unique. Logically, therefore, each AMS port-pair map to a separate AMS with its unique label.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
NetNode label

|
String up to 256 bytes.

|-
|
'''id'''

|
NetNode id. See remarks.

|
String up to 256 bytes.

|-
|
'''type'''

|
NetNode type. 

|
'''OF''' – for ODC managed switches/routers

|-
|
'''mgmtAddr'''

|
NetNode management address

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number.

|-
|
'''mgmtPort'''

|
NetNode management L4 port

|
Number

|-
|
'''sdnNodeMode'''

|
Mode of operation of this NetNode. See remarks.

|
'''Sdnenablednative''' |  '''sdnenabledhybrid'''

|-
|
'''healthCheckFrequency'''

|
Frequency to check this NetNode’s health – every '''healthCheckFrequency '''seconds

|
Number

|-
|
'''propertyName'''

|
Name of a NetNode configuration property. Please refer to remarks.

|
String.

|-
|
'''propertyValue'''

|
Value of a NetNode  configuration property. Please refer to remarks.

|
String.

|-
|
'''amsConnection amsLabel'''

|
Unique label of an AMS connected to this NetNode. Please see remarks.

|
String

|-
|
'''amsConnection netNodeNorthPort'''

|
Id of the north port in the NetNode connecting to the AMS. Defense4All redirects inbound traffic through this port to the AMS, and returns (legitimate) outbound traffic to clients.

|
String

|-
|
'''amsConnection netNodeSouthPort'''

|
Id of the south port in the NetNode connecting to the AMS. Defense4All redirects outbound traffic through this port to the AMS, and returns (legitimate) inbound traffic to protected servers.

|
String

|-
|
'''amsConnection amsNorthPort'''

|
Id of the north port in the AMS connecting to the netNodeNorthPort in the NetNode

|
String

|-
|
'''amsConnection amsSouthPort'''

|
Id of the north port in the AMS connecting to the netNodeSouth in the NetNode

|
String

|-
|
'''trafficPort label'''

|
Unique label of a traffic port – port through which inbound or outbound traffic enters the NetNode.

|
String

|-
|
'''trafficPort number'''

|
Unique number of a traffic port – port through which inbound or outbound traffic enters the NetNode. 

|
Number. 0 if trafficPort number is not used (trafficPort label sufficient) 

|-
|
'''trafficPort vlan'''

|
VLAN id associated with the trafficPort

|
Number

|-
|
'''trafficPort location'''

|
Location of the traffic port – north (client side) or south (protected server side) 

|
'''north''' | '''south'''

|-
|
'''protectedLink label'''

|
Unique label of the protected link

|
String

|-
|
'''protectedLink northPort'''

|
North trafficPort of the protectedLink port pair

|
Number

|-
|
'''protectedLink southPort'''

|
South trafficPort of the protectedLink port pair

|
Number

|-
|
'''protectedLink  macOfConnectedToNorthPort'''

|
MAC address of the L2 network element connected to the north port of protected link port-pair. Learned by Defense4All, so user can leave it blank

|
String

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''none'''

|


|


|}

=Delete NetNode=

'''Description''' – Delete a NetNode. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/netnodes/'''label'''

'''Request body''' – none

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
NetNode label

|
String up to 256 bytes.

|}


=Get OFCs=

'''Description''' – Get all the information (configured and dynamic) of all ODCs. Currently only one ODC can be used by Defense4All. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/ofcs

'''Request body''' – none

'''Result body''' - 

    [
       '''OFC_RECORD'''
    ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''OFC_RECORD'''

|
ODC Information. See Get OFC for details

|


|}

=Get OFC=

'''Description''' – Get all the information (configured and dynamic) of an ODC. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/ofcs/'''label'''

'''Request body''' – none

'''Result body''' - 

   {
     "hostname":"'''hostname'''",
     "ipAddrString":“'''ipAddrString'''”,
     "port":"'''port'''",
     "username":"'''username'''",
     "password":"'''password'''",
     "forStatsCollection":”'''forStatsCollection'''",
     "forDiversion":"'''forDiversion'''",
     "props":
          [
             {
               “'''propertyName'''":”'''propertyValue'''"
             }
          ]
   }

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# See remarks in Add OFC.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''hostname'''

|
ODC label

|
String up to 256 bytes.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''hostname'''

|
ODC label

|
String up to 256 bytes.

|-
|
'''ipAddrString'''

|
ODC address used for programming the SDN.

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number.

|-
|
''''''port'''

|
ODC L4 port used for programming the SDN

|
Number

|-
|
'''username'''

|
Username used to communicate with ODC

|
String up to 256 bytes. Additional ODC version specific limitations may apply.

|-
|
'''password'''

|
Password used to  communicate with ODC

|
String up to 256 bytes. Additional ODC version specific limitations may apply.

|-
|
'''forStatsCollection'''

|
Indicator whether peace-time stats collection should be set through this ODC. Currently must be true.

|
'''true''' | ('''false '''currently''' '''does not apply)

|-
|
'''forDiversion'''

|
Indicator whether attacked traffic redirection should be set through this ODC. Currently must be true.

|
'''true''' | ('''false '''currently''' '''does not apply)

|-
|
'''propertyName'''

|
Name of a configuration property. Please refer to remarks.

|
String.

|-
|
'''propertyValue'''

|
Value of a configuration property. Please refer to remarks.

|
String.

|}

=Add OFC=

'''Description''' – Configure an ODC to Defense4All. 

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/ofcs

'''Request body''' – 

   {
     "hostname":"'''hostname'''",
     "ipAddrString":“'''ipAddrString'''”,
     "port":"'''port'''",
     "username":"'''username'''",
     "password":"'''password'''",
     "forStatsCollection":”'''forStatsCollection'''",
     "forDiversion":"'''forDiversion'''",
     "props":
          [
             {
                “'''propertyName'''":”'''propertyValue'''"
             }
          ]
  }

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# Configuration properties - Because ODC is a pluggable component in nature, the Defense4All general REST API must not include any component specific configurations as named parameters in OFC. To allow configuration of pluggable components the notion of configuration properties is used. Any ODC version specific configuration setup should be configured as a property carrying a unique property name. '''Props''' are the optional configuration properties of the ODC.
# In this version only one ODC can be used by Defense4All.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''hostname'''

|
ODC label

|
String up to 256 bytes.

|-
|
'''ipAddrString'''

|
ODC address to be used for programming the SDN.

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number.

|-
|
'''port'''

|
ODC L4 port to be used for programming the SDN

|
Number

|-
|
'''username'''

|
Username to be used to communicate with ODC

|
String up to 256 bytes. Additional ODC version specific limitations may apply.

|-
|
'''password'''

|
Password to be used to  communicate with ODC

|
String up to 256 bytes. Additional ODC version specific limitations may apply.

|-
|
'''forStatsCollection'''

|
Indicator whether peace-time stats collection should be set through this ODC. Currently must be true.

|
'''true''' | ('''false '''currently''' '''does not apply)

|-
|
'''forDiversion'''

|
Indicator whether attacked traffic redirection should be set through this ODC. Currently must be true.

|
'''true''' | ('''false '''currently''' '''does not apply)

|-
|
'''propertyName'''

|
Name of a configuration property. Please refer to remarks.

|
String.

|-
|
'''propertyValue'''

|
Value of a configuration property. Please refer to remarks.

|
String.

|}

=Delete OFC=

'''Description''' – Delete an ODC. Currently not allowed.

'''HTTP Method''' - POST

'''Request URI''' - /rest/app/df/ofcs/'''label'''

'''Request body''' – none

'''Result body''' - none

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – Currently not allowed. Reset can be used for this deletion.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
ODC label

|
String up to 256 bytes.

|}

=Get PN StatReport=

'''Description''' – Get PN statistics report for a given PN. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/pnstats/'''label'''

'''Request body''' – none

'''Result body''' - 

   {
     "pnKey":"'''pnKey'''",
     "status":“'''status'''”,
     "lastReadingStr":"'''lastReadingStr'''",
     "latestRateStr":"'''latestRateStr'''",
     "averageStr":"'''averageStr'''"
   }

'''Format of '''TrafficTuple, used in lastReadingStr, latestRateStr, averageStr – 

 [[File:traffic_tuple.jpg|none|900px|Traffic Tuple]]

         For example - 17:0:0.0:0.0:true:INBOUND::6:0:25389.31:314.92477:true:INBOUND::1:0:0.0:0.0:true:INBOUND::0:0:0.0:0.0:true:INBO

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# Status - Warmup period allows ignoring potential traffic hiccups after adding stats counter. Learning period is used to establish initial averages and baselines. Depending on traffic variance and required attack detection accuracy this period can range from minutes to days.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''label'''

|
PN label

|
String up to 256 bytes.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''pnKey'''

|
PN label, used as key in PNs Defense4All repositories.

|
String up to 256 bytes.

|-
|
'''status'''

|
Status of PN statistics for this PN. Reflects warmup, learning and active periods. 

|
'''WARMUP_PERIOD''' - averages are not updated, attacks are not suspected.

'''LEARNING_PERIOD''' - averages are updated, but attacks are not suspected.

'''ACTIVE''' – averages are updated (except for attacked portion of the PN traffic), attacks may be suspected.

|-
|
'''lastReadingStr'''

|
Vector of last traffic counter readings of bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''latestRateStr'''

|
Vector of latest traffic rates of bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''averageStr'''

|
Vector of averages of bytes and packets of each protocol-L4port.

|
String. See TrafficTupple format above.

|-
|
'''protocol'''

|
Traffic data protocol for which stats were obtained. 

|
'''TCP'''|'''UDP'''|'''ICMP'''|'''OTHER''' (rest of IP traffic)

|-
|
'''port'''

|
Traffic data L4 port for which stats were obtained. 

|
Number

|-
|
'''bytes'''

|
Traffic data bytes rate for specified protocol and port. Please refer also to remarks.

|
Number

|-
|
'''packets'''

|
Traffic data packets rate for specified protocol and port. Please refer also to remarks.

|
Number

|-
|
'''forTrafficLearning'''

|
This indicator is applicable only to latestRateStr, indicating whether the subject trafficData should be accounted for averages or not. For attacked traffic the value is false, otherwise true. Please refer to remarks for additional information. 

|
'''true'''|'''false'''

|-
|
'''direction'''

|
Direction of the counted trafficData – can be inbound (traffic into the protected servers) or outbound (traffic returning from protected servers).

|
'''INBOUND '''| '''OUTBOUND'''

|}

=Get Attacks=

'''Description''' – Get all the information about all Attacks. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/attacks

'''Request body''' – none

'''Result body''' - 

   [
    '''ATTACK_RECORD'''
   ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''ATTACK_RECORD'''

|
Attack Information. See Get Attack for details

|


|}

=Get Attack=

'''Description''' – Get all the information about an Attack. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/attacks/'''attackKey'''

'''Request body''' – none

'''Result body''' - 

   {
     "attackKey":"'''attackKey'''",
     "pnKey":"'''pnKey'''",
     "mitigationKey":"'''mitigationKey'''",
     "status":"'''status'''",
     "protocolPort":
       {
         “protocol”:”'''protocol'''”,
         “port”:”'''port'''”
       }, 
     "detectionKeys":
       [
         {
           “'''detectionKey'''":”'''detectionKey'''"
         }
       ]
   }

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# API to retrieve attack detections is to be exposed as API in future releases.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''attackKey'''

|
Unique Attack identifier

|
String up to 256 bytes.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''attackKey'''

|
Unique Attack identifier

|
String up to 256 bytes.

|-
|
'''pnKey'''

|
Attacked PN label

|
String up to 256 bytes.

|-
|
'''mitigationKey'''

|
Unique identifier of the corresponding mitigation record

|
String up to 256 bytes.

|-
|
'''Status'''

|
Status of the attack, reflecting attack lifecycle.

|
'''SUSPECTED''' – There is at least one attack suspicion (detection), but the attack has not been declared yet.

'''DECLARED''' – The attack has been declared, and attack mitigation is attempted.''' '''

'''ENDING''' – The attack is ending, and mitigation actions are being canceled.''' '''

'''ENDED''' – The attack has ended, and all mitigation actions for this attack ended too.

|-
|
'''protocol'''

|
Attacked protocol.

|
'''TCP''' | '''UDP'''| '''ICMP''' | '''OTHER''' (rest of IP traffic)

|-
|
'''port'''

|
Attacked L4 port of the attacked protocol (if applicable).

|
Number. 0 if traffic of all ports is attacked.

|-
|
'''detectionKey'''

|
Unique identifier of a detection record of this attack. Please see remarks.

|
String.

|}

=Get Mitigations=

'''Description''' – Get all the information about all Attack Mitigations. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/mitigations

'''Request body''' – none

'''Result body''' - 

   [
       '''MITIGATION_RECORD'''
   ]

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' – none.

{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''MITIGATION_RECORD'''

|
Attack Mitigation Information. See Get Mitigation for details

|


|}
=Get Mitigation=

'''Description''' – Get all the information about an Attack Mitigation. 

'''HTTP Method''' - GET

'''Request URI''' - /rest/app/df/mitigations/'''key'''

'''Request body''' – none

'''Result body''' - 

   {
     "key":"'''key'''",
     "attackKey":"'''attackKey'''",
     "pnKey":"'''pnKey'''",
     "monitoredTrafficKey":"'''monitoredTrafficKey'''",
     "dstAddr":"'''dstAddr''' ",
     "dstAddrPrefixLen":"'''dstAddrPrefixLen'''",
     "status":"'''status'''",
     "collectStats":"'''collectStats'''",
     "mitigationDriverLabel":"'''mitigationDriverLabel'''",
     "protocolPort":
         {
           “protocol”:”'''protocol'''”,
           “port”:”'''port'''”
         }, 
     "mitigationExecutionProps":
         [
            {
              “'''propertyName'''":”'''propertyValue'''"
            }
         ], 
     "trafficFloorKeys":
         [
            “trafficFloorKey":”'''trafficFloorKey'''"
         ], 
     "dvsnInfoKeys":
         [
           “dvsnInfoKey":”'''dvsnInfoKey'''"
         ]
   }

'''HTTP status code for response''' - On success: 200 (OK); On failure: 400, 500

'''Remarks''' –

# Retrieving monitored traffic records is to be supported in future releases.
# See trouble-shooting of mitigation status NO_RESOURCES.
# Depending on the point of attacked traffic redirection, ODC based stats collection at that point may or may not be relevant. In this release, it is always true.
# Mitigation execution properties are optional properties specific for different mitigation devices and methods.
# Mitigation traffic floor - The set of flow entries programmed to divert (but still count) traffic. There may be many attack traffic floors, all of which take precedence over the peacetime stats collection floor (by programming higher priority flow entries). Additional attacks (except “other ip” attack which is special case, and is suppressed here) are created with higher priority traffic floors over previously set attack traffic floors. Attacks may fully or partially “eclipse” earlier attacks (e.g., tcp port 80 over tcp or vice versa) or be disjoint (e.g., tcp and udp). Stats collection is taken from all traffic floors – peacetime and attacks. At the end of mitigation all its traffic floors are simply removed.
# Diversion Info is to be retrievable in future releases.

{| class="wikitable"
|-
|
'''Request Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''key'''

|
Unique Mitigation identifier

|
String up to 256 bytes.

|}


{| class="wikitable"
|-
|
'''Result Element'''

|
'''Description'''

|
'''Valid Value'''

|-
|
'''attackKey'''

|
Unique Attack identifier

|
String up to 256 bytes.

|-
|
'''pnKey'''

|
Attacked PN label

|
String up to 256 bytes.

|-
|
'''monitoredTrafficKey'''

|
Unique Monitored Traffic record identifier. Relevant only for debugging purposes.

|
String up to 256 bytes.

|-
|
'''dstAddr'''

|
Protected destination address prefix of the attacked traffic

|
String format compatible with Java <nowiki>InetAddress.ge</nowiki>tByName(). If hostname is specified, then its IP address is resolved. The address can also be specified as textual IP representation (V4 or V6 format), or address number. The protected address range is the subnet of size '''dstAddressPrefixLen''' containing the address.

|-
|
'''dstAddrPrefixLen'''

|
Prefix Len of the attacked destination address prefix.

|
Number

|-
|
'''Status'''

|
Status of the mitigation, reflecting mitigation lifecycle.

|
'''ACTIVE''' – One (or more) of the installed mitigation drivers drives this mitigation.''' '''

'''NO_RESOURCES''' – No mitigation driver drives this mitigation. The reason is either lack of resources relevant for this PN’s attack mitigation, or some internal failure in the mitigation process.''' '''

'''ENDED''' – All mitigation actions for the corresponding attack have ended.

|-
|
'''collectStats'''

|
Indicator whether ODC based statistics should be collected for mitigated traffic. Please see remarks.

|
'''true '''|''' false'''

|-
|
'''mitigationDriverLabel'''

|
Label of the mitigation driver driving this mitigation.

|
String up to 256 bytes.

|-
|
'''protocol'''

|
Mitigated protocol. '''Invalid ''' means all traffic of the PN is mitigated (whether attacked or not).

|
'''INVALID | TCP''' | '''UDP'''| '''ICMP''' | '''OTHER''' (rest of IP traffic)

|-
|
'''port'''

|
Mitigated L4 port in the mitigated protocol (if applicable).

|
Number. 0 if traffic of all ports is mitigated

|-
|
'''propertyName'''

|
Mitigation execution property name. Please see remarks.

|
String up to 256 bytes.

|-
|
'''propertyValue'''

|
Mitigation execution property value. Please see remarks.

|
String.

|-
|
'''trafficFloorKey'''

|
Unique identifier of each traffic floor set for this mitigation.

|
String up to 256 bytes.

|-
|
'''dvsnInfoKey'''

|
Unique identifier of each traffic diversion information, focusing on the AMS devices to which traffic has been diverted, and any special configuration performed on those AMS devices for this mitigation.

|
String up to 256 bytes.

|}


Back to [[Defense4All:User_Guide|Defense4All User Guide Page]]
