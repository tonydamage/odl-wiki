== Introduction ==
The project primarily involves fuzzing various components of OpenDaylight; the end goal being finding as many bugs or exploitable vulnerabilities as possible in the way that OpenDaylight presently implements its interfaces and protocols. Depending on the various fuzzing strategies, OpenDaylight controller will be bombarded with different kinds of fuzz inputs generated by the fuzzing framework. Every instance of OpenDaylight controller will then be monitored for exceptions such as crashes, broken input validations, failing built-in code assertions or for finding potential memory leaks.  Any unusual behavior of any kind shall be analysed and accordingly reported to the community, possibly along with the relevant fixes. 
The framework and the fuzz tests developed will become part of the security test suite in the Integration group.

== Scope ==
The present scope of the project is to fuzz MD-SAL and AD-SAL interfaces.
===== MD-SAL =====
It is required that the fuzzy framework parse and interpret the yang model files and the initial XML configuration of an application, and create a template to be used as an input to the fuzzer.
These fuzzy tests shall therefore test and validate the generated Java code and provider code including the RPC call interface via RestConf API.
===== AD-SAL =====
''<small>TODO</small>''
== Progress report == 
''(<small>Updated weekly</small>)''

===== May 1 - May 18 =====
* Study the ODL architecture, get familiar with the source, community and the overall ecosystem : ''<small>DONE</small>''
* Discussion with mentors on critical fuzz candidates to start with : ''<small>DONE</small>''
:Under the present scope, we'll start with MD-SAL and AD-SAL interfaces, the rest of the fuzz candidates are marked as future work.  
===== May 19 - June 8 =====
* Develop the core fuzzing engine : ''<small>DONE</small>''  
:Given a basic input template, the fuzzing engine must be able to spawn ODL controller instances with interesting inputs using this template, monitor each instance for any relevant signals and log all the results for later review and debugging.
:See Preliminary Test report[[https://wiki.opendaylight.org/view/CrossProject:Integration_Group:Fuzzy_Test#Preliminary_Test_report]] to know about some interesting results obtained so far.
===== June 9 - ongoing =====
* Fuzz input interface generator : ''<small>TODO</small>''
:Right now, the input interface to the fuzzing engine is crafted manually. We need an intelligent parser and interpreter that takes in the yang model files, XML files and other config data and builds the input template automatically.

== Preliminary Test report ==
''(<small>This is an unofficial section that lists the interesting, not necessarily correct results obtained from fuzzing so far, for the curious. It shall be updated whenever the author wakes up to something fishy in his logs. A complete, correct and exhaustive list shall be put up when the project (hopefully) reaches its completion.</small>)
# Value types as defined in yang aren't validated by the MD-SAL interface code, anything random is accepted. For instance, strings can be integers or booleans or any combination of special characters. As an example, the variable that holds the current state of the toaster "toasterStatus" is allowed to have only 2 values - "Up" and "Down", enumerated as 1 and 2 respectively. However, it seems to accept any random combination of characters now.
Bug: https://bugs.opendaylight.org/show_bug.cgi?id=762
Patch: https://git.opendaylight.org/gerrit/#/c/7367/

# In an HTTP 1.1 POST request, fields like Content-Length have to be present strictly, otherwise the server returns an error. Firstly, it'd be useful if the server determines such a field automatically by looking at the body. If not, the error it returns is still incorrect. When the Content-Length field is missing, it returns an error about the JSON in the body. Investigating the fact about the Content-Length being the culprit was tricky and time-consuming, since the error was conveying something else. I looked at the code handling these errors and it seemed like it handled all errors in a general, single way. I believe that it would be helpful if the error handling can be made more specific and useful to a user.
# Variables that were more than a million in size often resulted in the skipping of subsequent HTTP requests. For example, an HTTP POST request that created a toaster having a variable more than 1000000 in its length, would result in a subsequent HTTP DELETE request being skipped and consequently, the server would therefore return an error for all subsequent requests until it received the HTTP DELETE request again.
# JSON inputs having special characters like " or \ are returning errors. These types of mis-formatted strings can lead to subtle attacks in general, similar to SQL injection or XSS attacks. Though I'm not sure if this is by design, or how we can have a sanitizer on the top of the code.
