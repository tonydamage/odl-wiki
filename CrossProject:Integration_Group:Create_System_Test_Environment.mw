== Maintainer ==
Luis Gomez (luis.gomez@ericsson.com)

== Introduction ==
The purpose of this instruction is to setup a test environment that can be used to verify system test code as well as to run the complete system test suite. Please note that all the different components: mininet, controller and test tools can be installed in the same VM like in this instruction or in separated VMs like in OpenDaylight Lab (split setup).

== System Test VM ==
Before proceeding with the steps below you may consider to download and install this [https://wiki.opendaylight.org/images/HostedFiles/odl_system_test.ovf.zip Virtualbox VM] (Ubuntu 12.04) which  has already everything you need for system test plus Maven and Eclipse. Login is: user/passw=odluser/odluser1.

== Installation Procedure ==

=== Prerequisites ===

This instruction has been verified on Ubuntu 13.10.

=== Install Mininet for OF1.0 and OF1.3 ===

Download openvswitch 2.0.0 (http://openvswitch.org/releases/openvswitch-2.0.0.tar.gz) and build the library accoding to instructions in ~/openvswitch-2.0.0/INSTALL.Debian

Install the debian packages:
<pre>
odluser@odl-vm:~\$ sudo dpkg -i openvswitch-common*.deb openvswitch-datapath-dkms*.deb openvswitch-controller*.deb openvswitch-pki*.deb openvswitch-switch*.deb
</pre>

Disable OVS controller:
<pre>
odluser@odl-vm:~\$ sudo /etc/init.d/openvswitch-controller stop
odluser@odl-vm:~\$ sudo update-rc.d openvswitch-controller disable
</pre>

Verify OVS installation:
<pre>
odluser@odl-vm:~\$ sudo ovs-vsctl show
a96f86e7-ca43-487f-b65d-e18b52a64330
    ovs_version: "2.0.0"
</pre>

Install mininet:
<pre>
odluser@odl-vm:~\$ sudo apt-get install mininet -y
</pre>

Verify mininet installation:
<pre>
odluser@odl-vm:~\$ sudo mn --test=pingall
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2 
*** Adding switches:
s1 
*** Adding links:
(h1, s1) (h2, s1) 
*** Configuring hosts
h1 h2 
*** Starting controller
*** Starting 1 switches
s1 OVSswitch opts:  

*** Ping: testing ping reachability
h1 -> h2 
h2 -> h1 
*** Results: 0% dropped (2/2 received)
*** Stopping 1 switches
s1 ..
*** Stopping 2 hosts
h1 h2 
*** Stopping 1 controllers
c0 
*** Done
completed in 0.541 seconds
</pre>

Modify source code of mininet node.py file in similar manner as follows: 
<pre>
odluser@odl-vm:~\$ cd /
odluser@odl-vm:~\$ sudo patch -p0 < ~/patch.txt
odluser@odl-vm:~\$ cd -
</pre>

Where the patch to apply patch.txt is:
<pre>
 --- /usr/share/pyshared/mininet/node.py	2013-12-06 02:54:41.079577722 +0000
+++ new_node.py	2013-12-06 02:54:20.139578272 +0000
@@ -952,6 +952,10 @@
            datapath: userspace or kernel mode (kernel|user)"""
         Switch.__init__( self, name, **params )
         self.failMode = failMode
+	protKey = 'protocols'
+	if self.params and protKey in self.params:
+		print 'have protocol params!'
+		self.opts += protKey + '=' + self.params[protKey]
         self.datapath = datapath
 
     @classmethod
@@ -1024,12 +1028,13 @@
         # Annoyingly, --if-exists option seems not to work
         self.cmd( 'ovs-vsctl del-br', self )
         self.cmd( 'ovs-vsctl add-br', self )
+	print 'OVSswitch opts: ',self.opts
         if self.datapath == 'user':
             self.cmd( 'ovs-vsctl set bridge', self,'datapath_type=netdev' )
         int( self.dpid, 16 ) # DPID must be a hex string
         self.cmd( 'ovs-vsctl -- set Bridge', self,
-                  'other_config:datapath-id=' + self.dpid )
-        self.cmd( 'ovs-vsctl set-fail-mode', self, self.failMode )
+        	self.opts+' other_config:datapath-id=' + self.dpid )
+	self.cmd( 'ovs-vsctl set-fail-mode', self, self.failMode )
         for intf in self.intfList():
             if not intf.IP():
                 self.attach( intf )
</pre>

Verify mininet works for OF1.3:
<pre>
odluser@odl-vm:~\$ sudo mn --controller=remote,ip=10.125.136.52 --topo tree,2 --switch ovsk,protocols=OpenFlow13
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2 h3 h4 
*** Adding switches:
have protcol params!
s1 have protcol params!
s2 have protcol params!
s3 
*** Adding links:
(h1, s2) (h2, s2) (h3, s3) (h4, s3) (s1, s2) (s1, s3) 
*** Configuring hosts
h1 h2 h3 h4 
*** Starting controller
*** Starting 3 switches
s1 OVSswitch opts:  protocols=OpenFlow13
s2 OVSswitch opts:  protocols=OpenFlow13
s3 OVSswitch opts:  protocols=OpenFlow13

*** Starting CLI:
mininet> 
</pre>

To test the version of used protocol by switch "s1":
<pre>
odluser@odl-vm:~\$ ovs-ofctl -O OpenFlow10 show s1
odluser@odl-vm:~\$ ovs-ofctl -O OpenFlow13 show s1
</pre>

=== Install OpenDaylight controller ===

Install Java JDK 1.7+:
<pre>
odluser@odl-vm:~\$ sudo apt-get install openjdk-7-jre
</pre>

Set JAVA_HOME in environment. Add follow lines (Java path may change depending on the JDK installation) in ~/.bashrc file:
<pre>
odluser@odl-vm:~\$ vi ~/.bashrc
...
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-amd64
...
</pre>


Create directory for base edition distribution: 
<pre>
odluser@odl-vm:~\$ mkdir controller-base
odluser@odl-vm:~\$ cd controller-base
</pre>

Download latest controller base edition:
<pre>
$ wget https://jenkins.opendaylight.org/integration/job/integration-project-controller-integration/lastSuccessfulBuild/artifact/distributions/base/target/distributions-base-0.1.2-SNAPSHOT-osgipackage.zip
</pre>

Run the controller:
<pre>
odluser@odl-vm:~\$ unzip distributions-base-0.1.2-SNAPSHOT-osgipackage.zip
odluser@odl-vm:~\$ cd opendaylight
odluser@odl-vm:~\$ ./run.sh 
</pre>

Check controller is running:
<pre>
osgi> ss
"Framework is launched."


id      State       Bundle
0       ACTIVE      org.eclipse.osgi_3.8.1.v20120830-144521
1       ACTIVE      org.apache.felix.fileinstall_3.1.6
2       ACTIVE      org.eclipse.jdt.core.compiler.batch_3.8.0.I20120518-2145
3       ACTIVE      org.eclipse.equinox.ds_1.4.0.v20120522-1841
4       ACTIVE      org.eclipse.equinox.util_1.0.400.v20120522-2049
5       ACTIVE      org.eclipse.osgi.services_3.3.100.v20120522-1822
6       ACTIVE      org.eclipse.equinox.console_1.0.0.v20120522-1841
7       ACTIVE      slf4j.api_1.7.2
8       ACTIVE      ch.qos.logback.classic_1.0.9
9       ACTIVE      ch.qos.logback.core_1.0.9
10      ACTIVE      org.opendaylight.controller.logging.bridge_0.4.1.SNAPSHOT
11      ACTIVE      com.sun.jersey.core_1.17.0
12      ACTIVE      com.sun.jersey.json_1.17.0
13      ACTIVE      com.sun.jersey.jersey-server_1.17.0
</pre>

=== Install Test tools ===

Check you have Python 2.6 or 2.7 installed (this is normally coming in most distributions):
<pre>
odluser@odl-vm:~\$ python 
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 
</pre>

In case it is not there, you can install it with:
<pre>
odluser@odl-vm:~\$ sudo apt-get install python2.7 
</pre>

Also install python pip and paramiko if not there:
<pre>
odluser@odl-vm:~\$ sudo apt-get install python-pip
odluser@odl-vm:~\$ sudo apt-get install python-paramiko 
</pre>

Install Robot Framework and required libraries:
<pre>
odluser@odl-vm:~\$ sudo pip install robotframework
odluser@odl-vm:~\$ sudo pip install robotframework-sshlibrary
odluser@odl-vm:~\$ sudo pip install -U robotframework-requests
</pre>

Verify Robot installation:
<pre>
odluser@odl-vm:~\$ pybot --version
Robot Framework 2.8.2 (Python 2.7.3 on linux2)
</pre>

=== Robot Environment Adjustment ===

Create public key for regular user (odluser):
<pre>
odluser@odl-vm:~\$ ssh-keygen
</pre>

=== Mininet Environment Adjustment ===

Copy the just generated public key (~/.ssh/id_rsa.pub) into the file ~/.ssh/authorized_keys
<pre>
odluser@odl-vm:~\$ cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
</pre>

Change ~/.ssh/authorized_keys permissions to 600
<pre>
odluser@odl-vm:~\$ chmod 600 ~/.ssh/authorized_keys
</pre>

Allow sudo access with no password:

Edit /etc/sudoers file and add follow line at the end:
<pre>
odluser@odl-vm:~\$ sudo vi /etc/sudoers
...
odluser ALL=NOPASSWD: ALL
...
</pre>

Change the user prompt termination from "$" to ">"

Edit ~/.bashrc file and change the prompt (PS1) termination from "$" to ">":
<pre>
odluser@odl-vm:~\$ vi ~/.bashrc
...
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\> '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\> '
...
</pre>

=== Download and Run System Test Code ===

Download latest integration code:
<pre>
odluser@odl-vm:~\> git clone https://git.opendaylight.org/gerrit/integration
</pre>

Run system with following command:
<pre>
odluser@odl-vm:~\> pybot -v CONTROLLER:127.0.0.1 -v MININET:127.0.0.1 -v USER_HOME:${HOME} -v MININET_USER:${USER} ${HOME}/integration/test/csit/suites/base/
</pre>
'''IMPORTANT''': In case you have a split setup (different VMs for controller and mininet), you have to use interface IPs instead of loopbacks for the controller and mininet

[[Category:Integration Group]]
