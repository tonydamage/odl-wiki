== Maintainer ==
Luis Gomez (luis.gomez@ericsson.com)

== Introduction ==
The purpose of this instruction is to setup a test environment that can be used to verify system test code as well as to run the complete system test suite. Please note that all the different components: mininet, controller and test tools can be installed in the same VM like in this instruction or in separated VMs like in OpenDaylight Lab (split setup).

== System Test VM ==
Before proceeding with the steps below you may consider to download and install this [https://wiki.opendaylight.org/images/HostedFiles/odl_system_test.ovf.zip Virtualbox VM] (Ubuntu 12.04) which  has already everything you need for system test plus Maven and Eclipse. Login is: user/passw=odluser/odluser1.

== Installation Procedure ==

=== Prerequisites ===

This instruction has been verified on Ubuntu 12.04 but any other Linux standard distribution should be OK.

=== Install Mininet for OF1.0 and OF1.3 ===

Please follow the instructions on this [http://mininet.org/download/ link] to get mininet properly installed in your system

Reinstall openvswitch using guide at https://github.com/mininet/mininet/wiki/Installing-new-version-of-Open-vSwitch , but use version 2.0.0 instead of 1.10.0  (http://openvswitch.org/releases/openvswitch-2.0.0.tar.gz)

Modify source code of mininet node.py file in similar manner as follows: 

<pre>
 --- /root/mininet/build/lib.linux-x86_64-2.7/mininet/node.py    2013-11-22 03:35:12.000000000 -0800
 +++ /usr/local/lib/python2.7/dist-packages/mininet-2.1.0-py2.7.egg/mininet/node.py      2013-11-22 06:17:07.350574387 -0800
 @@ -952,6 +952,10 @@
             datapath: userspace or kernel mode (kernel|user)"""
          Switch.__init__( self, name, **params )
          self.failMode = failMode
 +       protKey = 'protocols'
 +       if self.params and protKey in self.params:
 +               print 'have protcol params!'
 +               self.opts += protKey + '=' + self.params[protKey]
          self.datapath = datapath
   
 @@ -1027,8 +1031,9 @@
          if self.datapath == 'user':
              self.cmd( 'ovs-vsctl set bridge', self,'datapath_type=netdev' )
          int( self.dpid, 16 ) # DPID must be a hex string
 +        print 'OVSswitch opts: ',self.opts
          self.cmd( 'ovs-vsctl -- set Bridge', self,
 -                  'other_config:datapath-id=' + self.dpid )
 +                  self.opts+' other_config:datapath-id=' + self.dpid)
          self.cmd( 'ovs-vsctl set-fail-mode', self, self.failMode )
          for intf in self.intfList():
              if not intf.IP():
</pre>

Verify mininet works for OF1.0:
<pre>
odluser@odl-vm:~\$ sudo mn --controller remote,ip=127.0.0.1 --topo tree,2
</pre>

Verify mininet works for OF1.3:
<pre>
odluser@odl-vm:~\$ sudo mn --controller remote,ip=127.0.0.1 --topo tree,2 --switch ovsk,protocols=OpenFlow13 
</pre>

To test the version of used protocol by switch "s1":
<pre>
odluser@odl-vm:~\$ ovs-ofctl -O OpenFlow10 show s1
odluser@odl-vm:~\$ ovs-ofctl -O OpenFlow13 show s1
</pre>

Once you verify mininet works, shutdown the mn process as system test suite will start/stop mininet automatically:

<pre>
odluser@odl-vm:~\$ ps -ef | grep mn
root     15800 11466  0 01:33 pts/0    00:00:00 sudo mn --controller=remote,ip=10.125.136.52 --topo tree,2
root     15801 15800  0 01:33 pts/0    00:00:00 /usr/bin/python /usr/local/bin/mn --controller=remote,ip=10.125.136.52 --topo tree,2
odluser  16183 16096  0 05:05 pts/2    00:00:00 grep --color=auto mn

odluser@odl-vm:~\$ sudo pkill mn
odluser@odl-vm:~\$ ps -ef | grep mn
odluser  16265 16096  0 05:06 pts/2    00:00:00 grep --color=auto mn
</pre>

Note: If you plan to test individual test files or make custom REST requests please start the mininet with:
<pre>
odluser@odl-vm:~\$ sudo mn --controller=remote,ip=10.125.136.52 --topo tree,2
</pre>

=== Install OpenDaylight controller ===

Install Java JDK 1.7+ following instructions [http://docs.oracle.com/javase/7/docs/webnotes/install/ here]

Set JAVA_HOME in environment. Add follow lines (Java path may change depending on the JDK installation) in ~/.bashrc file:
<pre>
odluser@odl-vm:~\$ vi ~/.bashrc
.
export JAVA_HOME=/usr/lib/jvm/java-1.7.0-openjdk-amd64
.
</pre>


Create directory for base edition distribution: 
<pre>
odluser@odl-vm:~\$ mkdir controller-base
odluser@odl-vm:~\$ cd controller-base
</pre>

Download latest controller base edition:
<pre>
$ wget 'https://jenkins.opendaylight.org/integration/job/integration-controller-integration/lastSuccessfulBuild/org.opendaylight.integration$
distributions-base/artifact/org.opendaylight.integration/distributions-base/0.1.0-SNAPSHOT/distributions-base-0.1.0-SNAPSHOT-osgipackage.zip'
$ unzip -o distributions-base-0.1.0-SNAPSHOT-osgipackage.zip </pre>

Run the controller:
<pre>
$ cd ~odluser/controller-base/opendaylight/
$ ./run.sh 
</pre>

Check controller is running:
<pre>
osgi> ss
"Framework is launched."


id      State       Bundle
0       ACTIVE      org.eclipse.osgi_3.8.1.v20120830-144521
1       ACTIVE      org.apache.felix.fileinstall_3.1.6
2       ACTIVE      org.eclipse.jdt.core.compiler.batch_3.8.0.I20120518-2145
3       ACTIVE      org.eclipse.equinox.ds_1.4.0.v20120522-1841
4       ACTIVE      org.eclipse.equinox.util_1.0.400.v20120522-2049
5       ACTIVE      org.eclipse.osgi.services_3.3.100.v20120522-1822
6       ACTIVE      org.eclipse.equinox.console_1.0.0.v20120522-1841
7       ACTIVE      slf4j.api_1.7.2
8       ACTIVE      ch.qos.logback.classic_1.0.9
9       ACTIVE      ch.qos.logback.core_1.0.9
10      ACTIVE      org.opendaylight.controller.logging.bridge_0.4.1.SNAPSHOT
11      ACTIVE      com.sun.jersey.core_1.17.0
12      ACTIVE      com.sun.jersey.json_1.17.0
13      ACTIVE      com.sun.jersey.jersey-server_1.17.0
</pre>

=== Install Test tools ===

Check you have Python 2.6 or 2.7 installed (this is normally coming in most distributions):
<pre>
odluser@odl-vm:~\$ python 
Python 2.7.3 (default, Sep 26 2013, 20:03:06) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> 
</pre>

In case it is not there, you can install it with:
<pre>
odluser@odl-vm:~\$ sudo apt-get install python2.7 
</pre>

Also install python pip and paramiko if not there:
<pre>
odluser@odl-vm:~\$ sudo apt-get install python-pip
odluser@odl-vm:~\$ sudo apt-get install python-paramiko 
</pre>

Install Robot Framework and required libraries:
<pre>
odluser@odl-vm:~\$ sudo pip install robotframework
odluser@odl-vm:~\$ sudo pip install robotframework-sshlibrary
odluser@odl-vm:~\$ sudo pip install -U robotframework-requests
</pre>

Verify Robot installation:
<pre>
odluser@odl-vm:~\$ pybot --version
Robot Framework 2.8.2 (Python 2.7.3 on linux2)
</pre>

=== Environment Adjustment ===

Allow SSH public key authentication with folloing steps:

1) Create public key for regular user (odluser):
<pre>
odluser@odl-vm:~\$ ssh-keygen
</pre>
'''Note''': In case you have a split setup, this step is to be done in the Robot VM

2) Copy the generated public key (~/.ssh/id_rsa.pub) into the file ~/.ssh/authorized_keys
<pre>
odluser@odl-vm:~\$ cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys
</pre>
'''Note''': In case you have a split setup, this step is to be done in the Mininet VM

3) Change ~/.ssh/authorized_keys permissions to 600
<pre>
odluser@odl-vm:~\$ chmod 600 ~/.ssh/authorized_keys
</pre>
'''Note''': In case you have a split setup, this step is to be done in the Mininet VM

4) Allow sudo access with no password:

Edit /etc/sudoers file and add follow line at the end:
<pre>
odluser@odl-vm:~\$ sudo vi /etc/sudoers
.
odluser ALL=NOPASSWD: ALL
.
</pre>
'''Note''': In case you have a split setup, this step is to be done in the Mininet VM

5) Change the user prompt termination from "$" to ">"

Edit ~/.bashrc file and change the prompt (PS1) termination from "$" to ">":
<pre>
odluser@odl-vm:~\$ vi ~/.bashrc
.
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\> '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\> '
.
</pre>
'''Note''': In case you have a split setup, this step is to be done in the Mininet VM

=== Download and Run System Test Code ===

Download latest integration code:
<pre>
odluser@odl-vm:~\> git clone https://git.opendaylight.org/gerrit/integration
</pre>

Run system with following command:
<pre>
odluser@odl-vm:~\> pybot -v CONTROLLER:127.0.0.1 -v MININET:127.0.0.1 -v USER_HOME:${HOME} -v MININET_USER:${USER} integration/test/csit/suites/base/
</pre>
'''Note''': In case you have a split setup, you have to use interface IPs instead of loopbacks for the controller and mininet

[[Category:Integration Group]]
