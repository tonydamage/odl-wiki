This page describes how to set up a simple three tier network.  In it there are three virtual networks and policies are configured to support connecitivty between virtual networks 1 and 2 and also between virtual networks 2 and 3 (but not directly between virtual networks 1 and 3).

=== Create Networks ===

Issue a POST request to http://<odmc address>:8080/controller/nb/v2/neutron/networks using the following JSON body:

 { "networks": [
  { "id": "<uuid 1>", "name": "<name 1>", "tenant_id": "<tenant uuid>" }, 
  { "id": "<uuid 2>", "name": "<name 2>", "tenant_id": "<tenant uuid>"  },
  { "id": "<uuid 3>", "name": "<name 3>", "tenant_id": "<tenant uuid>" }
 ]}

The networks can be checked via a GET request to http://<odmc address>:8080/controller/nb/v2/opendove/odmc/networks.  Make note of the network_id that matches up with the network name as these will be used later.

=== Create Subnets ===

Each of the networks has a separate subnet defined for VMs.  Issue a POST request to http://<odmc address>:8080/controller/nb/v2/neutron/subnets
with the following JSON body:

 { "subnets": [
  { "id": "<subnet uuid 1>",
   "network_id": "<network uuid 1>",
   "name": "<subnet name 1>",
   "gateway_ip": "<subnet gw 1>",
   "cidr": "<subnet cidr 1>",
   "tenant_id": "<tenant uuid>" },
  { "id": "<subnet uuid 2>",
   "network_id": "<network uuid 2>",
   "name": "test subnet 2",
   "gateway_ip": "<subnet gw 2>",
   "cidr": "<subnet cidr 2>",
   "tenant_id": "<tenant uuid>" },
  { "id": "<subnet uuid 3>",
   "network_id": "<network uuid 3>",
   "name": "test subnet 3",
   "gateway_ip": "<subnet gw 3>",
   "cidr": "<subnet cidr 3>",
   "tenant_id": "<tenant uuid>" }
  ] }

=== Create Ports ===

To be able to create connectivity policies, it is first necessary to create ports to use for attaching to Neutron routers.

Submit a POST request to http://<odmc address>:8080/controller/nb/v2/neutron/ports with the following JSON body:

  {"ports": [
    {"id": "<port uuid 1>",
     "network_id": "<net uuid 1>",
     "name": "<port name 1>",
     "mac_address": "<mac addr 1>",
     "fixed_ips": [{ "subnet_id": "<subnet uuid 1>" , "ip_address": "<ip addr 1>" }],
     "tenant_id": "<tenant uuid>" },
    {"id": "<port uuid 2>",
     "network_id": "<net uuid 2>",
     "name": "<port name 2>",
     "mac_address": "<mac addr 2>",
     "fixed_ips": [{ "subnet_id": "<subnet uuid 2>" , "ip_address": "<ip addr 2>" }],
     "tenant_id": "<tenant uuid>" },
    {"id": "<port uuid 3>",
     "network_id": "<net uuid 3>",
     "name": "<port name 3>",
     "mac_address": "<mac addr 3>",
     "fixed_ips": [{ "subnet_id": "<subnet uuid 3>" , "ip_address": "<ip addr 3>" }],
     "tenant_id": "<tenant uuid>" },
    {"id": "<port uuid 4>",
     "network_id": "<net uuid 2>",
     "name": "<port name 4>",
     "mac_address": "<mac addr 4>",
     "fixed_ips": [{ "subnet_id": "<subnet uuid 2>" , "ip_address": "<ip addr 4>" }],
     "tenant_id": "<tenant uuid>" },
    ] }

This will create a port on virtual network 1, two ports on virtual network two and a port on virtual network 3.

=== Deploy VMs and attach to OVS ===

Deploy three VMs to nodes with OVS and the OVS-Agent.  Configure each of these to use an address from each of the three networks.  Then attach the VMs to the OVS-Agent with the following command (repeated for each VM, being sure to match interface of the VM that uses an address from subnet 1 with network_id 1 and so on):

./add-port <VM interface> <network_id>

=== Create Policies between Virtual Networks 1 and 2 ===

To create policies between Virtual Networks 1 and 2, first, issue a POST request to http://<odmc address>:8080/controller/nb/v2/neutron/routers
with the following JSON body: 

{ 
"router":
{
"id": "<router uuid 1>",
"name": "<router name 1>",
"admin_state_up": true
}
}

After this, issue two PUT requests to http://<odmc address>:8080/controller/nb/v2/neutron/routers/<router uuid 1>/add_router_interface
For the first use 
{
"id": "<router uuid 1>",
"tenant_id": "<tenant uuid>",
"port_id": "<port uuid 1>",
"subnet_id": "<subnet uuid 1>"
}

and for the second use
{
"id": "<router uuid 1>",
"tenant_id": "<tenant uuid>",
"port_id": "<port uuid 2>",
"subnet_id": "<subnet uuid 2>"
}

At this point VMs in net 1 and net 2 should be able to ping each other.

=== Create Policies between Virtual Networks 2 and 3 ===

To create policies between Virtual Networks 2 and 3, first, issue a POST request to http://<odmc address>:8080/controller/nb/v2/neutron/routers
with the following JSON body: 

{ 
"router":
{
"id": "<router uuid 2>",
"name": "<router name 2>",
"admin_state_up": true
}
}

After this, issue two PUT requests to http://<odmc address>:8080/controller/nb/v2/neutron/routers/<router uuid 2>/add_router_interface
For the first use 
{
"id": "<router uuid 2>",
"tenant_id": "<tenant uuid>",
"port_id": "<port uuid 4>",
"subnet_id": "<subnet uuid 2>"
}

and for the second use
{
"id": "<router uuid 2>",
"tenant_id": "<tenant uuid>",
"port_id": "<port uuid 3>",
"subnet_id": "<subnet uuid 3>"
}

At this point VMs in net 2 and net 3 should be able to ping each other.
