=Technical Architecture=
OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller. It provides API for creating a common virtual network irrespective of the physical network. It is implemented as two major components
* VTN Manager
* VTN Coordinator
[[File:VTN Coordinator.png|800px]]
 
==OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator==
This has been implemented as an external aplication to the OpenDaylight controller. This component is responsible for the VTN Virtualization. The user will use the REST API’s of the VTN Coordinator to create the VTN network with the virtual configuration as required. VTN Coordinator will use the REST interface exposed by the VTN Manger to realise the virtual network  using the  OpenDaylight controller.

===VTN Coordinator Architecture===
[[File:VTN Coordinator architecture.png|600px]]

*Note: All the compoenents use the propreitary IPC API to communicate with each other.

;OpenDaylight Virtual Tenant Network (VTN):VTN API
The component providing the REST interface for VTN Coordinator. The webserver and VTN Service JAVA API are the implementations of this component.

;Webserver:
The Web Server module handles the REST APIs received from the VTN applications. It translates the REST APIs to the appropriate Java APIs. 
The main functions of this module are 
*Is started via the startup script catalina.sh. 
*VTN Application sends HTTP request to Web server in XML or JSON format. 
*Creates a session and acquire a read/write lock. 
*Invokes the VTN Service Java API corresponding to the specified URI. 
*Returns the response to the VTN Application. 
VTN Coordinator uses the Apache Tomcat as the webserver.

;VTN Service Java API library:
It provides the Java API library to communicate with the lower layer modules in the VTN Coordinator.

[[File:VTN java api.png|300px]]
The main functions of this library are 
*Creates an IPC client session to the lower layer. 
*Converts the request to IPC framework format. 
*Invokes the lower layer API (e.g. TC API to interact with TC module)
*Return the response from the lower layer to the web server 
The class details in implementation cab ne referred from this link

https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:VTN_API

;OpenDaylight Virtual Tenant Network (VTN):Transaction Coordinator
This component is responsible for the Two Phase commit implementation in VTN Coordinator. This coordinates between various components participating in commit and ensures the commit to the underlying controller (ODL). The TCLIB module is part of the components that need to interact with TC, helps to convert TC commands to programmable interface.
VTNService use the API provided by TC to initiate commit, while TC uses the IPC to communicate with TCLIB and service the commit request.

[[File:VTN service.png|400px]]

Class implementation details can be referred here
https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:Transaction_Coordinator

;OpenDaylight Virtual Tenant Network (VTN): Unified Provider Physical Layer (UPPL)
[[File:VTN UPPL.png|400px]]

This component is responsible for maintaining the physical network details. The user will create a controller entry upon which the VT%N Coordinator will communicate with the controller and fetch all physical information and the UPPL module will construct the physical topology using the same.
The class implementation details can be referred here.
https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:Unified_Provider_Physical_Layer_%28UPPL%29

;OpenDaylight Virtual Tenant Network (VTN): Unified Provider Logical Layer (UPLL)
[[File:VTN UPLL.png|400px]]


This is the core of VTN Coordinator, This provides the VTN implementation service. Any VTN component create/update/delete is received by UPLL and the appropriate entries are created in datable. Later when commit is triggered by TC, the same is committed to the controller (ODL).
For class implementation details, please refer to this url
https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_%28VTN%29:Unified_Provider_Logical_Layer_%28UPLL%29

;OpenDaylight Virtual Tenant Network (VTN): OpenDaylight Controller Driver (ODC Driver)

This component is responsible for the following
*Translate VTN Commands from the UPLL/UPL to appropriate REST API calls to VTN Manager
*Ensure ODL is running, by issuing frequent ping calls to collect version.
*Collect physical network details frequently and post the same to UPPL.

[[File:VTN ODCDriver.png|500px]]

==OpenDaylight Virtual Tenant Network (VTN):VTN Manager==
This is implemented as one plugin in the ODL controller. This provides a REST interface to create/update/delete VTN components. The user command in VTN Coordinator is translated as REST API to VTN Manager by the ODC Driver component.
In addition to the above mentioned role, it also provides an implementation to the Openstack L2 Network Functions API.

[[File:VTN Manager.png|900px]]

==Function Outline ==
VTN Virtualization comprises of the below list of components. VTN provides following operations for various network resources.

;(Example) Connecting the terminal to virtual network 
{|class = "wikitable"
|-
| Resources||GET||POST||PUT||DELETE 
|-
|VTN ||Yes||Yes||Yes||Yes 
|-
|vBridge||Yes||Yes||Yes||Yes 
|-
|vRouter||Yes||Yes||Yes||Yes 
|-
|vTep||Yes||Yes||Yes||Yes 
|-
|vTunnel||Yes||Yes||Yes||Yes 
|-
|vBypass||Yes||Yes||Yes||Yes 
|-
|vLink||Yes||Yes||Yes||Yes 
|-
|Interface||Yes||Yes||Yes||Yes 
|-
|Port map||Yes||No||Yes||Yes 
|-
|Vlan map||Yes||Yes||Yes||Yes 
|-
|Flowfilter (ACL/redirect)||Yes||Yes||Yes||Yes 
|-
|Controller information||Yes||Yes||Yes||Yes 
|-
|Physical topology information||Yes||No||No||No 
|-
|Alarm information||Yes||No||No||No 
|}

The following is an example of the usage to connect the terminal to the network. 
*Create VTN 
{|class = "wikitable"
|-
|# curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: PASSWORD' -H 'ipaddr: 127.0.0.1' \
-d '{"vtn":{"vtn_name":"VTN1"}}' http://172.1.0.1:8080/vtn-webapi/vtns.json
|}

*Create Controller Information 
{|class = "wikitable"
|-
|# curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: PASSWORD' -H 'ipaddr: 127.0.0.1' \
  -d '{"controller": {"controller_id":"CONTROLLER1","ipaddr":"172.1.0.1","type":"pfc","username":"root", \
  "password":"PASSWORD","version":"5.0"}}' http://172.1.0.1:8080/vtn-webapi/controllers.json
|}

*Create vBridge under VTN 
{|class = "wikitable"
|-
|# curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: PASSOWRD' -H 'ipaddr: 127.0.0.1' \
  -d '{"vbridge":{"vbr_name":"VBR1","controller_id": "CONTROLLER1","domain_id": "(DEFAULT)"}}' \
  http://172.1.0.1:8080/vtn-webapi/vtns/VTN1/vbridges.json
|}

*Create the interface to connect the terminal under vBridge 
{|class = "wikitable"
|-
|# curl -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: PASSWORD' -H 'ipaddr: 127.0.0.1' \
  -d '{"interface":{"if_name":"IF1"}}' http://172.1.0.1:8080/vtn-webapi/vtns/VTN1/vbridges/VBR1/interfaces.json
|}

=Installation Guide (link)=
The VTN Coordinator installation process is explained in the below link:
https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator

=Installation Troubleshooting(link)=

==How to install VTN Coordinator?==
* Please follow the steps mentioned in the link [[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator| VTN Coordinator installation]]

==After executing db_setup, you have encountered the error "Failed to setup database"?==
The error could be due to the below reasons
* Not a Root user 
  You may not be user with root permissions, please switch to such a previleage and execute again

* Postgres not Present 
  1.In case of Fedora/CentOS/RHEL, please check if /usr/pgsql/<version> directory is present and also ensure the commands 
    initdb, createdb,pg_ctl,psql are working. If, not please re-install postgres packages

  2.In case of Ubuntu, check if /usr/lib/postgres/<version> directory is present and check for 
    the commands as in the previous step.

* Not enough space to create tables==
 Please check df -k and ensure enough free space is available.
      
* If the above steps do not solve the problem, please refer to the log file for the exact problem==
      /usr/local/vtn/var/dbm/unc_setup_db.log for the exact error.

==What are the things to check after vtn_start?==
* list of coordinator processes
    command: ps -ef | grep unc
    postgres 29176 29171  0 18:50 ?        00:00:00 postgres: autovacuum launcher process
    root     29206     1  0 18:50 ?        00:00:00 /usr/local/vtn/sbin/uncd
    root     29221 29206  0 18:50 ?        00:00:00 drvodcd -Pcore.uncd.pid=29206 -Pcore.ipc.notify=uncd,launcher,0 -DR
    root     29243 29206  0 18:50 ?        00:00:00 phynwd -Pcore.uncd.pid=29206 -Pcore.ipc.notify=uncd,launcher,0 -DR
    root     29259 29206  0 18:50 ?        00:00:00 lgcnwd -Pcore.uncd.pid=29206 -Pcore.ipc.notify=uncd,launcher,0 -DR
    postgres 29278 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50531) idle
    postgres 29279 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50532) idle
    postgres 29280 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50533) idle
    postgres 29281 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50534) idle
    postgres 29284 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50536) idle
    
* Issue the curl command to fetch version and ensure rthe process is able to respond.

    
 4. The Processes are not getting listed in process table.
   a. Please execute /usr/local/bin/vtn_stop and check process table 
     if there are any coordinator process still running. This could error if the directory /usr/local/vtn was removed without vtn_stop.
     In such situations, Please kill all coordinator process and retry.
   
   b. Check the log file /usr/local/vtn/var/uncd/uncd_start.er for any particular startup errors.
   
   c. Check the log file /usr/local/vtn/var/db/pg_log/postgres*.log to ensure that database startup was 
      successful, if else please re-configure database and attempt the start again.
      
   d. Check the log file /usr/local/vtn/var/uncd/log/pfcd_message.log for the failure of any particular daemon,
      If the log messages indicate the failure of a particular daemon, please check the log file of the particular daemon for more details
       /usr/local/vtn/var/<daemon>/log/pfcd_message.log

   e. Mail the error to vtn-dev mailing list with the tar file of the /usr/local/vtn/var directory for debugging.

    
5. After setting up the apache tomcat server, what should be checked.
     Please check if catalina is running.
    
6. The REST API is always failing.
    Please ensure the firewall settings for port:8080 and enable the same.

=Configuration (link)=
The command to configure the opendaylight edition:
opendaylight/run.sh -virt vtn

=Tutorial / How-To=
Example of mapping interface and sending packets between hosts for single controller using mininet:
“mininet” details and set-up can be referred at below URL: https://wiki.opendaylight.org/view/OpenDaylight_Controller:Installation#Using_Mininet

;Single Controller Topology:
[[File:Single Controller topology.png|600px]]
*“mininet” command for above topology:
{|class = "wikitable"
|-
|mininet@mininet-vm:~$ sudo mn --controller=remote,ip=<controller-ip> --topo tree,2
|}

*Create a Controller
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.0.0.2", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8080/vtn-webapi/controllers.json
|}

*Create a VTN 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8080/vtn-webapi/vtns.json
|}

*Create a vBridge in the VTN 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges.json
|}

*Create two Interfaces into the vBridge 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|}

*Get the list of logical ports configured
{|class = "wikitable"
|-
|curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8080/vtn-webapi/controllers/controllerone/domains/\(DEFAULT\)/logical_ports.json
|}

*Configure two mappings on the interfaces 
{|class = "wikitable"
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:03-s3-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:02-s2-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json
|}

*Send packets from Host1 to Host3
{|class = "wikitable"
|-
|mininet> h1 ping h3
|}

Refer to below URL for more details and multi-controller scenario: https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator:RestApi:L2_Network_Example_Using_VTN_Virtualization

=Command Line Interface=
NA

=Programmatic Interface(s) (link)=


==VTN Functions==
This section will list the REST API to create/update/delete VTN(s) to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator|VTN Coordinator]]
 
=== Create VTN ===
This operation is used to create a VTN.
==== Request ====
 {| class="wikitable"
|-
| Method || POST
|-
| Request URI   || 
* XML format
 /vtns.xml
* JSON format
 /vtns.json
|-
| Request Body (XML)  ||
  <vtn vtn_name="{vtn_name}"
  description="{description}"/>
|-
| Request Body (JSON) ||
 {
   "vtn": {
   "vtn_name": "{vtn_name}",
   "description":
   "{description}"
   }
 }
|}


; Description of Request Elements 
{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
||Yes
|-
|description || A small description text for the VTN.
Valid value: A string of up to 127 characters. 
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
; Response Body 
:None

; Example 
{| class="wikitable"
|-
| curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vtn" : {"vtn_name":"vtn_one","description":"test VTN" }}' http://127.0.0.1:8080/vtn-webapi/vtns.json
|-
|}

===Delete VTN ===
This operation is used to delete a VTN.

====Request====

{| class="wikitable"
|-
| Method || DELETE
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}.xml
* JSON format
 /vtns/{vtn_name}.json
|}

; Description of Request Elements 
{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body 
:None

; Example
{| class="wikitable"
|-
| curl -v  -X DELETE -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'    http://127.0.0.1:8081/vtn-webapi/vtns/vtns.json
|-
|}

===Update VTN ===
This operation is used to update a VTN.

====Request====

{| class="wikitable"
|-
| Method || PUT
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}.xml
* JSON format
 /vtns/{vtn_name}.json
|-
| Request Body (XML)  ||
  <vtn description="{description}"/>
|-
| Request Body (JSON) ||
 {
   "vtn": {
   "description":
   "{description}"
   }
 }
|}



;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
||Yes
|}

;Description of Request Elements
{|class = "wikitable"
|-
|description || A small description text for the VTN.
Valid value: A string of up to 127 characters. 
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body 
:None


;Example
{| class="wikitable"
|-
| curl -v  -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vtn" : {"vtn_name":"vtn_one","description":"test VTN NAME" }}'  http://127.0.0.1:8080/vtn-webapi/vtns/vtns.json
|-
|}

===List VTNs ===
This operation is used to list VTN information based on specified conditions.


====Request====

{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns.xml
 /vtns/detail.xml
 /vtns/count.xml
* JSON format
 /vtns.json
 /vtns/detail.json
 /vtns/count.json
|- 
| Query string ||
 ?index={vtn_name}&max_repetition={max_repetition}
|}
;Description of query string elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
||Yes
|-
|max_repetetion || Number of the resources that are returned.Valid value: A positive integer Valid range: 1 to MAX of UINT32. Default is 10000
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body 
{| class="wikitable"
|-
| Response Body (XML)  ||
If count or detail is not specified in URI
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <vtns>
      <vtn vtn_name="{vtn_name}"/>
  </vtns>
If detail is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vtns>
     <vtn vtn_name="{vtn_name}"
   description="{description}"
   operstatus="{operstatus}"
   createdtime="{createdtime}"
   lastcommittedtime="{lastcommittedtime}"
   alarmstatus="{alarmstatus}"/>
 </vtns>
If count is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vtns count="{count}"/>
|-
| Request Body (JSON) ||
If count or detail is not specified in URI
 {
   "vtns": [
   {"vtn_name":
   "{vtn_name}"
   }
   ]  
 } 
If detail is specified in URI
 {
   "vtns": [
     {
               "vtn_name":
    "{vtn_name}",
               "description":
    "{description}",
               "operstatus":
    "{operstatus}",
               "createdtime":
    "{createdtime}",
               "lastcommittedtime":
    "{lastcommittedtime}",
               "alarmstatus":
    "{alarmstatus}"
       }
   ]
 }
If count is specified in URI
 {
   "vtns": {
       "count": "{count}"
   }
 }
|}

;Description of Response Elements

{| class="wikitable"
|-
| Element || Description 
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
|-
|description ||A small description text for the VTN.
Valid value: A string of up to 127 characters. 
|-
|operstatus || Operational status. Valid value: up, down,unknown.
|-
|createdtime || Number of seconds that have passed since last create. Valid value: UNIX time (The elapsed time in seconds since 00:00:00 UTC, 1 January, 1970) will be returned.
|-
|lastcommittedtime || Number of seconds that have passed since last commit.Valid value: UNIX time (The elapsed time in seconds since 00:00:00 UTC, 1 January,1970) will be returned.
|-
|alarmstatus  || Alarm status.Valid value: clear, raise
|-
|count || Number of VTN
|}



;Example
{| class="wikitable"
|-
| curl -v  -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'    http://127.0.0.1:8080/vtn-webapi/vtns/vtns.json
|-
|}

=== Show VTNs ===
This operation is used to view a specific VTN information.

==== Request ====
 
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}.xml
* JSON format
 /vtns/{vtn_name}.json
|}

;Description of Request Elements


{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
{| class="wikitable"
|-
| Response Body (XML)  ||
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <vtn vtn_name="{vtn_name}"
   description="{description}"
   operstatus="{operstatus}"
   createdtime="{createdtime}"
   lastcommittedtime="{lastcommittedtime}"
   alarmstatus="{alarmstatus}"/>
|-
| Request Body (JSON) ||
  {
    "vtn": {
        "vtn_name": "{vtn_name}",
        "description":
   "{description}",
        "operstatus":
   "{operstatus}",
        "createdtime":
   "{createdtime}",
        "lastcommittedtime":
   "{lastcommittedtime}",
        "alarmstatus":
   "{alarmstatus}"
      }
 }
|}

;Description of Response Elements 
{| class="wikitable"
|-
| Element || Description 
|-
|vtn_name || VTN name Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
|-
|description ||A small description text for the VTN.
Valid value: A string of up to 127 characters. 
|-
|operstatus || Operational status. Valid value: up, down,unknown.
|-
|createdtime || Number of seconds that have passed since last create. Valid value: UNIX time (The elapsed time in seconds since 00:00:00 UTC, 1 January, 1970) will be returned.
|-
|lastcommittedtime || Number of seconds that have passed since last commit.Valid value: UNIX time (The elapsed time in seconds since 00:00:00 UTC, 1 January,1970) will be returned.
|-
|alarmstatus  || Alarm status.Valid value: clear, raise
|}


;Example
{| class="wikitable"
|-
| curl -v  -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'    http://127.0.0.1:8081/vtn-webapi/vtns/vtns.json
|-
|}

==vBridge Functions==
This section will list the REST API to add/update/delete vBridge(s) to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator|VTN Coordinator]]
 

=== Create vBridge ===
This operation is used to create a vBridge.
 
==== Request ====
 
{| class="wikitable"
|-
| Method || POST
|-
| Request URI   ||
* XML format
 /vtns/{vtn_name}/vbridges.xml
* JSON format
 /vtns/{vtn_name}/vbridges.json
|-
| Request Body (XML)  ||
  <vbridge vbr_name="{vbr_name}"
   controller_id="{controller_id}"
   description="{description}"
   domain_id="{domain_id}"/>
|-
| Request Body (JSON) ||
  {
        "vbridge": {
            "vbr_name": "{vbr_name}",
            "controller_id":
          "{controller_id}",
            "description":
          "{description}",
            "domain_id": "{domain_id}"
             }
   }
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|}

;Description of request elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vbr_name   || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|-
| controller_id || 
Identifier of the Controller.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|-
|description || Additional information.
Valid value: A string of up
to 127 characters.
|| No
|-
|domain_id || domain_id Domain identifier.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning) and the string -
(DEFAULT).
Note: The value of
domain_id is case
sensitive.
|| Yes
|}

=== Response ===

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
:None

;Example 
{| class="wikitable"
|-
| curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   -d '{"vbridge" : {"vbr_name":"vbr_one","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges.json
|}

===Delete vBridge===
This operation is used to delete a vBridge.

====Request====

{| class="wikitable"
|-
| Method || DELETE
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}.json
|}


;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|}
Remember: vBridge whose Interface is set in if1_name or if2_name of vLink cannot be deleted.

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
:None


;Example 
{| class="wikitable"
|-
| curl -v -X DELETE -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8081/vtn-webapi/vtns/vtn_one/vbridges/vbr_one.json
|}

===Update vBridge===
This operation is used to update a vBridge.

==== Request ====
 
{| class="wikitable"
|-
| Method || PUT
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}.json
|-
| Request Body (XML)  ||
  <vbridge
   controller_id="{controller_id}"
   description="{description}"
   domain_id="{domain_id}"/>
|-
| Request Body (JSON) ||
  {
       "vbridge": {
            "controller_id":
     "{controller_id}",
            "description":
     "{description}",
            "domain_id": "{domain_id}"
          }
  }
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and underscore (except at the
beginning).
|| Yes
|}

;Description of request elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| controller_id || 
Identifier of the Controller.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| No
|-
|description || Additional information.
Valid value: A string of up
to 127 characters.
|| No
|-
|domain_id || domain_id Domain identifier.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning) and the string -
(DEFAULT).
Note: The value of
domain_id is case
sensitive.
|| No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
:None



;Example
{| class="wikitable"
|-
| curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'
-d '{"vbridge":{"controller_id":"{controllerone}","description":"{description}","domain_id": "{domain_id}"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges/vbr_one.json
|}

===List vBridge===
This operation is used to list vBridge information based on specified conditions.

==== Request ====
 
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges.xml
 /vtns/{vtn_name}/vbridges/detail.xml
 /vtns/{vtn_name}/vbridges/count.xml
* JSON format
 /vtns/{vtn_name}/vbridges.json
 /vtns/{vtn_name}/vbridges/detail.json
 /vtns/{vtn_name}/vbridges/count.json
|-
| Query string ||
 ?index={vbr_name}&max_repetition={max_repetition}
|}


;Request Body
:None

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|}

;Description of Query String Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vbr_name   || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| No
|-
| max_repetetion || Number of the resources
that are returned.
Valid value: A positive
integer
Valid range: 1 to MAX of
UINT32. Default is 10000.
|| No
|}

====Response====

{| class="wikitable"
|-
| Response Body (XML)  ||
 If detail or count is not specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vbridges>
    <vbridge
   vbr_name="{vbr_name}"/>
 </vbridges>
If detail is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vbridges>
     <vbridge vbr_name="{vbr_name}"
  controller_id="{controller_id}"
  description="{description}"
  domain_id="{domain_id}"
  status="{status}"></vbridge>
 </vbridges>
If count is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vbridges count="{count}"/>
|-
| Response Body (JSON) ||
 If detail or count is not specified in URI
 {
   "vbridges": [
       {
         "vbr_name":
    "{vbr_name}"
       }
     ]
  }
If detail is specified in URI
 {
   "vbridges": [
      {
          "vbr_name":
      "{vbr_name}",
          "controller_id":
      "{controller_id}",
          "description":
      "{description}",
          "status": "{status}",
          "domain_id":
      "{domain_id}"
       }
     ]
 }
If count is specified in URI
   {
   "vbridges": {
       "count": "{count}"
         }
    }
|}
;Description of response elements

{| class="wikitable"
|-
| Element || Description 
|-
| controller_id || 
Identifier of the Controller.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|description || Additional information.
Valid value: A string of up
to 127 characters.
|-
|domain_id || domain_id Domain identifier.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning) and the string -
(DEFAULT).
Note: The value of
domain_id is case
sensitive.
|-
|status || vBridge status.
Valid value: up, down,
unknown
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
| count || The number of vBridge.
Valid value: A positive integer.
|}


;Example
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8081/vtn-webapi/vtns/vtn_one/vbridges.json
|}

===Show vBridge===
This operation is used to view a specific vBridge information.

====Request====
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   ||
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}.json
|}

;Request Body
:None

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
| vbr_name ||  vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|}

====Response====
{| class="wikitable"
|-
| Response Body (XML)  ||
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vbridge vbr_name="{vbr_name}"
  controller_id="{controller_id}"
  description="{description}"
  status="{status}"
  domain_id="{domain_id}"> 
 </vbridge>
|-
| Response Body (JSON format) ||
  {
    "vbridge": {
         "vbr_name": "{vbr_name}",
         "controller_id":
    "{controller_id}",
         "description":
    "{description}",
         "status": "{status}",
    "domain_id": "{domain_id}"
    }
   }
|}

;Description of response elements

{| class="wikitable"
|-
| Element || Description 
|-
| controller_id || 
Identifier of the Controller.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|description || Additional information.
Valid value: A string of up
to 127 characters.
|-
|domain_id || domain_id Domain identifier.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning) and the string -
(DEFAULT).
Note: The value of
domain_id is case
sensitive.
|-
|status || vBridge status.
Valid value: up, down,
unknown
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
| count || The number of vBridge.
Valid value: A positive integer.
|}


;Example 
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8081/vtn-webapi/vtns/vtn_one/vbridges.json
|}

==vBridge Interface Functions==
This Section will list the REST API to add/update/delete vBridge Interface functions to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator|VTN Coordinator]]

=== Create vBridge Interface ===
This operation is used to create a vBridge Interface.
 
==== Request ====
 
{| class="wikitable"
|-
| Method || POST
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces.json
|-
| Request Body (XML)  ||
  <interface if_name="{if_name}"
    description="{description}"
    adminstatus="{adminstatus}"/>
|-
| Request Body (JSON) ||
  {
    "interface": {
      "if_name": "{if_name}",
      "description":
      "{description}",
      "adminstatus":
      "{adminstatus}"
    }
  }
|}
;Description of request URI elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|}

;Description of request elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
||Yes
|-
|description || Additional information.
Valid value: A string of up
to 127 characters.
||No
|-
|adminstatus || Admin status.
Valid value: enable,
disable
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body 
:None

;Example
{| class="wikitable"
|-
| curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   -d '{"interface": {"if_name": "ifone","description": "ifone_desc"}}' http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces.json
|}

===Delete vBridge Interface===
This operation is used to delete a vBridge Interface


==== Request ====
 
{| class="wikitable"
|-
| Method || DELETE
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}.json
|}

;Description of request URI elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|if_name || vBridge Interface name 
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|}

;Request Body
:None

Remember: vBridge Interface that is set in if1_name or if2_name of vLink cannot be deleted.

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body
:None

;Example
{| class="wikitable"
|-
| curl -v -X DELETE -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass ' -H 'ipaddr:127.0.0.1'   http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces/ifone.json
|}


===Update vBridge Interface===
This operation is used to update a vBridge Interface.


==== Request ====
 
{| class="wikitable"
|-
| Method || PUT
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}.json
|-
|Request Body(XML format)
|| 
   <interface
    description="{description}"
    adminstatus="{adminstatus}"/>
|-
|Request Body(JSON format)
||
 {
   "interface": {
         "description":
   "{description}",
   "adminstatus":
   "{adminstatus}"
   }
|}

;Description of request URI elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|if_name || vBridge Interface name 
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|}

;Description of request elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|description || Additional information.
Valid value: A string of up
to 127 characters.
||No
|-
|adminstatus || Admin status.
Valid value: enable,
disable.
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body
:None

;Example
{| class="wikitable"
|-
| curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   -d '{"interface": {"description": "new ifone_desc"}}' http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces/ifone.json
|}

===List vBridge Interfaces===
This operation is used to list vBridge Interface information based on specified conditions.

==== Request ====
 
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces.xml
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/detail.xml
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/count.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces.json
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/detail.json
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/count.json
|-
|Query String || ?index={if_name}&max_repetition={max_repetition}
|}

;Request Body
:None
;Description of request URI elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|}


;Description of query string elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
||No
|-
|max_repetition || Number of the resources
that are returned.
Valid value: A positive
integer
Valid range: 1 to MAX of
UINT32. Default is 10000.
||No
|}

==== Response ====
 
{| class="wikitable"
|-
|Response Body(XML format)
|| 
If count or detail is not specified in URI
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <interfaces>
   <interface 
If detail is specified in URI
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <interfaces>
      <interface if_name="{if_name}"
   description="{description}"
   adminstatus="{adminstatus}"
   operstatus="{operstatus}">
  <neighbor
   vnode_name="{vnode_name}"
   if_name="{if_name}"
   vlk_name="{vlk_name}"/>
      </interface>
  </interfaces>

If count is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <interfaces count="{count}"/>
|-
|Response Body(JSON format)
||
If count or detail is not specified in URI
  {
    "interfaces": [
         {
        "if_name": "{if_name}"
         }
      ]
  }
If detail is specified in URI
    {
    "interfaces": [
          {
          "if_name":
      "{if_name}",
          "description":
      "{description}",
          "adminstatus":
      "{adminstatus}",
          "operstatus":
      "{operstatus}",
          "neighbor": {
              "vnode_name":
         "{vnode_name}",
                 "if_name":
         "{if_name}",
                 "vlk_name":
         "{vlk_name}"
           }
        }
      ]
    }
If count is specified in URI
  {
   "interfaces":{
      "count": "{count}"
        }
   }
|}


;Description of response elements(interface)

{| class="wikitable"
|-
| Element || Description 
|-
| if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|description ||Additional information.
Valid value: A string of up to
127 characters.
|-
|adminstatus || Admin status.
Valid value: enable, disable.
|-
|operstatus || Operational status.
Valid value: up, down,
unknown
|-
|neighbor || Information about the neighbor.
|-
|count || The number of vBridge
Interface.
Valid value: A positive integer.
|}



;Description of response elements(neighbor)

{| class="wikitable"
|-
| Element || Description 
|-
| if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|vnode_name ||Virtual node name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|vlk_name || vLink name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|}

;Example
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces.json
|}

===Show vBridge Interface===


==== Request ====
 
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}.json
|}

;Request Body
:None


;Description of request URI elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
||Yes
|-
|if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
||Yes
|}

====Response====

{| class="wikitable"
|-
| Response Body(XML format) || 
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <interface if_name="{if_name}"
   description="{description}"
   adminstatus="{adminstatus}"
   operstatus="{operstatus}">
  <neighbor
   vnode_name="{vnode_name}"
   if_name="{if_name}"
   vlk_name="{vlk_name}"/>
  </interface>
|-
| Response Body (JSON format)   || 
  { 
     "interfaces": {
          "if_name": "{if_name}",
          "description":
       "{description}",
          "adminstatus":
       "{adminstatus}",
          "operstatus":
       "{operstatus}",
          "neighbor": {
                  "vnode_name":
             "{vnode_name}",
                  "if_name":
             "{if_name}",
                  "vlk_name":
             "{vlk_name}" 
                 }
           }
    }
|}



;Description of response elements(interface)

{| class="wikitable"
|-
| Element || Description 
|-
| if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|description ||Additional information.
Valid value: A string of up to
127 characters.
|-
|adminstatus || Admin status.
Valid value: enable, disable.
|-
|operstatus || Operational status.
Valid value: up, down,
unknown
|-
|neighbor || Information about the neighbor.
|}

;Description of response elements(neighbor)

{| class="wikitable"
|-
| Element || Description 
|-
| if_name || vBridge Interface name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|vnode_name ||Virtual node name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|-
|vlk_name || vLink name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|}

;Example
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces/ifone.json
|}

==vBridge Interface Port Map Functions==
This section will list the REST API to set/delete vBridge Interface Port Map functions to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator|VTN Coordinator]]
 

=== Set vBridge Interface Port Map ===
This operation is used to update a vBridge Interface Port Map for specific settings.
 
==== Request ====
 
{| class="wikitable"
|-
| Method || PUT
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}/
  portmap.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}/
  portmap.json
|-
| Request Body (XML)  ||
  <portmap
   logical_port_id="{logical_port_id}"
   vlan_id="{vlan_id}"
   tagged="{tagged}"/>
|-
| Request Body (JSON) ||
  {
    "portmap": {
    "logical_port_id":
    "{logical_port_id}",
    "vlan_id": "{vlan_id}",
    "tagged": "{tagged}"
    }
  }
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes 
|-
|vbr_name ||vBridge name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|-
|if_name || vBridge Interface name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|}

;Description of Request Elements
{| class="wikitable"
|-
| Element || Description || Required
|-
|logical_port_id || Logical port identifier. Valid value: A string of up to 319 characters.
||Yes
|-
|vlan_id ||Identifier of the mapped VLAN.
Valid value: A positive integer.
Valid range: 1 - 4095
Note: This parameter is required if tagged is specified.
||No
|-
|tagged || Displays whether VLAN tags are sent and received in the Physical network.
Valid value:
• true: Send and receive packets with VLANtags.
• false: Send and receive packets without VLAN tags.
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body
:None

;Example
{| class="wikitable"
|-
| curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass ' -H 'ipaddr:127.0.0.1'   -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:03-s3-eth1","vlan_id": "2","tagged": "true"}}' http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces/ifone/portmap.json
|}

=== Delete vBridge Interface Port Map ===
This operation is used to delete a vBridge Interface Port Map.
 
==== Request ====
 
{| class="wikitable"
|-
| Method || DELETE
|-
| Request URI   ||
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}/
 portmap.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}/
 portmap.json
|}

;Description of Request URI Elements 


{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes 
|-
|vbr_name ||vBridge name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|-
|if_name || vBridge Interface name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body 
:None

;Example
{| class="wikitable"
|-
| curl -v -X DELETE -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass ' -H 'ipaddr:127.0.0.1'    http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces/ifone/portmap.json
|}

=== Show vBridge Interface Port Map ===
This operation is used to view a specific vBridge Interface Port Map information.
 
==== Request ====
 
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}/
  portmap.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/interfaces/{if_name}/
  portmap.json
|}
;Request Body 
:None

;Description of RequestURI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|vtn_name || VTN name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes 
|-
|vbr_name ||vBridge name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|-
|if_name || vBridge Interface name.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|}

==== Response ====
{| class="wikitable"
|-
| Response body (XML)  ||
  <?xml version="1.0"
    encoding="UTF-8"
   standalone="yes"?>
  <portmap
    logical_port_id="{logical_port_id}"
    vlan_id="{vlan_id}"
    tagged="{tagged}"/>
|-
| Response body (JSON) ||
  {
    "portmap": {
    "logical_port_id":
    "{logical_port_id}",
    "vlan_id": "{vlan_id}",
    "tagged": "{tagged}"
    }
  }
|}

;Example
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass ' -H 'ipaddr:127.0.0.1'    http://127.0.0.1:8081/vtn-webapi/vtns/vtnone/vbridges/vbrone/interfaces/ifone/portmap.json
|}

==VLAN Map Functions==

This section will list the REST API to add/update/delete VLAN Map to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator|VTN Coordinator]]
 
=== Create VLAN Map ===
This operation is used to create a VLAN Map.
 
==== Request ====
 
{| class="wikitable"
|-
| Method || POST
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps.json
|-
| Request Body (XML)  ||
  <vlanmap
   logical_port_id="{logical_port_id}"
   vlan_id="{vlan_id}"
   no_vlan_id="{no_vlan_id}"/>
|-
| Request Body (JSON) ||
  {
     "vlanmap": {
        "logical_port_id":
      "{logical_port_id}",
        "vlan_id": "{vlan_id}",
        "no_vlan_id":
      "{no_vlan_id}"
         }
  }
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|}

;Description of Request Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| logical_port_id   ||Logical port identifier.
Valid value: A string of up
to 319 characters.
|| No
|-
| vlan_id || Identifier of the mapped
VLAN.
Valid value: A positive
integer.
Valid range: 1 - 4095
|| No
|-
| no_vlan_id || Indicates that no vlan_id is
used.Valid value: true.
Note: Either vlan_id
or no_vlan_id can be
specified.
|| No
|}

Remember: Combination of logical_port_id and vlan_id must be unique within vBridge.

Important: When setting VLAN Map in the vBridge under controller whose type is pfc, PFC needs to be
configured as bellow.

* When specifying switch identifier in logical_port_id, configure Extended VLAN mode (vlan-connect
enable).

* When specifying no_vlan_id configure Standard VLAN mode (no vlan-connect enable).

====Response ====
{| class="wikitable"
|-
| Response Body (XML)  ||
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <vlanmap
   vlanmap_id="{vlanmap_id}"/>
|-
| Request Body (JSON) ||
  {
    "vlanmap": {
        "vlanmap_id":
     "{vlanmap_id}"
      }
   }
|}

;Description of Response Elements

{| class="wikitable"
|-
| Element || Description 
|-
| vlanmap_id   || VLAN Map identifier.
If logical_port_id is specified
at creation time, vlanmap_id
is "lpid-{logical_port_id}".
Otherwise, it is "no_lpid ".
|}

;Example
{| class="wikitable"
|-
| curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vlanmap": {"logical_port_id":"{logical_port_id}","vlan_id": "{vlan_id}","no_vlan_id":"{no_vlan_id}"}}’ http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges/vbr_one/vlanmaps/vlan_one
|}

===Delete VLAN Map===

This operation is used to delete a VLAN Map.

==== Request ====
 
{| class="wikitable"
|-
| Method || DELETE
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/{vlanmap_id}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/{vlanmap_id}.json
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|-
| vlanmap_id || VLAN Map identifier.
If logical_port_id is
specified at creation
time, vlanmap_id is
"lpid-{logical_port_id}".
Otherwise, it is "no_lpid".
|| Yes 
|}
;Request Body
:None

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
:None

;Example
{| class="wikitable"
|-
| curl -v -X DELETE -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'  http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges/vbr_one/vlanmaps/vlan_one
|}

===Update VLAN Map===

This operation is used to update a VLAN Map.

====Request====
{| class="wikitable"
|-
| Method || PUT
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/{vlanmap_id}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/{vlanmap_id}.json
|-
| Request Body (XML)  ||
  <vlanmap vlan_id ="{vlan_id}"
   no_vlan_id ="{no_vlan_id}"/>
|-
| Request Body (JSON) ||
   {
     "vlanmap": {
         "vlan_id": "{vlan_id}",
      "no_vlan_id":
   "{no_vlan_id}"
         }
   }
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning).
|| Yes
|-
| vlanmap_id || VLAN Map identifier.
If logical_port_id is
specified at creation
time, vlanmap_id is
"lpid-{logical_port_id}".
Otherwise, it is "no_lpid".
|| Yes 
|}

;Description of Request Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vlan_id   || Identifier of the mapped
VLAN.
Valid value: A positive
integer.
Valid range: 1 - 4095
|| No
|-
|no_vlan_id ||Indicates that no vlan_id is
used.
Valid value: true.
Note: Either vlan_id
or no_vlan_id can be
specified.
|| No
|}

Remember: Combination of logical_port_id and vlan_id must be unique within vBridge.

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
:None

;Example 
{| class="wikitable"
|-
| curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vlanmap":"vlan_id":"{vlan_id}","no_vlan_id":"{no_vlan_id}" }}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges/vbr_one/vlanmaps/vlan_one
|}

===List VLAN Map===
This operation is used to list VLAN Map information based on specified conditions.


====Request====
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps.xml
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/detail.xml
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/count.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps.json
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/detail.json
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/count.json
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and underscore (except at the
beginning).
|| Yes
|}



;Description of Query String Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vlanmap_id   || VLAN Map identifier.
If logical_port_id is
specified at creation
time, vlanmap_id is
"lpid-{logical_port_id}".
Otherwise, vlanmap_id is
"no_lpid".
|| No
|-
| max_repetetion || Number of the resources
that are returned.
Valid value: A positive
integer
Valid range: 1 to MAX of
UINT32. Default is 10000.
|| No
|}

====Response====
{| class="wikitable"
|-
| Request Body (XML)  ||
If count or detail is not specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <vlanmaps>
      <vlanmap
  vlanmap_id="{vlanmap_id}"/>
 </vlanmaps>
If detail is specified in URI
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
       <vlanmaps>
  <vlanmap
   vlanmap_id="{vlanmap_id}"
   logical_port_id="{logical_port_id}"
   vlan_id="{vlan_id}"
   no_vlan_id="{no_vlan_id}"/>
  </vlanmaps>
If count is specified in URI
  <vlanmaps count="{count}"/>
|-
| Request Body (JSON) ||
If count or detail is not specified in URI
  {
    "vlanmaps": [
       {
       "vlanmap_id":
    "{vlanmap_id}"
       }
     ]
   }
If detail is specified in URI
   {
    "vlanmaps": [
         {
       "vlanmap_id":
    "{vlanmap_id}",
       "logical_port_id":
    "{logical_port_id}",
       "vlan_id":
    "{vlan_id}",
       "no_vlan_id":
    "{no_vlan_id}"
         }
     ]
   }
If count is specified in URI
   {
   "vlanmaps": {
      "count": "{count}"
      }
   }
|}

;Description of Response Elements

{| class="wikitable"
|-
| Element || Description 
|-
| vlanmap_id   || VLAN Map identifier.
If logical_port_id is
specified at creation
time, vlanmap_id is
"lpid-{logical_port_id}".
Otherwise, vlanmap_id is
"no_lpid".
|-
| logical_port_id || Logical port identifier.
Valid value: A string of up to
319 characters.
|-
| vlan_id || Identifier of the mapped
VLAN.
Valid value: A positive integer.
Valid range: 1 - 4095
|-
| no_vlan_id || Indicates that no vlan_id is
used.
Valid value: true.
Note: Either vlan_id or
no_vlan_id can be specified.
|-
| count || Number of VLAN Maps.
Valid value: A positive integer.
|}

;Example
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'  http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges/vbr_one/vlanmaps/vlan_one
|}

===Show VLAN Map===
This operation is used to view a specific VLAN Map information.

====Request====
{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/{vlanmap_id}.xml
* JSON format
 /vtns/{vtn_name}/vbridges/{vbr_name}/vlanmaps/{vlanmap_id}.json
|}

;Description of Request URI Elements

{| class="wikitable"
|-
| Element || Description || Required
|-
| vtn_name   || VTN name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and
underscore (except at the
beginning). 
|| Yes
|-
|vbr_name || vBridge name.
Valid value: Up to 31
characters that can include
alphabets, numbers, and underscore (except at the
beginning).
|| Yes
|-
|vlanmap_id || VLAN Map identifier.
If logical_port_id is
specified at creation
time, vlanmap_id is
"lpid-{logical_port_id}".
Otherwise, it is "no_lpid".
||Yes
|}

;Request Body
:None

====Response====
{| class="wikitable"
|-
| Response Body (XML)  ||
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <vlanmap vlanmap_id="{vlanmap_id}"
   logical_port_id="{logical_port_id}"
   vlan_id="{vlan_id}"
   no_vlan_id="{no_vlan_id}"/>
|-
| Response Body (JSON) ||
 {
      "vlanmap": {
           "vlanmap_id":
     "{vlanmap_id}",
           "logical_port_id":
     "{logical_port_id}",
           "vlan_id": "{vlan_id}",
     "no_vlan_id":
           "{no_vlan_id}"
       }
  }
|}


;Description of Response Elements;

{| class="wikitable"
|-
| Element || Description 
|-
| vlanmap_id   || VLAN Map identifier.
If logical_port_id is
specified at creation
time, vlanmap_id is
"lpid-{logical_port_id}".
Otherwise, vlanmap_id is
"no_lpid".
|-
| logical_port_id || Logical port identifier.
Valid value: A string of up to
319 characters.
|-
| vlan_id || Identifier of the mapped
VLAN.
Valid value: A positive integer.
Valid range: 1 - 4095
|-
| no_vlan_id || Indicates that no vlan_id is
used.
Valid value: true.
Note: Either vlan_id or
no_vlan_id can be specified.
|-
| count || Number of VLAN Maps.
Valid value: A positive integer.
|}


;Example
{| class="wikitable"
|-
| curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'  http://127.0.0.1:8080/vtn-webapi/vtns/vtn_one/vbridges/vbr_one/vlanmaps/vlan_one
|}

==Physical Controller Functions==
This section will list the REST API to add/update/delete Physical controllers to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator|VTN Coordinator]]
 

=== Create Physical Controller ===
Add a Physical Controller to Coordinator
 
==== Request ====
 
{| class="wikitable"
|-
| Method || POST
|-
| Request URI   ||
* XML format
 /controllers.xml
* JSON format
 /controllers.json
|-
| Request Body (XML)  ||
  <controller
  controller_id="{controller_id}"
  description="{description}"
  ipaddr="{ipaddr}" type="{type}"
  auditstatus="{auditstatus}"
  username="{username}"
  password="{password}"
  version="{version}"/>

|-
| Request Body (JSON) ||
  {
    "controller": {
    "controller_id":
    "{controller_id}",
    "description":
    "{description}",
    "ipaddr": "{ipaddr}",
    "type": "{type}",
    "auditstatus":
    "{auditstatus}",
    "username": "{username}",
    "password": "{password}",
    "version": "{version}"
    }
  }
|}

;Description of Request Elements 

{| class="wikitable"
|-
| Element || Description || Required
|-
|controller_id  || Identifier of the Controller.value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning). 
||Yes
|-
|description ||  A small description of the Controller.
Valid value: A string of up to 127 characters. 
||No
|-
|ipaddr ||  IP address.
Valid value: IPv4 dot-separated format (Example: 192.168.1.1)
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|type || Controller type.
Valid value: bypass, pfc, odc 
||Yes
|-
|auditstatus||Audit status.
Valid value: enable, disable
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|usename || The user name you want to specify.
Valid value: A string of up to 31 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|password || The password that corresponds to the specified user name.
Valid value: A string of up to 256 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|version || Version of Controller.
Valid value: A string of up to 31 characters that can include numbers and dot (.).
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body
:None
;Example
{| class="wikitable"
|-
| curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.100.9.16", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8081/vtn-webapi/controllers.json
|}

===Delete Physical Controller ===

This operation is used to delete a Physical controller.

====Request====

{| class="wikitable"
|-
| Method || DELETE
|-
| Request URI   || 
* XML format
 /controllers/{controller_id}.xml
* JSON format
 /controllers/{controller_id}.json
|}

;Description of Request Elements


{| class="wikitable"
|-
| Element|| Description || Required
|-
| controller_id  || Identifier of the Controller.value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body
:None

;Example
{| class="wikitable"
|-
|curl -v -X DELETE -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'  http://127.0.0.1:8081/vtn-webapi/controllers/controllerone.json
|}

===Update Physical Controller ===

This operation is used to update a Physical Controller.

==== Request ====
 
{| class="wikitable"
|-
| Method || PUT
|-
| Request URI   || 
* XML format
 /controllers/{controller_id}.xml
* JSON format
 /controllers/{controller_id}.json
|-
| Request Body (XML)  ||
  <controller
    description="{description}"
    ipaddr="{ipaddr}"
    auditstatus="{auditstatus}"
    username="{username}"
    password="{password}"
    version="{version}"/>

|-
| Request Body (JSON) ||
  {
    "controller": {
      "description":
      "{description}",
      "ipaddr": "{ipaddr}",
      "auditstatus":
      "{auditstatus}",
      "username": "{username}",
      "password": "{password}",
      "version": "{version}"
    }
  }
|}

;Description of Request Elements

{| class="wikitable"
|-
| Element|| Description || Required
|-
| controller_id  || Identifier of the Controller.value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|-
| description || A small description of the Controller.
Valid value: A string of up to 127 characters. 
||No
|-
| ipaddr || IP address.
Valid value: IPv4 dot-separated format (Example: 192.168.1.1)
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|auditstatus || Audit status.
Valid value: enable, disable
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|username || The user name you want to specify.
Valid value: A string of up to 31 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|password || The password that corresponds to the specified user name.
Valid value: A string of up to 256 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
||No
|-
|version || Version of Controller.
Valid value: A string of up to 31 characters that can include numbers and dot (.).
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi#List_of_Response_codes|List of response Codes]].
 
;Response Body
:None

;Example
{| class="wikitable"
|-
|curl -v  -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   -d '{"controller": {"description": "new controller","ipaddr":"10.100.9.17",  "version": "1.0", "auditstatus":"enable"}}'  http://127.0.0.1:8081/vtn-webapi/controllers/controllerone.json
|}

===List Physical Controllers ===
This operation is used to list Physical Controller information.


====Request====

{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /controllers.xml
 /controllers/detail.xml
 /controllers/count.xml
* JSON format
 /controllers.json
 /controllers/detail.json
 /controllers/count.json
|- 
| Query string ||
  ?
  index={controller_id}&max_repetition={max_repetition}
|}

;Description of query string elements


{| class="wikitable"
|-
| Element || Description || Required
|-
|controller_id ||
Identifier of the Controller.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||No
|-
|max_repetetion ||Number of the Controllers that are returned.
When the count is specified as "0", then the result is the total number of the Controller.
Valid value: A positive integer
Valid range: 1 to MAX of UINT32. Default is 10000
||No
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
{| class="wikitable"
|-
| Response Body (XML)  ||
If count or detail is not specified in URI
  <?xml version="1.0"
   encoding="UTF-8"
   standalone="yes"?>
  <controllers>
  <controller
    controller_id="{controller_id}"/>
  </controllers>
If detail is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <controllers>
   <controller
     controller_id="{controller_id}"
     description="{description}"
     ipaddr="{ipaddr}" type="{type}"
     auditstatus="{auditstatus}"
     username="{username}"
     password="{password}"
     version="{version}"
     actual_version="{actual_version}"
     operstatus="{operstatus}"/>
   </controllers>
If count is specified in URI
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <controllers count="{count}"/>
|-
| Request Body (JSON) ||
If count or detail is not specified in URI
 {
    "controllers": [
      {
         "controller_id":
         "{controller_id}"
      }
    ]
 }
If detail is specified in URI
  {
   "controllers": [
     {
     "controller_id": "{controller_id}",
     "description": "{description}",
     "ipaddr": "{ipaddr}",
     "type": "{type}",
     "auditstatus": "{auditstatus}",
     "username": "{username}",
     "password": "{password}",
     "version": "{version}",
     "actual_version": "{actual_version}",
     "operstatus": "{operstatus}"
     }
   ]
 }
If count is specified in URI
 {
   "controllers": {
       "count": "{count}"
   }
 }
|}

;Description of Response Elements

{| class="wikitable"
|-
| Element || Description  
|-
|controller_id ||
Identifier of the Controller.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
|-
|description || A small description of the Controller.
Valid value: A string of up to 127 characters. 
|-
|ipaddr ||IP address.
Valid value: IPv4 dot-separated format (Example: 192.168.1.1)
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|type ||Controller type.
Valid value: bypass, pfc, odc
|-
|auditstatus || Audit status.
Valid value: enable, disable
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|username || The user name you want to specify.
Valid value: A string of up to 31 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|password || The password that corresponds to the specified user name.
Valid value: A string of up to 256 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|version || Version of Controller.
Valid value: A string of up to 31 characters that can include numbers and dot (.).
|-
|actual_version || Actual version of Controller.
Valid value: A string of up to 31 characters that can include numbers and dot (.).
|-
|operstatus || The operational status.
Valid value: up, down, waiting_audit, auditing 
|-
|count || The number of Controllers.
Valid value: A positive integer.
|}

;Example
{| class="wikitable"
|-
|curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   http://127.0.0.1:8081/vtn-webapi/controllers.json
|}

===Show Physical Controller ===
This operation is used to view a specific Physical Controller information.

====Request====

{| class="wikitable"
|-
| Method || GET
|-
| Request URI   || 
* XML format
 /controllers/{controller_id}.xml
* JSON format
 /controllers/{controller_id}.json
|}

;Description of query string elements

{| class="wikitable"
|-
| Element || Description || Required
|-
|controller_id ||
Identifier of the Controller.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
||Yes
|}

==== Response ====

: The Response returned will be one of the values in the [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|List of response Codes]].
 
;Response Body
{| class="wikitable"
|-
| Response Body (XML)  ||
 <?xml version="1.0"
  encoding="UTF-8"
  standalone="yes"?>
 <controllers>
   <controller
     controller_id="{controller_id}"
     description="{description}"
     ipaddr="{ipaddr}" type="{type}"
     auditstatus="{auditstatus}"
     username="{username}"
     password="{password}"
     version="{version}"
     actual_version="{actual_version}"
     operstatus="{operstatus}"/>
   </controllers>
|-
| Request Body (JSON) ||
  {
   "controllers": [
     {
     "controller_id": "{controller_id}",
     "description": "{description}",
     "ipaddr": "{ipaddr}",
     "type": "{type}",
     "auditstatus": "{auditstatus}",
     "username": "{username}",
     "password": "{password}",
     "version": "{version}",
     "actual_version": "{actual_version}",
     "operstatus": "{operstatus}"
     }
   ]
 }
|}

;Description of Response Elements

{| class="wikitable"
|-
| Element || Description  
|-
|controller_id ||
Identifier of the Controller.
Valid value: Up to 31 characters that can include alphabets, numbers, and underscore (except at the beginning).
|-
|description || A small description of the Controller.
Valid value: A string of up to 127 characters. 
|-
|ipaddr ||IP address.
Valid value: IPv4 dot-separated format (Example: 192.168.1.1)
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|type ||Controller type.
Valid value: bypass, pfc, odc
|-
|auditstatus || Audit status.
Valid value: enable, disable
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|username || The user name you want to specify.
Valid value: A string of up to 31 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|password || The password that corresponds to the specified user name.
Valid value: A string of up to 256 characters.
Note: This parameter cannot be specified if ''type'' is bypass.
|-
|version || Version of Controller.
Valid value: A string of up to 31 characters that can include numbers and dot (.).
|-
|actual_version || Actual version of Controller.
Valid value: A string of up to 31 characters that can include numbers and dot (.).
|-
|operstatus || The operational status.
Valid value: up, down, waiting_audit, auditing 
|}

;Example
{| class="wikitable"
|-
|curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1'   http://127.0.0.1:8081/vtn-webapi/controllers/controllerone.json
|}


==More VTN API’s==
Similarly, the following links will describe the VTN API’s in detail:
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:API Version Function|API Version function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Coordinator Version Functions|Coordinator Version Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Flow List Functions|Flow List functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:Flow List Entry Functions|Flow List Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:VTN Station Functions|VTN Station functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VTN Functions|VTN functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:VTN Flow Filter Functions|VTN Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:VTN Flow Filter Entry functions|VTN Flow Filter Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Functions|vBridge Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Host Address Functions|Host Address functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:L2 Domain Function|L2 Domain function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:MAC Entry Function|MAC Entry function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VLAN Map Functions|VLAN Map Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Flow Filter Functions|vBridge Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Flow Filter Entry Functions|vBridge Flow Filter Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Interface Functions|vBridge Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Interface Port Map Functions|vBridge Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Interface Flow Filter Functions|vBridge Interface Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Interface Flow Filter Entry Functions|vBridge Interface Flow Filter Entry Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter functions|vRouter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:Static IP Route Functions|Static IP Route functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:IP Routes Function|IP Routes function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:ARP Entry Functions|ARP Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:DHCP Relay Status Functions|DHCP Relay Status functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:DHCP Relay Interface Functions|DHCP Relay Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:DHCP Relay Server Functions|DHCP Relay Server functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter Interface Functions|vRouter Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter Interface Flow Filter functions|vRouter Interface Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter Interface Flow Filter Entry functions|vRouter Interface Flow Filter Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBypass Functions|vBypass functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBypass Interface Functions|vBypass Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Functions|vTep functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Interface Functions|vTep Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Interface Port Map Functions|vTep Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Group Functions|vTep Group functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTunnel Functions|vTunnel functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTunnel Interface Functions|vTunnel Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTunnel Interface Port Map functions|vTunnel Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vLink Functions|vLink functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Physical Controller Functions|Physical Controller Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Switch Functions|Physical Switch functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Port Functions|Physical Port function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:Physical Link Function|Physical Link function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Domain Functions|Physical Domain functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Logical Port Function|Logical Port function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Boundary Functions|Physical Boundary functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Configuration Functions|Configuration functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Session Functions|Session functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: User Function|User function]]<br>



[[Category:OpenDaylight Virtual Tenant Network]]
