=Technical Architecture=
OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller. It provides API for creating a common virtual network irrespective of the physical network. It is implemented as two major components
* VTN Coordinator
* VTN Manager
[[File:VTN Coordinator.png|800px]]
 
==OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator==
This has been implemented as an external application to the OpenDaylight controller. This component is responsible for the VTN Virtualization. The user will use the REST API’s of the VTN Coordinator to create the VTN network with the virtual configuration as required. VTN Coordinator will use the REST interface exposed by the VTN Manger to realize the virtual network  using the  OpenDaylight controller.

[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator#VTN_Coordinator| VTN Coordinator Architecture Overview]

* VTN Coordinator components
** [https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_API#VTN_API| VTN API]
** [https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Transaction_Coordinator#Transaction_Coordinator| Transaction Coordinator]
** [https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Unified_Provider_Physical_Layer_(UPPL)#Unified_Provider_Physical_Layer_.28UPPL.29| Unified Provider Physical Layer (UPPL)]
** [https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Unified_Provider_Logical_Layer_(UPLL)#Unified_Provider_Logical_Layer_.28UPLL.29| Unified Provider Logical Layer (UPLL)]
**[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):OpenDaylight_Controller_Driver_(ODC_Driver)#OpenDaylight_Controller_Driver_.28ODC_Driver.29| OpenDaylight Controller Driver (ODC Driver)]

==OpenDaylight Virtual Tenant Network (VTN):VTN Manager==
This is implemented as one plugin to the OpenDayLight controller. This provides a REST interface to create/update/delete VTN components. The user command in VTN Coordinator is translated as REST API to VTN Manager by the ODC Driver component.
In addition to the above mentioned role, it also provides an implementation to the Openstack L2 Network Functions API.

[[File:VTN_MANAGER_diag_new.png|600px]]

==Function Outline ==
{| class="wikitable"
|-
! Component
! Interface
! Purpose
|-
| VTN Manager
| RESTful API
| Configure VTN Virtualization model components in OpenDayLight
|-
| VTN Manager
| Neutron API implementation
| Handle Networks API from OpenStack (Neutron Interface)
|-
| VTN Coordinator
| Restful API
| 
*Uses the Restful interface of VTN Manager and Configure VTN Virtualization model components in OpenDayLight.
*handle multiple controller orchestration.
*Provides API to read the physical network details.Please refer to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:L2 Network Example Using VTN Virtualization|samples]] for usage.
|}

=Installation Guide=
;[[OpenDaylight Virtual Tenant Network (VTN):Installation:VTN Coordinator|Install VTN Coordinator from source]]
;[[OpenDaylight Virtual Tenant Network (VTN):Installation:VTN Manager|Install VTN Manager from Source]]
;[[OpenDaylight Virtual Tenant Network (VTN):Installation:Virtualization Edition|Install VTN Coordinator and VTN Manager from virtualization Edition]]

=Installation Troubleshooting=
[[OpenDaylight Virtual Tenant Network (VTN):Installation:Troubleshooting|Troubleshoot VTN Coordinator]]

=Configuration=
[[OpenDaylight Virtual Tenant Network (VTN):Installation:Configuration|Configuration of VTN Coordinator]]

=Tutorial / How-To=
== Assumptions ==
* VTN Coordinator is installed and configured to accept requests in 8080
* The ODL controller is enabled to work with VTN virtualization (i.e. executed as ./run.sh -virt vtn)
* The Controller is reachable from VTN Coordinator
==Example==
All requests are ported to VTN Coordinator.
Example of mapping interface and sending packets between hosts for single controller using mininet:
“mininet” details and set-up can be referred at below URL: https://wiki.opendaylight.org/view/OpenDaylight_Controller:Installation#Using_Mininet

;Single Controller Topology:
[[File:Single Controller topology.png|600px]]
*“mininet” command for above topology:
{|class = "wikitable"
|-
|mininet@mininet-vm:~$ sudo mn --controller=remote,ip=<controller-ip> --topo tree,2
|}

*Create a Controller
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.0.0.2", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8080/vtn-webapi/controllers.json
|}

*Create a VTN 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8080/vtn-webapi/vtns.json
|}

*Create a vBridge in the VTN 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges.json
|}

*Create two Interfaces into the vBridge 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|}

*Get the list of logical ports configured
{|class = "wikitable"
|-
|curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8080/vtn-webapi/controllers/controllerone/domains/\(DEFAULT\)/logical_ports.json
|}

*Configure two mappings on the interfaces 
{|class = "wikitable"
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:03-s3-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-OF:00:00:00:00:00:00:00:02-s2-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json
|}

*Send packets from Host1 to Host3
{|class = "wikitable"
|-
|mininet> h1 ping h3
|}

Refer to [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:L2 Network Example Using VTN Virtualization|Examples]] for multi controller scenarios and illustrations with images.

=Command Line Interface=
NA

=Programmatic Interface(s)=


All the below API's are supported in VTN Coordinator.

==API's for OpenDaylight Controller Virtualization for VTN Coordinator==
The below VTN API can be configured for OpenDayLight Controller.

* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:API Version Function|API Version function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VTN Functions|VTN functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Functions|vBridge Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VLAN Map Functions|VLAN Map Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Interface Functions|vBridge Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Interface Port Map Functions|vBridge Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Physical Controller Functions|Physical Controller Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Switch Functions|Physical Switch functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Port Functions|Physical Port function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:Physical Link Function|Physical Link function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Domain Functions|Physical Domain functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Logical Port Function|Logical Port function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Boundary Functions|Physical Boundary functions]]<br>

==Additional API's for VTN Coordinator==
The below API's are supported in VTN Coordinator, the implementations to configure these API in OpenDayLight will be done in subsequent releases.
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:API Version Function|API Version function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Coordinator Version Functions|Coordinator Version Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Flow List Functions|Flow List functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:Flow List Entry Functions|Flow List Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:VTN Station Functions|VTN Station functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VTN Functions|VTN functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:VTN Flow Filter Functions|VTN Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:VTN Flow Filter Entry functions|VTN Flow Filter Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Functions|vBridge Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Host Address Functions|Host Address functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:L2 Domain Function|L2 Domain function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:MAC Entry Function|MAC Entry function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VLAN Map Functions|VLAN Map Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Flow Filter Functions|vBridge Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Flow Filter Entry Functions|vBridge Flow Filter Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Interface Functions|vBridge Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: vBridge Interface Port Map Functions|vBridge Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Interface Flow Filter Functions|vBridge Interface Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBridge Interface Flow Filter Entry Functions|vBridge Interface Flow Filter Entry Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter functions|vRouter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:Static IP Route Functions|Static IP Route functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:IP Routes Function|IP Routes function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:ARP Entry Functions|ARP Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:DHCP Relay Status Functions|DHCP Relay Status functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:DHCP Relay Interface Functions|DHCP Relay Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:DHCP Relay Server Functions|DHCP Relay Server functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter Interface Functions|vRouter Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter Interface Flow Filter functions|vRouter Interface Flow Filter functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vRouter Interface Flow Filter Entry functions|vRouter Interface Flow Filter Entry functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBypass Functions|vBypass functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:vBypass Interface Functions|vBypass Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Functions|vTep functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Interface Functions|vTep Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Interface Port Map Functions|vTep Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTep Group Functions|vTep Group functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTunnel Functions|vTunnel functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTunnel Interface Functions|vTunnel Interface functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vTunnel Interface Port Map functions|vTunnel Interface Port Map functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:vLink Functions|vLink functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Physical Controller Functions|Physical Controller Functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Switch Functions|Physical Switch functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Port Functions|Physical Port function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTNCoordinator:RestApi:Physical Link Function|Physical Link function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Domain Functions|Physical Domain functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Logical Port Function|Logical Port function]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Physical Boundary Functions|Physical Boundary functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi:Configuration Functions|Configuration functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: Session Functions|Session functions]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: User Function|User function]]<br>


[[Category:OpenDaylight Virtual Tenant Network]]
