=Welcome to CrossProject OpenDaylight Security Analysis Page=

== Introduction ==

The OpenDaylight Security analysis team is documenting what security features are present in OpenDaylight  today. In addition, the team will provide recommendations for enhancements of security measures.

That work is being tracked in a google doc  [https://docs.google.com/file/d/0B0uv-t-C0LQoYlJWbl9icXR6V2M/edit here].

===OpenDaylight Controller Security ===

==== Overall Controller Security ====
Controllers can  theoretically  be used  to  do  anything,  hence their compromise  could  have  potentially endless  threat implications.  First  and foremost,  controllers,  need  to  be secure,  both  physically  and  logically. This  will  require  the  controller technology,  itself,  to  mature  from  a security  standpoint,  as  well  as  IT personnel  taking  precautionary measures during deployments.  

Security to controller occurs at multiple layers. The following sections capture what exists on OpenDayLight controller today and recommendations to increase security at different layers.

==== Controller Load/Runtime ====

The current unit of OpenDaylight deployment is OSGi bundles. Bundles provide some level of isolation with explicit code boundaries and package import/exports.  The recommendation is to augment this at load time with bundle signature verifiers and at runtime with bundle/application access security. In addition, the OSGi based runtime which provides a container should not open any security loopholes. 

===== Bundle/Application Security   =====

Recommendations for the bundle/application security requirements
#Application bundle insertion authorization: Bundle that can be deployed should come only from trusted, verifiable sources. The bundle must be authenticated/authorized and any changes to those applications must be identified and validated. 
#Post activation application bundle resource authorization: Other components that bundle can communicate with. Are they authorized? What data in the URI tree can be accessed? Does the bundle have access to program flow to the network? For example, multiple applications in the OpenDaylight controller may introduce conflicts in the flow tables. Therefore, verification of policy compliance is required to address these issues.

===== OSGi runtime container security - OpenDaylight Apache Karaf Distribution =====

Apache Karaf is being considered as the OSGi runtime container environment. During the April 28, 2014 Tech Work Stream conference call concern was expressed regarding the security footprint deploying ODL into Karaf represents. The following key areas were discussed:
* Karaf's Remote Shutdown Port.
* SSHD default presence.
* Webconsole access.
* External JMX connectivity.
These remote management capabilities are present in Apache Karaf by default, however they can be disable via various configuration alterations. These configuration options may be applied during the construction of the ODL-Karaf distribution. Alternatively, ODL wikidocs may provide guidance and/or links to external documentation to allow users to lock down their deployment post installation. 

Apache Karaf does provide various runtime security features that should become familiar to OpenDaylight developers and administrator. General security documentation at Karaf can be found  [http://karaf.apache.org/manual/latest/users-guide/security.html here]. 

Further security advice can be found in the links below:
* Role based JMX administration is discussed [http://karaf.apache.org/manual/latest/users-guide/monitoring.html here]. 
* Remote SSH access configuration is discussed [http://karaf.apache.org/manual/latest/users-guide/remote.html here]. 
* WebConsole access is discussed [http://karaf.apache.org/manual/latest/users-guide/webconsole.html here].

Disablement of the remote shutdown port can be accomplished via the following:
Set karaf.shutdown.port=-1 in etc/custom.properties or etc/config.properties

==== OpenDaylight Controller’s  Plugins Security ====

The document [https://docs.google.com/presentation/d/1df-GMYVe1zGEU6DgKzFQ3xeceicqcGNRRsT5l5QNd_E/edit?pli=1#slide=id.g26bf015a9_2_42 here] captures the existing northbound and southbound plugins. These plugins should provide secure communication access to the controller. The following table captures the state of the plugins.

{| class="wikitable"
|-
!  Plugins 
! Existing Security 
! Recommendations     
|- align="right"
| align="left" | RESTCONF 
| HTTPS
| align="left" | 

|- align="right"
| align="left" | Neutron
| HTTP
| align="left" | HTTPS

|- align="right"
| align="left" | VTN Coordinator
| HTTP
| align="left" | HTTPS

|- align="right"
| align="left" | D4A Protection
| HTTP
| align="left" | HTTPS

|- align="right"
| align="left" | GUI
| HTTPS 
| align="left" | 

|- align="right"
| align="left" | OpenDove
| HTTP
| align="left" | HTTPS

|- align="right"
| align="left" | BGP-LS/PCEP
| TCP
| align="left" | TCP-MD5, TLS

|- align="right"
| align="left" | NETCONF
| ssh
| align="left" | 

|- align="right"
| align="left" | OpenFlow 1.0/1.3 (openflowjava)
| TCP
| align="left" | TLS

|- align="right"
| align="left" | OpenFlow 1.0 (openflowj)
| TLS
| align="left" | 

|- align="right"
| align="left" | OVSDB
| TCP
| align="left" | TLS

|- align="right"
| align="left" | SNMP
| SNMP v2
| align="left" | SNMP v3

|- align="right"
| align="left" | LISP
| Encrypted Map Request / Map Reply
| align="left" | 

|}


General recommendation for the plugins is as follows
*Utilize a common crypto key storage
*Support a pluggable or built-in certificate authority

==== Authorization of External Users ====

From security standpoint, direct access needs  to be restricted; who and how users can interact  with  controllers  needs  to  be clearly defined (best practice dictates access should be limited to only those admins who absolutely need it and be authenticated and logged). Although OpenDaylight supports secure communication access via the northbound APIs, it is desirable to further harden the security by providing role based access control for the external users. The recommendations for the security requirements are

#Access protocol authorization: e.g. A user can only access via HTTPS
#Resource Authorization: e.g. What data in the URI tree can the user config/view
#Logging access/authorization: Useful for incident response analysis.

==== Device/Forwarding Elements BootStrap, Authentication and Authorization ====

Today, the discovery of OpenDaylight controller and devices it controls is manual.  For example, in the case of OpenFlow, the devices/switches have to be configured with the controller’s IP address. It is desirable to automatically and securely bring up integrated set of network devices and controllers.

The following is the recommendation to support the zero touch bootstrap requirements
*Controller automatically discovers devices, assigns IP address and establishes secure IP connectivity. If routing is required to reach the devices, the routing is also automatically established.
*Controller has the ability to authenticate and authorize against a device registry.
*For the devices to participate in the automatic bootstrap, the devices should require minimal bootstrap software.
*A southbound log plugin should be added to capture bootstrap log information from the devices. This log information would be useful to correlate for incident response.

==== Availability ====
Another issue regarding the security of controller is its availability. Meaning that if the controller goes down for some reason (for example because of a DDoS attack), so goes the network. As such, the high availability (clustering) feature of the controller is extremely important. 

==== Policy Enforcement ====
There is need for a policy framework so that if a change is made, its compliance to the general policy be verified. 

==== Incident Response ====
There must be tools for log analysis and event correlation. When an incident happens, we must be able to review all the information collectively to be able to answer the who, what, when, where, and why's of an attack. As the log grows fast, it soon becomes a data issue. Therefore, proper tools are essential to address forensic and compliance issues

====Security Mechanism ====
Security mechanisms such as firewall play an essential role for securing the SDN infrastructure. For instance in Floodlight controller, a firewall application has been implemented as a Floodlight Module that enforces ACL rules (Access Control List) on OpenFlow enabled switches in the network using flows and by monitoring packet-in behavior. ACL rules here are just sets of conditions that permit or allow or deny a traffic flow at its ingress switch.

http://www.openflowhub.org/display/floodlightcontroller/Firewall+(Dev)

==== Vulnerability Analysis ====
Similar to any sevice or infrastructure, performing vulnerability analysis for opendaylight controller is a best practice to pin-point the security flaws that could be exploited by attackers. As such, it is recommended to explore the state of the art in attacks on SDN controllers and try to regenerate the same attacks if possible for opendaylight controller in particular. It will give us clear understanding of the current security flawas and vulnerabilities.
 

PS: Material are borrowed in part from a article written by Sarah Sorensen titled "Security Implications of Software‐Defined Networks".

== Meeting Notes ==

===May 2, 2014===

[http://meetings.opendaylight.org/opendaylight-meeting/2014/security_analysis_team__introductory_meeting_/opendaylight-meeting-security_analysis_team__introductory_meeting_.2014-05-02-15.06.html Minutes]

[http://meetings.opendaylight.org/opendaylight-meeting/2014/security_analysis_team__introductory_meeting_/opendaylight-meeting-security_analysis_team__introductory_meeting_.2014-05-02-15.06.txt Minutes (text)]

[http://meetings.opendaylight.org/opendaylight-meeting/2014/security_analysis_team__introductory_meeting_/opendaylight-meeting-security_analysis_team__introductory_meeting_.2014-05-02-15.06.log.html Log]

[[Category:OpenDaylight Security Analysis]]
