== Introduction ==

This section outlines the guidelines required in creating and maintaining Apache Karaf feature files for your projects for use with OpenDaylight's Karaf-based distribution.

== About Features ==

A feature contains a list of bundles or sub-features that acts as an atomically installable unit. Features can be either downloaded online from the Maven repository or offline via a localized distribution or installable .kar artifacts. 

== Feature Best Practices ==

This section outlines some best practices in naming conventions, location and versioning for your feature files.

== Naming Convention ==

To follow the current naming convention best practices the feature names should follow the following format:

'''odl-<projectname>-<featurename>'''

The odl prefix is necessary to differentiate ODL specific features from any other thirdparty installable features available to karaf. The project name helps identify rapidly which project is providing this feature and finally the featurename identifies

== Versioning ==

Feature versioning should follow semantic versioning practices which is important for any external component depending on this features. As such versioning should follow : <major>.<minor>.<micro>.

* A major version increase means that backward compatibility is no longer being provided and that there is a major change in the API or architecture.
* A minor version increase means that additional functionality is available but not breaking backward compatibility.
* A micro version increase means a bugfix, patch or other changes to the feature that doesn't imply a new functionality.

Feature versioning doesn't need to follow the bundle versioning and represents the high-level version of this atomic unit. However where applicable it is recommended to follow the bundle versioning if these bundle are all linked together to provide a component-level functionality.

== Granularity ==


== Component Meta-Features ==

If the project provides multiple features provide component-level meta-features should be provided to provide easy and quick component-level installation of the feature. This meta-feature will only contain other features that should be logically grouped to provide an easy way for other projects to specify their dependency.  This is especially useful when a feature can have different implementation options off a different core and allows projects to specify and quickly import the correct 'stack'.

An example meta-feature.
<pre>
  <feature name="odl-adsal-all" description="OpenDaylight AD-SAL All Features" version="${sal.version}">
      <feature version="${sal.version}">odl-adsal-core</feature>
      <feature version="${sal.networkconfiguration.version}">odl-adsal-networkconfiguration</feature>
      <feature version="${sal.connection.version}">odl-adsal-connection</feature>
      <feature version="${clustering.services.version}">odl-adsal-clustering</feature>
      <feature version="${configuration.version}">odl-adsal-configuration</feature>
   </feature>
</pre>

It is customary to create a feature with a '''-all''' suffix to provide a way to quickly install all related features.

== Sample Project Feature ==

<pre>
<?xml version="1.0" encoding="UTF-8"?>
<features name="openflowplugin-${project.version}" xmlns="http://karaf.apache.org/xmlns/features/v1.2.0"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://karaf.apache.org/xmlns/features/v1.2.0 http://karaf.apache.org/xmlns/features/v1.2.0">
    <feature name='odl-openflowplugin' description="OpenDaylight :: Openflow Plugin :: Plugin" version='${project.version}'>
        <feature version="${mdsal.version}">odl-mdsal-all</feature>
        <feature version="${openflowjava.version}">odl-openflowjava</feature>
        <bundle>mvn:org.opendaylight.openflowplugin/openflowplugin/${project.version}</bundle>
    </feature>
</features>
</pre>
