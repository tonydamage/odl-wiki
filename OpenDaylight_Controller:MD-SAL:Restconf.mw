== How to use Restconf ==
==== Overview before operations ====
Restconf allows access to datastores locating in controller. There are two datastores: 
* '''Config''' – TODO add description
* '''Operational''' – TODO add description<br />
<br />
Each request must start with URI '''<nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf'''
: <tt><controllerIP></tt> - IP address of controller
: Restconf listens on port '''8080''' for http requests
: URI starts with '''/restconf'''
<br />
Restconf supports '''OPTIONS, GET, PUT, POST, DELETE''' operations. Request and response '''data can be in XML or JSON''' format. Data in request must have correctly set “'''Content-Type'''” field in header with allowed media type and media type of requested data has to be set in “'''Accept'''” field in header.
<br />
We will use <tt><identifier></tt> in explanation of operations.
<br />
: <tt><identifier></tt>
::* must start with '''<tt><moduleName></tt>:<tt><nodeName></tt>''' where '''<tt><moduleName></tt>''' is a name of module and '''<tt><nodeName></tt>''' is a name of node in the module. It is sufficient use just '''<tt><nodeName></tt>''' after '''<tt><moduleName></tt>:<tt><nodeName></tt>'''. Each '''<tt><nodeName></tt>''' has to be separated by '''/'''
::* '''<tt><nodeName></tt>''' can represent node which is list or container yang build-in type. If node is list there must be defined keys of the list behind the node name e.g. '''<tt><nodeName>/<valueOfKey1>/<valueOfKey2></tt>'''
::* Format '''<tt><moduleName></tt>:<tt><nodeName></tt>''' has to be used in this case as well:
::: Module A has node A1. Module B augments node A1 by adding node X. Module C augments node A1 by adding node X. Then for clarification there has to be known which node X is thought (e.g. C:X).
: '''Mount point'''
:* Node can be behind mount point. In this case URI has to be in format '''<tt><identifier></tt>/yang-ext:mount/<tt><identifier></tt>'''. The first '''<tt><identifier></tt>''' is path to a mount point and the second '''<tt><identifier></tt>''' is path to a node behind the mount point. URI can end in mount point itself by using '''<tt><identifier></tt>/yang-ext:mount'''
<br />
<br />
==== OPTIONS <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf ====
:* returns XML description of resources with required request and response media types in Web Application Description Language (WADL)
<br />
==== GET <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf/config/<tt><identifier></tt> ====
:* returns data about node from Config datastore
<br />
==== GET <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf/operational/<tt><identifier></tt> ====
:* returns data about node from Operational datastore
<br />
==== PUT <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf/config/<tt><identifier></tt> ====
:* updates or creates data in the Config datastore and returns state about success
:* <tt><identifier></tt> points to a node which should be stored
: Example:
<pre>
PUT http://<controllerIP>:8080/restconf/config/module1:foo/bar
Content-Type: applicaton/xml
<bar>
  …
</bar>
</pre>
: Example with mount point: 
<pre>
PUT http://<controllerIP>:8080/restconf/config/module1:foo1/foo2/yang-ext:mount/module2:foo/bar
Content-Type: applicaton/xml
<bar>
  …
</bar>
</pre>
<br />
==== POST <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf/config/<tt><identifier></tt> ====
:* creates data if they do not exist in the Config datastore and returns state about success
:* <tt><identifier></tt> points to a node where data should be stored
:* root element of data must have namespace (data are in XML) or module name (data are in JSON)
: Example:
<pre>
POST http://<controllerIP:8080/restconf/config/module1:foo
Content-Type: applicaton/xml
<bar xmlns=“module1namespace”>
  …
</bar>
</pre>
: Example with mount point:
<pre>
http://<controllerIP:8080/restconf/config/module1:foo1/foo2/yang-ext:mount/module2:foo
Content-Type: applicaton/xml
<bar xmlns=“module2namespace”>
  …
</bar>
</pre>
<br />
==== POST <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf/operations/<tt><moduleName></tt>:<tt><rpcName></tt> ====
:* invokes RPC
:* <tt><moduleName></tt>:<tt><rpcName></tt> - <tt><moduleName></tt> is name of module and <tt><rpcName></tt> is name of RPC in this module
:* Root element of data sent to RPC must have name “input”
:* Result can be status code or retrieved data having root element “output”
: Example:
<pre>
POST http://<controllerIP:8080/restconf/config/module1:fooRpc
Content-Type: applicaton/xml
Accept: applicaton/xml
<input>
  …
</input>

Answer could be:
<output>
  …
</output>
</pre>
<br />
==== DELETE <nowiki>http://</nowiki><tt><controllerIP></tt>:8080/restconf/config/<identifier> ====
:* removes data in the Config datastore and returns state about success
:* <tt><identifier></tt> points to a node which should be removed.
<br />
<br />
Restconf uses these contracts from MD–SAL:
* '''ConsumerSession''' is used for invoking RPCs.
* '''DataBrokerService''' offers manipulation with transactions and reading data from datastores. 
* '''SchemaContext''' holds informations about yang modules which are in controller. 
* '''MountService''' returns MountInstance based on InstanceIdentifier pointing to a mount point. MountInstace contains SchemaContext behind mount point.
<br />

== How it works ==
