= 4.   Threads =

Library uses Netty’s threads provided by
EventLoop for processing received messages. One thread per channel. Threads are
used even for further processing until they are released. The sooner the input
/ output thread is released, the sooner the library starts to process new
message.

  
= 5.   Generation of sources =
  
The OpenFlow Protocol Library uses YANG
modeling language for generation of immutable objects. Yang processing classes
are provided by yangtools project (see pom.xml in openflow-protocol-api
project). Objects are generated from yang files located in ‘src/main/yang’
folder. To generate sources it is enough to run ‘mvn clean compile’. Generated
files will be placed into ‘target/generated-sources/sal’ folder (this is
current setup). You can see the structure and description of used yang files
below.

 
[[Image:image015.png]]

 
YANG
files under openflow-protocol-api project

  
Files:

 
- 
openflow-action – defines
base OpenFlow actions

 
- 
openflow-augments – contains
all used augmentations

 
- 
openflow-extensible-match – defines
OpenFlow OXM match

 
- 
openflow-instruction –
defines base OpenFlow instructions

 
- 
openflow-protocol – defines
OpenFlow Protocol messages

 
- 
openflow-types – defines
common OpenFlow specific types

 
- 
system-notifications – defines library’s system notifications

 
Augments are used in following structures:

 
- 
MatchEntries

 
- 
Action

 
- 
TableFeatureProperties

 
- 
Instructions

 
- 
QueueProperty

 
Example usage of augmentation (for
ofp_instruction in OpenFlow v1.3):

 
InstructionBuilder
instructionBuilder = new InstructionBuilder(); instructionBuilder.setType(GotoTable.'''class''');

 
TableIdInstructionBuilder tableBuilder = '''new'''
TableIdInstructionBuilder();

 
tableBuilder.setTableId(value);

 
builder.addAugmentation(TableIdInstruction.'''class''',
tableBuilder.build()); instructionBuilder.addAugmentation(augmentationType,
augmentation);

  
= 6.   Extensibility =
  
== 6.1   Extending the Openflow Library ==
  
Entry point for the extensibility is SwitchConnectionProvider.
SwitchConnectionProvider contains methods for (de)serializer registration. To
register deserializer it is needed to use .registerCustomDeserializer(key, impl).
To register serializer one must use .registerCustomSerializer(key, impl).
Registration can occur either during configuration or at runtime.

 
Impl is (de)serializer implementation and
must implement OFGeneralDeserializer / OFGeneralSerializer interface. These
interfaces are only empty unifying interfaces. Therefore it is needed to use their descendants that contain appropriate
methods.

  
=== 6.1.1    Deserializers ===
 
<u>OFGeneralDeserializer:</u>

 
- 
'''OFDeserializer&lt;E
extends DataObject&gt;'''

 
- 
''deserialize(ByteBuf)''
– deserializes given ByteBuf

 
- 
'''HeaderDeserializer&lt;E
extends DataObject&gt;'''

 
- 
''deserializeHeaders(ByteBuf)''
– deserializes only E headers (used in Multipart TableFeatures messages)

 
'''DeserializerRegistryInjector'''
– ''injectDeserializerRegistry(DeserializerRegistry)''
– injects deserializer registry into deserializer. Useful when custom
deserializer needs access to other deserializers.

 
DeserializerRegistryInjector is not OFGeneralDeserializer
descendand.

 
There are three vendor specific extensions in
Openflow v1.0. These shall be identified by MessageCodeKey with version, value
and object class from the table below:

 
<div  align="center">                          
{| border="1"
|-
| 
'''Message
type'''

 
| 
'''version'''

 
| 
'''value'''

 
| 
'''Object
class'''

 
|-
| 
vendor message

 
| 
1

 
| 
4

 
| 
ExperimenterMessage.class

 
|-
| 
vendor action

 
| 
1

 
| 
0xFFFF

 
| 
ExperimenterAction.class

 
|-
| 
stats message (OFPST_VENDOR)

 
| 
TBD

 
| 
TBD

 
| 
TBD

 
|} 
</div>  
There are nine experimenter
specific extensions in Openflow v1.3. Below you can find list of these
extensions and keys to be used for registration:

 
<div  align="center">                                                                        
{| border="1"
|-
| 
'''Experimenter'''

 
| 
'''version'''

 
| 
'''value'''

 
| 
'''value2'''

 
| 
'''Object
class'''

 
|-
| 
message

 
| 
4

 
| 
4

 
| 
-

 
| 
ExperimenterMessage.class

 
|-
| 
match entry

 
| 
4

 
| 
oxm_class

 
| 
oxm_field

 
| 
MatchEntries.class

 
|-
| 
action

 
| 
4

 
| 
0xFFFF

 
| 
-

 
| 
ExperimenterAction.class

 
|-
| 
instruction

 
| 
4

 
| 
0xFFFF

 
| 
-

 
| 
ExperimenterInstruction.class

 
|-
| 
multipart

 
| 
TBD

 
|  
|  
|  
|-
| 
Multipart -table features

 
| 
TBD

 
|  
|  
|  
|-
| 
meter band type

 
| 
TBD

 
|  
|  
|  
|-
| 
queue property

 
| 
TBD

 
|  
|  
|  
|-
| 
error

 
| 
TBD

 
|  
|  
|  
|} 
</div>  
In case when more
distinguishers are needed, use EnhancedMessageCodeKey instead of
MessageCodeKey.

  
=== 6.1.2    Serializers ===
 
= 7.   OFGeneralSerializer: =
 
- 
'''OFSerializer&lt;E
extends DataObject&gt;'''

 
- 
''serialize(E,
ByteBuf)'' – serializes E into given ByteBuf

 
- 
'''HeaderSerializer&lt;E
extends DataObject&gt;'''

 
- 
''serializeHeaders(E,
ByteBuf)'' – serializes E headers (used in Multipart
TableFeatures messages)

 
'''SerializerRegistryInjector'''
– ''injectSerializerRegistry(SerializerRegistry)''
– injects serializer registry into serializer. Useful when custom serializer
needs access to other serializers.

 
SerializerRegistryInjector
is not OFGeneralSerializer descendand.

 
There are three vendor specific extensions in
Openflow v1.0. These shall be identified by MessageTypeKey with version and
msgType class from the table below:

  
<div  align="center">                      
{| border="1"
|-
| 
'''Message
type'''

 
| 
'''version'''

 
| 
'''msgType
(DTO class)'''

 
|-
| 
vendor message

 
| 
1

 
| 
ExperimenterMessage.class

 
|-
| 
vendor action

 
| 
1

 
| 
ExperimenterAction.class

 
|-
| 
stats message (OFPST_VENDOR)

 
| 
TBD

 
| 
TBD

 
|} 
</div>  
There are nine experimenter
specific extensions in Openflow v1.3. Below you can find list of these
extensions and keys to be used for registration:

                                                              
{| border="1"
|-
| 
'''Experimenter'''

 
| 
'''version'''

 
| 
'''msgType'''

 
| 
'''msgType2'''

 
|-
| 
message

 
| 
4

 
| 
ExperimenterMessage.class

 
| 
-

 
|-
| 
match entry

 
| 
4

 
| 
$OXM_CLASS.class

 
| 
$OXM_FIELD.class

 
|-
| 
action

 
| 
4

 
| 
ExperimenterAction.class

 
| 
-

 
|-
| 
instruction

 
| 
4

 
| 
ExperimenterInstruction.class

 
| 
-

 
|-
| 
multipart

 
| 
TBD

 
|  
|  
|-
| 
Multipart -table features

 
| 
TBD

 
|  
|  
|-
| 
meter band type

 
| 
TBD

 
|  
|  
|-
| 
queue property

 
| 
TBD

 
|  
|  
|-
| 
error

 
| 
TBD

 
|  
|  
|}  
In case when more
distinguishers are needed, use EnhancedMessageTypeKey instead of MessageTypeKey.

  
== 7.1   Detailed description ==
  
=== 7.1.1    SwitchConnectionProvider ===
 
SwitchConnectionProvider constructs and
initializes both deserializer and serializer registries with default
(de)serializers. It also injects the DeserializerRegistry into the
DeserializationFactory, the SerializerRegistry into the SerializationFactory.

 
When call to register custom (de)serializer
is made, SwitchConnectionProvider calls register method on appropriate registry.

 
=== 7.1.2    DeserializerRegistry / SerializerRegistry ===
 
Both registries contain init() method to
initialize default (de)serializers.

 
Registration checks if key or (de)serializer
implementation are not null. If at least one of the is null,
NullPointerException is thrown. Else the (de)serializer implementation is
checked if it is (De)SerializerRegistryInjector instance. If it is an instance
of this interface, the registry is injected into this (de)serializer
implementation.

 
GetSerializer(key) or GetDeserializer(key)
performs registry lookup. Because there are two separate interfaces that might
be put into the registry, the registry uses their unifying super interface.
Get(De)Serializer(key) method casts the super interface to desired type. There
is also a null check for the (de)serializer received from the registry. If the
deserializer wasn’t found, NullPointerException with key description is thrown.

 
=== 7.1.3    MessageTypeKey and EnhancedMessageTypeKey ===
 
These keys are used as for serializer
lookup in SerializerRegistry. MessageTypeKey should be used in general, when it
is enough to identify corresponding serializer by only its DTO class. MessageTypeKey
has these fields:

 
- 
short version – Openflow wire
version number

 
- 
Class&lt;E&gt; msgType – DTO
class

 
EnhancedMessageTypeKey
extends MessageTypeKey and has one more field:

 
- 
msgType2 – specific class of
msgType

 
Enhanced

 
= 8.   Message specifications =
  
== 8.1   OF 1.0 and OF 1.3 message differencesfsdfgf ==
 
There
are differences between OF 1.0 and OF 1.3 messages (for example the ofp_match
structure is completely different). These differences are handled by using
additional fields in generated DTOs.

 
For
example:

 
Packet-in
message in OF 1.0 (see structure below) would have in_port field set and
table_id, cookie, match fields empty (null). The packet-in message in OF 1.3
would be the opposite.

  
[[Image:image016.png]]

 
Packet-in
message in OF 1.0

  
[[Image:image017.png]]

 
Packet-in
message in OF 1.3

  
== 8.2   OF 1.0 Vendor and Stats messages DTOs ==
 
Vendor messages are represented as
ExperimenterMessage/ExperimenterInput objects (as the messages were renamed in
the OF 1.3 version). Similarly Stats messages use
MultipartReplyMessage/MultipartRequestInput objects.

 
== 8.3   Using supertypes (higher types) ==
 
Values
used for communication with switch are represented as unsigned values. Java
uses signed values - which can store only a half of unsigned (positive) values.
To ensure that correct values are (de)serialized, the values are set into
supertypes (higher types). For example uint32 is represented as Long, uint16 as
Integer and so on.

  
== 8.4   Signed int to unsigned long conversion and vice versa ==
 
There
are cases when we need to convert signed integer into unsigned long. For
example the ofp_port_no (special port values in OF 1.3). Yang generates enums
with .getIntValue() method. Special values (like 0xffffffff) would be
represented as negative integers. For this purpose it is needed to use
BinContent class. It is located in openflow-protocol-api project, under
src/main/java/*.util package. This class does the translation into unsigned
value. BinContent also provides method for the opposite case.

  
== 8.5   Augmentation tables ==
 
Tables below show which augmentations are
used for match, instruction, action, table features and queue properties.

  
<div  align="center">                                                                                                                                                                      
{| border="1"
|-
| 
'''Match
field'''

 
| 
'''Augmentation'''

 
|-
| 
In_Port

 
| 
PortNumberMatchEntry

 
|-
| 
In_Phy_Port

 
| 
PortNumberMatchEntry

 
|-
| 
Metadata

 
| 
MetadataMatchEntry,
MaskMatchEntry

 
|-
| 
Eth_Dst

 
| 
MacAddressMatchEntry,
MaskMatchEntry

 
|-
| 
Eth_Src

 
| 
MacAddressMatchEntry,
MaskMatchEntry

 
|-
| 
Eth_Type

 
| 
EthTypeMatchEntry

 
|-
| 
Vlan_Vid

 
| 
VlanVidMatchEntry,
MaskMatchEntry

 
|-
| 
Vlan_Pcp

 
| 
VlanPcpMatchEntry

 
|-
| 
Ip_Dscp

 
| 
DscpMatchEntry

 
|-
| 
Ip_Ecn

 
| 
EcnMatchEntry

 
|-
| 
Ip_Proto

 
| 
PortNumberMatchEntry

 
|-
| 
Ipv4_Src

 
| 
Ipv4AddressMatchEntry,
MaskMatchEntry

 
|-
| 
Ipv4_Dst

 
| 
Ipv4AddressMatchEntry,
MaskMatchEntry

 
|-
| 
Tcp_Src

 
| 
PortMatchEntry

 
|-
| 
Tcp_Dst

 
| 
PortMatchEntry

 
|-
| 
Udp_Src

 
| 
PortMatchEntry

 
|-
| 
Udp_Dst

 
| 
PortMatchEntry

 
|-
| 
Sctp_Src

 
| 
PortMatchEntry

 
|-
| 
Sctp_Dst

 
| 
PortMatchEntry

 
|-
| 
Icmpv4_Type

 
| 
Icmpv4TypeMatchEntry

 
|-
| 
Icmpv4_Code

 
| 
Icmpv4CodeMatchEntry

 
|-
| 
Arp_Op

 
| 
OpCodeMatchEntry

 
|-
| 
Arp_Spa

 
| 
Ipv4AddressMatchEntry,
MaskMatchEntry

 
|-
| 
Arp_Tpa

 
| 
Ipv4AddressMatchEntry,
MaskMatchEntry

 
|-
| 
Arp_Sha

 
| 
MacAddressMatchEntry,
MaskMatchEntry

 
|-
| 
Arp_Tha

 
| 
MacAddressMatchEntry,
MaskMatchEntry

 
|-
| 
Ipv6_Src

 
| 
Ipv6AddressMatchEntry,
MaskMatchEntry

 
|-
| 
Ipv6_Dst

 
| 
Ipv6AddressMatchEntry,
MaskMatchEntry

 
|-
| 
Ipv6_Flabel

 
| 
Ipv6FlabelMatchEntry,
MaskMatchEntry

 
|-
| 
Icmpv6_Type

 
| 
Icmpv6TypeMatchEntry

 
|-
| 
Icmpv6_Code

 
| 
Icmpv6CodeMatchEntry

 
|-
| 
Ipv6_Nd_Target

 
| 
Ipv6AddressMatchEntry

 
|-
| 
Ipv6_Nd_Sll

 
| 
MacAddressMatchEntry

 
|-
| 
Ipv6_Nd_Tll

 
| 
MacAddressMatchEntry

 
|-
| 
Mpls_Label

 
| 
MplsLabelMatchEntry

 
|-
| 
Mpls_Tc

 
| 
TcMatchEntry

 
|-
| 
Mpls_Bos

 
| 
BosMatchEntry

 
|-
| 
Pbb_Isid

 
| 
IsidMatchEntry,
MaskMatchEntry

 
|-
| 
Tunnel_Id

 
| 
MetadataMatchEntry,
MaskMatchEntry

 
|-
| 
Ipv6_Exthdr

 
| 
PseudoFieldMatchEntry,
MaskMatchEntry

 
|} 
</div> 
MatchEntries
(oxm_fields) augmentations table (OF 1.3)

 
*MaskMatchEntry
is present only if the mask is provided and hasMask flag is true

  
<div  align="center">                              
{| border="1"
|-
| 
'''Instruction
type'''

 
| 
'''Augmentation'''

 
|-
| 
Goto_Table

 
| 
TableIdInstruction

 
|-
| 
Write_Metadata

 
| 
MetadataInstruction

 
|-
| 
Write_Actions

 
| 
ActionsInstruction

 
|-
| 
Apply_Actions

 
| 
ActionsInstruction

 
|-
| 
Clear_Actions

 
| 
ActionsInstruction

 
|-
| 
Meter

 
| 
MeterIdInstruction

 
|} 
</div> 
Instructions
augmentations table (OF 1.3)

  
<div  align="center">                                                      
{| border="1"
|-
| 
'''Action
type'''

 
| 
'''Augmentation'''

 
|-
| 
Output

 
| 
PortAction,
MaxLengthAction

 
|-
| 
Set_Vlan_Vid

 
| 
VlanVidAction

 
|-
| 
Set_Vlan_Pcp

 
| 
VlanPcpAction

 
|-
| 
Strip_Vlan

 
| 
-

 
|-
| 
Set_Dl_Src

 
| 
DlAddressAction

 
|-
| 
Set_Dl_Dst

 
| 
DlAddressAction

 
|-
| 
Set_Nw_Src

 
| 
IpAddressAction

 
|-
| 
Set_Nw_Dst

 
| 
IpAddressAction

 
|-
| 
Set_Nw_Tos

 
| 
NwTosAction

 
|-
| 
Set_Tp_Src

 
| 
PortAction

 
|-
| 
Set_Tp_Dst

 
| 
PortAction

 
|-
| 
Enqueue

 
| 
PortAction,
QueueIdAction

 
|} 
</div> 
Actions
augmentations table (OF 1.0)

    
<div  align="center">                                                                      
{| border="1"
|-
| 
'''Action
type'''

 
| 
'''Augmentation'''

 
|-
| 
Output

 
| 
PortAction,
MaxLengthAction

 
|-
| 
Copy_Ttl_Out

 
| 
-

 
|-
| 
Copy_Ttl_In

 
| 
-

 
|-
| 
Set_Mpls_Ttl

 
| 
MplsTtlAction

 
|-
| 
Dec_Mpls_Ttl

 
| 
-

 
|-
| 
Push_Vlan

 
| 
EthertypeAction

 
|-
| 
Pop_Vlan

 
| 
-

 
|-
| 
Push_Mpls

 
| 
EthertypeAction

 
|-
| 
Pop_Mpls

 
| 
EthertypeAction

 
|-
| 
Set_Queue

 
| 
QueueIdAction

 
|-
| 
Group

 
| 
GroupIdAction

 
|-
| 
Set_Nw_Ttl

 
| 
NwTtlAction

 
|-
| 
Dec_Nw_Ttl

 
| 
-

 
|-
| 
Set_Field

 
| 
OxmFieldsAction

 
|-
| 
Push_Pbb

 
| 
EthertypeAction

 
|-
| 
Pop_Pbb

 
| 
-

 
|} 
</div> 
Actions
augmentations table (OF 1.3)

  
<div  align="center">                                                              
{| border="1"
|-
| 
'''TableFeatureProperty
type'''

 
| 
'''Augmentation'''

 
|-
| 
Instructions

 
| 
InstructionRelatedTableFeatureProperty

 
|-
| 
Instructions_Miss

 
| 
InstructionRelatedTableFeatureProperty

 
|-
| 
Next_Tables

 
| 
NextTableRelatedTableFeatureProperty

 
|-
| 
Next_Tables_Miss

 
| 
NextTableRelatedTableFeatureProperty

 
|-
| 
Write_Actions

 
| 
ActionRelatedTableFeatureProperty

 
|-
| 
Write_Actions_Miss

 
| 
ActionRelatedTableFeatureProperty

 
|-
| 
Apply_Actions

 
| 
ActionRelatedTableFeatureProperty

 
|-
| 
Apply_Actions_Miss

 
| 
ActionRelatedTableFeatureProperty

 
|-
| 
Match

 
| 
OxmRelatedTableFeatureProperty

 
|-
| 
Wildcards

 
| 
OxmRelatedTableFeatureProperty

 
|-
| 
Write_Setfield

 
| 
OxmRelatedTableFeatureProperty

 
|-
| 
Write_Setfield_Miss

 
| 
OxmRelatedTableFeatureProperty

 
|-
| 
Apply_Setfield

 
| 
OxmRelatedTableFeatureProperty

 
|-
| 
Apply_Setfield_Miss

 
| 
OxmRelatedTableFeatureProperty

 
|} 
</div> 
TableFeatureProperties
augmentation table (OF 1.3)

  
<div  align="center">              
{| border="1"
|-
| 
'''QueueProperty
type'''

 
| 
'''Augmentation'''

 
|-
| 
Min_Rate

 
| 
RateQueueProperty

 
|-
| 
Max_Rate

 
| 
RateQueueProperty

 
|} 
</div> 
QueueProperties
augmentation table (OF 1.3)

  
== 8.6   Table-miss flow entry ==
 
To
set up a table-miss flow entry in switch table it is needed to create FlowMod
message with desired flow properties and an empty match. Match is considered
empty when it has only type specified (no oxm_fields are present).

    
= 9.   Glossary =
  
DTO – Data Transfer Object

 
XID – transaction ID in OpenFlow message
(header)

 
ResponseCache – expiring cache for future rpc
responses. Default rpc response expiration time is set to one minute. Entry
that has been in cache longer than one minute will be automatically removed.
Cache uses removal listener, which checks the reason of removal. If the reason
was expiration time, entry is cancelled.

 
RpcResponseKey – this class is used as a key
in responseCache. It contains XID and received DTO’s class fields, which are
used for lookup in responseCache.

   
= 10.                 Useful links =
  
https://wiki.opendaylight.org/view/Openflow_Protocol_Library:Main

 
</div>
