== Maintainer ==
Luis Gomez (luis.gomez@ericsson.com)

== Introduction ==
New test VMs are available through the links below. The purpose of the VMs is to ease the task of developing/running integration/system test on the OpenDaylight controller. Note that both have same content, only difference is whether you prefer to test with desktop or not.

== Test environments ==
Test VM can be used in two scenarios:
* Self contain test: you have controller, mininet and robot framework all running in the same VM. This is useful for verifying the tools included in the VM and/or writing system test.
* External controller test: you can use mininet and robot framework in the VM to test an external controller running on a separate VM or platform. This is useful for developers to test their builds or to validate a specific controller platform.

== VM description ==
* Intalled SW: [http://openjdk.java.net/ Java 1.7 OpenJDK], [http://www.opendaylight.org/software OpenDaylight release distributions], [http://mininet.org/ mininet 2.1.0], [http://openvswitch.org/ Open vSwitch 2.0.0], [https://github.com/CPqD/ofsoftswitch13 CPqD ofsoftswitch13], [http://code.google.com/p/robotframework/ Robot framework 2.8.3], [https://git.opendaylight.org/gerrit/gitweb?p=integration.git;a=tree integration test scripts], [https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator VTN coordinator], [http://www.wireshark.org/ Wireshark],
* VM configuration:
** odl_server: Ubuntu 13.04 server, 8GB HDD, ova file size=2GB
** odl_desktop: Ubuntu 13.04 desktop (GUI), 20GB HDD, ova file size=3GB

== Links to VMs ==
* [https://wiki.opendaylight.org/images/HostedFiles/odl_test_server_2.ova odl-test-server-2.ova]
* [https://wiki.opendaylight.org/images/HostedFiles/odl_test_desktop_2.ova odl-test-desktop-2.ova]

== Installation Procedure ==

=== Prerequisites ===
* Virtualbox (if you use Qemu or VMware there are Internet available instructions on how to covert ovf/vmdk files to these formats)

=== Installation steps ===
* Download the VM from link above
* Unzip the file
* Open VirtualBox and do import applicance
* Boot the VM following the recommendations below
* Login with mininet/mininet

=== Recommended settings ===
* Processor: min of 2x CPU if you plan to run the controller in the VM, just 1 if you don't
* RAM: 4GB if you plan to run the controller in the VM, or just 1GB if you don't 
* Network: 1x NIC, bridge mode is the best, otherwise NAT (to share your Internet connection) or host-only (creates internal network)

=== VM usage ===
There are 3 shell scripts under user home that illustrate what can be done with the VM:
* run_test_base_self.sh (with no arguments) will start controller base edition in the VM and perform system test for base edition. This can be used to verify test VM installation.
* run_test_base.sh <controller IP> will execute system test on an external controller. Please make sure you can reach (ping) the controller first
* update_controller_last_base.sh (with no arguments) will update the controller to latest base edition. IMPORTANT: check for Internet connectivity before running it as it will wipe out the current controller intallation

In any case you can use these scripts or create your own to test a particular controller edition.

Also make sure to update the integration repo time to time issuing this command:
<pre>
mininet@mininet:~\> cd integration
mininet@mininet:~\> git pull
</pre>

If you want to know more about system test and what tests are available, please click [[CrossProject:Integration_Group:CSIT|here]]

Finally you can watch the recorded TWS session explaining the VMs: https://meetings.webex.com/collabs/#/meetings/detail?uuid=IVQEYBRYIHNGKQYTAAS3PIVDB6-9VIB
