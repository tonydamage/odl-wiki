= opendaylight-flow-types module =
Following pieces of YANG code are copied from '''module''' ''opendaylight-flow-types'' with '''namespace''' ''urn:opendaylight:flow:types'' and '''revision''' ''2013-10-26'' 
== mapping of Flow grouping ==
The module ''opendaylight-flow-types'' contains also <code>grouping</code> '''flow''' statement which is mapped to JAVA <code>interface</code> '''Flow'''. 
=== YANG grouping mapping ===
For every YANG child element of '''flow''' <code>grouping</code>(e. g. <code>leaf, container</code>...) corresponding JAVA methods are generated.<br />
For example:<br />
* YANG <code>leaf</code> '''container-name''' is mapped to JAVA ''getter'' method <code>String '''get'''ContainerName();</code>.
* YANG <code>leaf</code> '''strict''' which is of boolean type is mapped to JAVA ''is'' method <code>Boolean '''is'''Strict();</code>.
Mapping from YANG grouping flow to JAVA code is in following table:<br />

<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
    <td>
<source>
    grouping flow {
        container match {
            uses match:match;
        }
        
        container instructions {
            uses instruction-list;
        }          
         
        uses generic_flow_attributes;
        
        leaf container-name {
            type string; 
        }
        
        leaf cookie_mask {
            type uint64;
        }
        
        leaf buffer_id {
            type uint32;
        }
        
        leaf out_port {
            type uint64;
        }
        
        leaf out_group {
            type uint32;
        }
        
        leaf flags {
            type flow-mod-flags;
        }
        
        leaf flow-name {
            type string;
        }
        
        leaf installHw {
            type boolean;
        }

        leaf barrier {
            type boolean;
        }

        leaf strict {
            type boolean;
            default "false";
        }

    }
</source>
</td>
<td>
<source lang="java">

package org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026;
import java.math.BigInteger;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.FlowModFlags;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Instructions;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Match;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.GenericFlowAttributes;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Flow
    extends
    DataObject,
    GenericFlowAttributes
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:flow:types","2013-10-26","flow")
    ;

    /**
    **/
    Boolean isBarrier();
    
    /**
    **/
    Long getBufferId();
    
    /**
    **/
    String getContainerName();
    
    /**
    **/
    BigInteger getCookieMask();
    
    /**
    **/
    FlowModFlags getFlags();
    
    /**
    **/
    String getFlowName();
    
    /**
    **/
    Boolean isInstallHw();
    
    Instructions getInstructions();
    
    Match getMatch();
    
    /**
    **/
    Long getOutGroup();
    
    /**
    **/
    BigInteger getOutPort();
    
    /**
    **/
    Boolean isStrict();

}
</source>
</td>
</table>
=== YANG not build-in type mapping ===
In <code>grouping</code> '''flow''' there is <code>leaf</code> '''flags''' which has type ''flow-mod-flags''. It isn't YANG built-in type. ''flow-mod-flags'' type is specified in module '''opendaylight-flow-types''' and is mapped to JAVA class '''FlowModFlags''' as shown in following table. '''FlowModFlags''' type is used as return value for method ''getFlags''' - <code>FlowModFlags getFlags();</code> - in Flow interface (see previous table).
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
typedef flow-mod-flags {
    type bits {
        bit CHECK_OVERLAP;
        bit RESET_COUNTS;
        bit NO_PKT_COUNTS;
        bit NO_BYT_COUNTS;
        bit SEND_FLOW_REM;
    }
}
</source>
</td>
<td>
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026;
import java.util.List;
import com.google.common.collect.Lists;


/**
**/
public class FlowModFlags
 {
    final private Boolean _cHECKOVERLAP;
    final private Boolean _rESETCOUNTS;
    final private Boolean _nOPKTCOUNTS;
    final private Boolean _nOBYTCOUNTS;
    final private Boolean _sENDFLOWREM;

    public FlowModFlags(Boolean _cHECKOVERLAP, Boolean _nOBYTCOUNTS, Boolean _nOPKTCOUNTS, Boolean _rESETCOUNTS, Boolean _sENDFLOWREM) {
        this._cHECKOVERLAP = _cHECKOVERLAP;
        this._rESETCOUNTS = _rESETCOUNTS;
        this._nOPKTCOUNTS = _nOPKTCOUNTS;
        this._nOBYTCOUNTS = _nOBYTCOUNTS;
        this._sENDFLOWREM = _sENDFLOWREM;
    }
    /**
     * Creates a copy from Source Object.
     *
     * @param source Source object
     */
    public FlowModFlags(FlowModFlags source) {
        this._cHECKOVERLAP = source._cHECKOVERLAP;
        this._rESETCOUNTS = source._rESETCOUNTS;
        this._nOPKTCOUNTS = source._nOPKTCOUNTS;
        this._nOBYTCOUNTS = source._nOBYTCOUNTS;
        this._sENDFLOWREM = source._sENDFLOWREM;
    }
    
    public static FlowModFlags getDefaultInstance(String defaultValue) {
        List<String> properties = Lists.newArrayList("cHECKOVERLAP",
        "nOBYTCOUNTS",
        "nOPKTCOUNTS",
        "rESETCOUNTS",
        "sENDFLOWREM"
        );
        if (!properties.contains(defaultValue)) {
            throw new IllegalArgumentException("invalid default parameter");
        }
        int i = 0;
        return new FlowModFlags(
        properties.get(i++).equals(defaultValue) ? new Boolean("true") : null,
        properties.get(i++).equals(defaultValue) ? new Boolean("true") : null,
        properties.get(i++).equals(defaultValue) ? new Boolean("true") : null,
        properties.get(i++).equals(defaultValue) ? new Boolean("true") : null,
        properties.get(i++).equals(defaultValue) ? new Boolean("true") : null
        );
    }

    public Boolean isCHECKOVERLAP() {
        return _cHECKOVERLAP;
    }
    
    public Boolean isRESETCOUNTS() {
        return _rESETCOUNTS;
    }
    
    public Boolean isNOPKTCOUNTS() {
        return _nOPKTCOUNTS;
    }
    
    public Boolean isNOBYTCOUNTS() {
        return _nOBYTCOUNTS;
    }
    
    public Boolean isSENDFLOWREM() {
        return _sENDFLOWREM;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((_cHECKOVERLAP == null) ? 0 : _cHECKOVERLAP.hashCode());
        result = prime * result + ((_rESETCOUNTS == null) ? 0 : _rESETCOUNTS.hashCode());
        result = prime * result + ((_nOPKTCOUNTS == null) ? 0 : _nOPKTCOUNTS.hashCode());
        result = prime * result + ((_nOBYTCOUNTS == null) ? 0 : _nOBYTCOUNTS.hashCode());
        result = prime * result + ((_sENDFLOWREM == null) ? 0 : _sENDFLOWREM.hashCode());
        return result;
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        FlowModFlags other = (FlowModFlags) obj;
        if (_cHECKOVERLAP == null) {
            if (other._cHECKOVERLAP != null) {
                return false;
            }
        } else if(!_cHECKOVERLAP.equals(other._cHECKOVERLAP)) {
            return false;
        }
        if (_rESETCOUNTS == null) {
            if (other._rESETCOUNTS != null) {
                return false;
            }
        } else if(!_rESETCOUNTS.equals(other._rESETCOUNTS)) {
            return false;
        }
        if (_nOPKTCOUNTS == null) {
            if (other._nOPKTCOUNTS != null) {
                return false;
            }
        } else if(!_nOPKTCOUNTS.equals(other._nOPKTCOUNTS)) {
            return false;
        }
        if (_nOBYTCOUNTS == null) {
            if (other._nOBYTCOUNTS != null) {
                return false;
            }
        } else if(!_nOBYTCOUNTS.equals(other._nOBYTCOUNTS)) {
            return false;
        }
        if (_sENDFLOWREM == null) {
            if (other._sENDFLOWREM != null) {
                return false;
            }
        } else if(!_sENDFLOWREM.equals(other._sENDFLOWREM)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        StringBuilder builder = new StringBuilder("FlowModFlags [");
        boolean first = true;
    
        if (_cHECKOVERLAP != null) {
            if (first) {
                first = false;
            } else {
                builder.append(", ");
            }
            builder.append("_cHECKOVERLAP=");
            builder.append(_cHECKOVERLAP);
         }
        if (_rESETCOUNTS != null) {
            if (first) {
                first = false;
            } else {
                builder.append(", ");
            }
            builder.append("_rESETCOUNTS=");
            builder.append(_rESETCOUNTS);
         }
        if (_nOPKTCOUNTS != null) {
            if (first) {
                first = false;
            } else {
                builder.append(", ");
            }
            builder.append("_nOPKTCOUNTS=");
            builder.append(_nOPKTCOUNTS);
         }
        if (_nOBYTCOUNTS != null) {
            if (first) {
                first = false;
            } else {
                builder.append(", ");
            }
            builder.append("_nOBYTCOUNTS=");
            builder.append(_nOBYTCOUNTS);
         }
        if (_sENDFLOWREM != null) {
            if (first) {
                first = false;
            } else {
                builder.append(", ");
            }
            builder.append("_sENDFLOWREM=");
            builder.append(_sENDFLOWREM);
         }
        return builder.append(']').toString();
    }


}
</source>
</td>
</tr>
</table>


=== YANG Container mapping ===
For YANG <code>container</code> '''match''' which is element of <code>grouping</code> '''Flow''' is in addition generated as JAVA <code>interface</code> '''Match''':<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
container match {
    uses match:match;
}
</source>
</td>
<td>
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow;
import org.opendaylight.yangtools.yang.binding.ChildOf;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.Flow;
import org.opendaylight.yangtools.yang.binding.Augmentable;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Match
    extends
    ChildOf<Flow>,
    Augmentable<org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Match>,
    org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.Match
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:flow:types","2013-10-26","match")
    ;


}
</source>
</td>
</tr>
</table>

=== YANG Uses mapping ===
In YANG element <code>container</code> '''match''' the child subelements are added via YANG keyword <code>uses</code> and reference '''<font color="red">match:</font color>match'''. This subelements are exactly specified in module referenced through prefix '''<font color="red">match:</font color>'''.<br />
The prefix is specified in haed part of yang file through YANG <code>import</code> keyword<br />
<code>import ''opendaylight-match-types'' {prefix <font color="red">'''match'''</font color>; revision-date "2013-10-26";}</code><br />
which is reference to  <code>grouping</code> - '''match:match''' of ''opendaylight-match-types'' module.<br />
The YANG <code>uses</code> keyword is mapped to JAVA as extension of interface '''Match'''. In the JAVA interface '''Match''' there is behind the <code>extends</code> word specified interface <code>org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.Match</code> which contains concrete child elements. The mapping from referenced YANG '''match''' <code>grouping</code> to JAVA code is in following table.<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
    grouping match {
        leaf in-port {
            type inv:node-connector-id;
        }

        leaf in-phy-port {
            type inv:node-connector-id;
        }

        container "metadata" {
            uses of-metadata;
        }

        container "tunnel" {
            leaf tunnel-id {
                description "Metadata associated in the logical port";
                type uint64;
            }

            leaf tunnel-mask {
                type uint64;
            }
        }

        container "ethernet-match" {
            uses "ethernet-match-fields";
        }

        container "vlan-match" {
            uses "vlan-match-fields";
        }

        container "ip-match" {
            uses "ip-match-fields";
        }

        choice layer-3-match {
            case "ipv4-match" {
                uses "ipv4-match-fields";
            }
            case "ipv6-match" {
                uses "ipv6-match-fields";
            }
            case "arp-match" {
                uses "arp-match-fields";
            }
        }

        choice layer-4-match {
            case "udp-match" {
                uses "udp-match-fields";
            }
            case "tcp-match" {
                uses "tcp-match-fields";
            }
            case "sctp-match" {
                uses "sctp-match-fields";
            }
        }

        container "icmpv4-match" {
            uses "icmpv4-match-fields";
        }

        container "icmpv6-match" {
            uses "icmpv6-match-fields";
        }

        container "protocol-match-fields" {
            uses "protocol-match-fields";
        }
    }
</source>
</td>
<td>
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.EthernetMatch;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Icmpv4Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Icmpv6Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.inventory.rev130819.NodeConnectorId;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.IpMatch;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Layer3Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Layer4Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Metadata;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.ProtocolMatchFields;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Tunnel;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.VlanMatch;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Match
    extends
    DataObject
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:model:match:types","2013-10-26","match")
    ;

    EthernetMatch getEthernetMatch();
    
    Icmpv4Match getIcmpv4Match();
    
    Icmpv6Match getIcmpv6Match();
    
    /**
    **/
    NodeConnectorId getInPhyPort();
    
    /**
    **/
    NodeConnectorId getInPort();
    
    IpMatch getIpMatch();
    
    Layer3Match getLayer3Match();
    
    Layer4Match getLayer4Match();
    
    Metadata getMetadata();
    
    ProtocolMatchFields getProtocolMatchFields();
    
    Tunnel getTunnel();
    
    VlanMatch getVlanMatch();

}

</source>
</td>
</tr>
</table>

= opendaylight-action-types module =
In '''module''' ''opendaylight-action-types'' with '''namespace''' ''urn:opendaylight:action:types'' and '''revision''' ''2013-11-12''.
== mapping of action grouping ==
The module ''opendaylight-action-types'' contains also <code>grouping</code> '''action''' statement which is mapped to JAVA <code>interface</code> '''Action''' as shown in following table.
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
    grouping action {
        choice action {
         //contains several cases, will be discussed later
         }
     }
</source>
</td>
<td>
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.opendaylight.action.types.rev131112;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Action
    extends
    DataObject
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:action:types","2013-11-12","action")
    ;

    org.opendaylight.yang.gen.v1.urn.opendaylight.action.types.rev131112.action.Action getAction();

}

</source>
</td>
</tr>
</table> 
=== YANG choice and case mapping ===
=== YANG container mapping ===
=== YANG leaf mapping ===
=== YANG uses mapping ===
