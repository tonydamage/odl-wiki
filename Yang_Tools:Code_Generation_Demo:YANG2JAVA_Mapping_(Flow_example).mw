= Flow from opendaylight-flow-types module =
In '''module''' ''opendaylight-flow-types'' with '''namespace''' ''urn:opendaylight:flow:types'' and '''revision''' ''2013-10-26'' contains also <code>grouping</code> '''flow''' statement.<br />
YANG <code>grouping</code> '''flow''' is mapped to JAVA <code>interface</code> '''Flow'''. For every YANG child element of '''flow''' <code>grouping</code>(e. g. <code>leaf, container</code>...) corresponding JAVA methods are generated.<br />
For example:<br />
* YANG <code>leaf</code> '''container-name''' is mapped to JAVA ''getter'' method <code>String '''get'''ContainerName();</code>.
* YANG <code>leaf</code> '''strict''' which is of boolean type is mapped to JAVA ''is'' method <code>Boolean '''is'''Strict();</code>.
Mapping from YANG grouping flow to JAVA code is in following table:<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
    <td>
<source>
    grouping flow {
        container match {
            uses match:match;
        }
        
        container instructions {
            uses instruction-list;
        }          
         
        uses generic_flow_attributes;
        
        leaf container-name {
            type string; 
        }
        
        leaf cookie_mask {
            type uint64;
        }
        
        leaf buffer_id {
            type uint32;
        }
        
        leaf out_port {
            type uint64;
        }
        
        leaf out_group {
            type uint32;
        }
        
        leaf flags {
            type flow-mod-flags;
        }
        
        leaf flow-name {
            type string;
        }
        
        leaf installHw {
            type boolean;
        }

        leaf barrier {
            type boolean;
        }

        leaf strict {
            type boolean;
            default "false";
        }

    }
</source>
</td>
<td>
<source lang="java">

package org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026;
import java.math.BigInteger;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.FlowModFlags;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Instructions;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Match;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.GenericFlowAttributes;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Flow
    extends
    DataObject,
    GenericFlowAttributes
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:flow:types","2013-10-26","flow")
    ;

    /**
    **/
    Boolean isBarrier();
    
    /**
    **/
    Long getBufferId();
    
    /**
    **/
    String getContainerName();
    
    /**
    **/
    BigInteger getCookieMask();
    
    /**
    **/
    FlowModFlags getFlags();
    
    /**
    **/
    String getFlowName();
    
    /**
    **/
    Boolean isInstallHw();
    
    Instructions getInstructions();
    
    Match getMatch();
    
    /**
    **/
    Long getOutGroup();
    
    /**
    **/
    BigInteger getOutPort();
    
    /**
    **/
    Boolean isStrict();

}
</source>
</td>
</table>


For YANG <code>container</code> '''match''' which is element of <code>grouping</code> '''Flow''' is in addition generated JAVA <code>interface</code> '''Match''':<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
container match {
    uses match:match;
}
</source>
</td>
<td>
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow;
import org.opendaylight.yangtools.yang.binding.ChildOf;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.Flow;
import org.opendaylight.yangtools.yang.binding.Augmentable;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Match
    extends
    ChildOf<Flow>,
    Augmentable<org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Match>,
    org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.Match
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:flow:types","2013-10-26","match")
    ;


}
</source>
</td>
</tr>
</table>

In YANG element <code>container</code> '''match''' the child subelements are added via YANG keyword <code>uses</code> and reference '''<font color="red">match:</font color>match'''. This subelements are exactly specified in module referenced through prefix '''<font color="red">match:</font color>'''.<br />
The prefix is specified in haed part of yang file through YANG <code>import</code> keyword<br />
<code>import ''opendaylight-match-types'' {prefix <font color="red">'''match'''</font color>; revision-date "2013-10-26";}</code><br />
which is reference to  <code>grouping</code> - '''match:match''' of ''opendaylight-match-types'' module.<br />
The YANG <code>uses</code> keyword is mapped to JAVA as extension of interface '''Match'''. In the JAVA interface '''Match''' there is behind the <code>extends</code> word specified interface <code>org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.Match</code> which contains concrete child elements. The mapping from referenced YANG '''match''' <code>grouping</code> to JAVA code is in following table.<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
    grouping match {
        leaf in-port {
            type inv:node-connector-id;
        }

        leaf in-phy-port {
            type inv:node-connector-id;
        }

        container "metadata" {
            uses of-metadata;
        }

        container "tunnel" {
            leaf tunnel-id {
                description "Metadata associated in the logical port";
                type uint64;
            }

            leaf tunnel-mask {
                type uint64;
            }
        }

        container "ethernet-match" {
            uses "ethernet-match-fields";
        }

        container "vlan-match" {
            uses "vlan-match-fields";
        }

        container "ip-match" {
            uses "ip-match-fields";
        }

        choice layer-3-match {
            case "ipv4-match" {
                uses "ipv4-match-fields";
            }
            case "ipv6-match" {
                uses "ipv6-match-fields";
            }
            case "arp-match" {
                uses "arp-match-fields";
            }
        }

        choice layer-4-match {
            case "udp-match" {
                uses "udp-match-fields";
            }
            case "tcp-match" {
                uses "tcp-match-fields";
            }
            case "sctp-match" {
                uses "sctp-match-fields";
            }
        }

        container "icmpv4-match" {
            uses "icmpv4-match-fields";
        }

        container "icmpv6-match" {
            uses "icmpv6-match-fields";
        }

        container "protocol-match-fields" {
            uses "protocol-match-fields";
        }
    }
</source>
</td>
<td>
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.EthernetMatch;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Icmpv4Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Icmpv6Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.inventory.rev130819.NodeConnectorId;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.IpMatch;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Layer3Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Layer4Match;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Metadata;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.ProtocolMatchFields;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.Tunnel;
import org.opendaylight.yang.gen.v1.urn.opendaylight.model.match.types.rev131026.match.VlanMatch;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Match
    extends
    DataObject
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:model:match:types","2013-10-26","match")
    ;

    EthernetMatch getEthernetMatch();
    
    Icmpv4Match getIcmpv4Match();
    
    Icmpv6Match getIcmpv6Match();
    
    /**
    **/
    NodeConnectorId getInPhyPort();
    
    /**
    **/
    NodeConnectorId getInPort();
    
    IpMatch getIpMatch();
    
    Layer3Match getLayer3Match();
    
    Layer4Match getLayer4Match();
    
    Metadata getMetadata();
    
    ProtocolMatchFields getProtocolMatchFields();
    
    Tunnel getTunnel();
    
    VlanMatch getVlanMatch();

}

</source>
</td>
</tr>
</table>
