In '''module''' ''opendaylight-flow-types'' with '''namespace''' ''urn:opendaylight:flow:types'' and '''revision''' ''2013-10-26'' there is following piece of YANG code which is mapped to JAVA classes as follows:<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
    <td>
<source>
    grouping flow {
        container match {
            uses match:match;
        }
        
        container instructions {
            uses instruction-list;
        }          
         
        uses generic_flow_attributes;
        
        leaf container-name {
            type string; 
        }
        
        leaf cookie_mask {
            type uint64;
        }
        
        leaf buffer_id {
            type uint32;
        }
        
        leaf out_port {
            type uint64;
        }
        
        leaf out_group {
            type uint32;
        }
        
        leaf flags {
            type flow-mod-flags;
        }
        
        leaf flow-name {
            type string;
        }
        
        leaf installHw {
            type boolean;
        }

        leaf barrier {
            type boolean;
        }

        leaf strict {
            type boolean;
            default "false";
        }

    }
</source>
</td>
<td>
<source lang="java">

package org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026;
import java.math.BigInteger;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.FlowModFlags;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Instructions;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.flow.Match;
import org.opendaylight.yangtools.yang.binding.DataObject;
import org.opendaylight.yang.gen.v1.urn.opendaylight.flow.types.rev131026.GenericFlowAttributes;
import org.opendaylight.yangtools.yang.common.QName;


/**
**/
public interface Flow
    extends
    DataObject,
    GenericFlowAttributes
{



    public static final QName QNAME = org.opendaylight.yangtools.yang.common.QName.create("urn:opendaylight:flow:types","2013-10-26","flow")
    ;

    /**
    **/
    Boolean isBarrier();
    
    /**
    **/
    Long getBufferId();
    
    /**
    **/
    String getContainerName();
    
    /**
    **/
    BigInteger getCookieMask();
    
    /**
    **/
    FlowModFlags getFlags();
    
    /**
    **/
    String getFlowName();
    
    /**
    **/
    Boolean isInstallHw();
    
    Instructions getInstructions();
    
    Match getMatch();
    
    /**
    **/
    Long getOutGroup();
    
    /**
    **/
    BigInteger getOutPort();
    
    /**
    **/
    Boolean isStrict();

}
</source>
</td>
</table>

It means that YANG <code>grouping</code> '''flow''' is mapped to JAVA <code>interface</code> '''Flow'''. For every YANG child element of '''flow''' <code>grouping</code>(e. g. <code>leaf, container</code>...) corresponding JAVA methods are generated.<br />
For example:<br />
* YANG <code>leaf</code> '''container-name''' is mapped to JAVA ''getter'' method <code>String '''get'''ContainerName();</code>.
* YANG <code>leaf</code> '''strict''' which is of boolean type is mapped to JAVA ''is'' method <code>Boolean '''is'''Strict();</code>.
For YANG <code>container</code> '''match''' element of <code>grouping</code> '''Flow''' is in addition generated JAVA <code>interface</code> '''Match''':<br />
<table border="1">
<tr>
    <th>YANG</th>
    <th>JAVA</th>
</tr>
<tr>
<td>
<source>
container match {
    uses match:match;
}
</source>
</td>
<td>
<source lang="java">
</source>
</td>
</tr>
</table>


</table>
