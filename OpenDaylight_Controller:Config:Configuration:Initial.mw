Initial configuration for controller

= Configuration Persister =
As a part of the configuration subsystem, purpose of the persister is to save and load a permanent copy of a configuration. The '''Persister''' interface represents basic operations over a storage - persist configuration and load last config, configuration snapshot is represented as string and set of it's capabilities. '''StorageAdapter''' represents an adapter interface to the '''ConfigProvider''' - subset of BundleContext, allowing access to the OSGi framework  system properties. 

== Persister Implementation ==
Configuration persister implementation is part of the Controller Netconf. '''PersisterAggregator''' class is implemenataion of Presister interface. Functionality is delegated to the storage adapters. Storage adapters are low level persisters that do the heavy lifting for this class. Instances of storage adapters can be injected directly via constructor or instantiated from a full name of its class provided in a properties file. There can be many persisters configured and various number of them can be used. 

Example of presisters configuration :

 netconf.config.persister.active=2,3
 # read startup configuration
 netconf.config.persister.1.storageAdapterClass=org.opendaylight.controller.config.persist.storage.directory.xml.XmlDirectoryStorageAdapter
 netconf.config.persister.1.properties.fileStorage=configuration/initial/

 netconf.config.persister.2.storageAdapterClass=org.opendaylight.controller.config.persist.storage.file.FileStorageAdapter
 netconf.config.persister.2.readonly=true
 netconf.config.persister.2.properties.fileStorage=configuration/current/controller.config.1.txt

 netconf.config.persister.3.storageAdapterClass=org.opendaylight.controller.config.persist.storage.file.FileStorageAdapter
 netconf.config.persister.3.properties.fileStorage=configuration/current/controller.config.2.txt
 netconf.config.persister.3.properties.numberOfBackups=3

During server startup ConfigPersisterNotificationHandler requests last snapshot from underlying storages. Each storage can respond by giving snapshot or absent response.The PersisterAggregator#loadLastConfigs() will search for first non-absent response from storages ordered backwards as user specified (first '3', then '2'). When a commit notification is received, '2' will be omitted because readonly flag is set to true, so only '3' will have a chance to persist new configuration. If readonly was false or not specified, both storage adapters would be called in order specified by 'netconf.config.persister' property.

== Persister Notification Handler ==
'''ConfigPersisterNotificationHandler''' class is responsible for listening for netconf notifications containing latest committed configuration. The listener can handle incoming notifications, delegates configuration saving/loading to the persister.

== Storage Adapter Implementations ==

=== File Storage ===
'''FileStorageAdapter''' implements StorageAdapter, provides file based configuration persisting. File path and name is stored as a property and a number of stored backups, expressing count of last configurations to be persisted, too. The implementation can handle persisting input configuration and load last configuration.

=== Directory Storage ===
'''DirectoryStorageAdapter''' retrieves initial configuration from a directory. If multiple files are present, snapshot and
required capabilities will be merged together. Writing to this persister is not supported.

=== XML File Storage ===
'''XmlFileStorageAdapter''' implementation stores configuration in an xml file.

=== XML Directory Storage ===
'''XmlDirectoryStorageAdapter''' retrieves initial configuration from a directory. If multiple xml files are present, snapshot and
required capabilities will be merged together. Writing to this persister is not supported.

=== Autodetect Directory Storage ===
'''AutodetectDirectoryStorageAdapter''' retrieves initial configuration from a directory (exactly as Xml Directory Storage) but supports xml as well as plaintext format for configuration files. Xml and plaintext files can be combined in one directory. Purpose of this persister is to keep backwards compatibility for plaintext configuration files. 

'''! Important: AutodetectDirectoryStorageAdapter will be removed in further release since Plaintext File/Directory adapters are deprecated and will be fully replaced by xml storage adapters.'''

=== No-Operation Storage ===
'''NoOpStorageAdapter''' serves as dummy implementation of the storage adapter.
