These instructions should enable you to use the CLI to pull and push to the git repository, but hack on code from Eclipse.

==Introduction==
Eclipse is an IDE (Integrated Development Environment) which provides a single pane of glass for developing and debugging source code. At present only the following projects have been validated to import into Eclipse without compile errors:
*Controller
*OpenflowPlugin

The remaining projects have not yet been modified to play nice with Eclipse.

====Quick Start / Useful Tips====
*Ctrl + Shift + T  opens a window that allows you to search for any java class.
*Ctrl + Shift + R opens a window that allows you to search for any resource.
*Window->Preferences provides a large number of customization options including use spaces for tabs, line numbers, etc. (On Mac it is Eclipse->Preferences).

==Installing Eclipse==

# Download and install Eclipse ("for Java EE Developers", "for Java Developers" and "for RCP and RAP Developers" all seem to work)
# Increase the memory for the Eclipse installation by modifiying the eclipse.ini file in the same directory as the eclipse executable.
#*Change the -Xmx setting to be AT least 1G, recommended 2GB.  (i.e.    -Xmx2048m ).  ''Note: This file may be in a different location depending on your OS. Refere to eclipse documentation if you don't see the file.'' 
# Install Eclipse Maven Integration
## From Eclipse, go to Help => Install New Software...
## Paste "http://download.eclipse.org/technology/m2e/releases" into the "Work with:" field
## Select m2e and (optionally) m2e - slf4j both ''(1.4.0 is current as of the writing of these instructions)''
## Click Next, OK and Finish else until things install
## Restart Eclipse when it asks
# Install Eclipse Xtend plugin
## From Eclipse, go to Help => Install New Software...
## Paste "http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases" into the "Work with:" field
## Select Xtend SDK and Xtend M2E extensions under Xtend-2.4.3 <br>''There are newer versions, however our source currently uses version 2.4.3. Choosing a newer version will cause compile errors.''
## Click Next, OK and Finish else until things install
## Restart Eclipse when it asks
#Install Eclipse Tycho integration
## From Eclipse, go to Help => Install New Software...
## Paste http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-tycho/0.7.0/N/0.7.0.201309291400/ into the "Work with:" field.
##Select the Tycho Project Configurators. Click Next, OK, Finish etc until it installs.
##Restart Eclipse when it asks.
#Install the build-helper-maven plugin (this allows eclipse to see yang/xtend generated directories as source folders)
## From Eclipse, go to Windows => Preferences, expand the Maven folder and select Discover.
## In the right panel, click 'Open Catalog'.
## Type 'build' in he Find box to filter the list.
## You should see 'buildhelper' listed. Select it and click Finish.
## Click Next in the following 2 panels, accept the license terms and click Finish (ignore the unsigned content warning).
## Restart Eclipse when it asks.
#Install Groovy plugin
## From Eclipse, go to Help => About, and note what eclipse version you have (4.3, 4.2 etc).
## From Eclipse, go to Help => Install New Software...
## In the "Work with:" field, paste http://dist.springsource.org/release/GRECLIPSE/e4.3 and hit Enter. Note: if you have an earlier eclipse version, change 4.3 to that version.
## Select 'Groovy-Eclipse' and 'm2e Confgurator for Groovy-Eclipse' to install.
## Click Next, accept the license terms and click Finish.
## Restart Eclipse when it asks.

===Eclipse Maven Integration (m2e) version===

Previously, there were issues with m2e 1.3 and we recommended using 1.2, but those issues have been fixed and everything should works as expected with the most recent m2e version, 1.4.

==Importing the Source Into Eclipse==
# Pull the code from the command line and build it with these [[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from the CLI|instructions]]. The short version is:
## Pull the code: <tt>git clone ssh://<username>@git.opendaylight.org:29418/controller.git</tt>
## Build the code: <tt>cd controller && mvn clean install</tt> ''You can also build from opendaylight/distribution/opendaylight, but it just builds the distribution as opposed to building everything''<br>The long version is available here [[GettingStarted:Pulling,_Hacking,_and_Pushing_All_the_Code_from_the_CLI]].
# Import all of the OpenDaylight projects into eclipse
## From Eclipse, go to File => Import => Maven => Existing Maven Projects
## Browse to the root directory of the git repository
## All of the projects should be selected by default, just click Finish
## It may ask you to install Tycho, do so if it asks ''(This should be a 1 time deal. Make sure you have enough memory allocated otherwise it can cause Eclipse to hang and eventually crash)''
## It may also complain about jacoco, you should be able to ignore those errors

== Help - I still have Red X's! (i.e. Eclipse compile errors) ==
*The first thing to try when you still have eclipse compile errors is to right click the offending projects and choose:
**Maven -> Update Projects       <-- This will cause eclipse to reevaluate the pom.xml and possibly pull in missing (runtime generated) files.
**Refresh    <-- Causes eclipse to scan the project directory and pull in any files that were manipulated (generated etc) outside of eclipse.
*If you still have compile errors, then you may need to run mvn clean install from the command line the offending projects. Yang and xtend source files are only generated when maven is invokved directly (either by right clicking and choosing Run -> mvn generate-sources or via the command line).

== To Remotely Debug the Controller ==
To remotely debug the controller you need to:
# Start the controller with the -debug flag passed to the run.sh script. <pre>./run.sh -debug   </pre>''This starts the controller, opening up port 8000 for debugging.''
#In Eclipse choose Run->"Debug Configurations" 
#*Under "Remote Java Application" choose a standard connection type, and enter the hostname (localhost or remote controller name) and port (8000 by default).
#*Under the "Source" tab click "Add" and then "Java Project". This will give you a list of all java projects in the workspace. Select them all and click OK a few times to close out of the dialogs. <br>''Note: this should only be required once per debug configuration.''
#*Click debug to launch the debugger.

==Debugging Weird Errors==

If Eclipse starts giving you lots of weird errors that seem to make no sense, try the following things:

# right click on the project with the issue and go to Maven => Update Project... and then press OK
#* You can do this more easily by creating a single "Java Working Set" for all of the OpenDaylight projects
#* Do that by going File => New => Java Working Set and giving it a name and adding all the projects you want
#* When you're importing Maven projects into Eclipse, you can also check the "Add project(s) to working set" box at the bottom of the dialog and pick the working set you're using for OpenDaylight
#* Then you can right-click on the project and do the Maven = Update Project... on all of them at once
# If that doesn't work closing, deleting and the reimporting all of the OpenDaylight projects seems to help when nothing else does
#* while you have the projects not imported into Eclipse, it doesn't hurt to do a build from the CLI as well


===Frequent gotchas===
* eclipse needs to setup a classpath variable M2_REPO pointing to local repository. Can be done manually or via 
*: <code>mvn -Declipse.workspace=<path-to-eclipse-workspace> eclipse:add-maven-repo</code>
* some projects miss maven-compiler-plugin configuration and render into java 1.4 compliant settings - you need to change that manually in eclipse or fix corresponding pom
* when running eclipse:eclipse upon parent pom which aggregates modules, then in eclipse these modules will "see" each other in workspace. If you change code on project A, eclipse will recompile it and new stuff is immediately available to project B (having the same parent). Anyway workspace dependencies in eclipse can be set or removed manually anytime.
* when running eclipse:eclipse upon bottom project pom, where no modules resides, eclipse will see it after import as independent project having all dependencies pointed to local repo
* when using pax-exam you need to install touched artifacts into local repo in order for pax-exam to put updated version on classpath
* by default maven updates every SNAPSHOT dependency every 24 hours, so if you need stable environment do not forget to use '''-nsu''' switch

===Advantages===
* if you want to freeze all SNAPSHOT dependencies, use '''-nsu''' (no snapshot update) switch or '''-o''' (offline)
* if you want to update all SNAPSHOT dependencies, use '''-U''' switch
* if you want to build only a subset of projects contained in parent pom, use this (maven will take care of build order)
*: <code>mvn clean install -pl <relative_path_to_subproject1>,<relative_path_to_subproject2>..</code>
* if you want to continue a failed build (after fixing it) when having many modules, use this
*: <code>mvn clean install -rf <relative_path_to_broken_broject></code>
* you can apply remote debug on everything you have source code of (including plugins), just use '''mvnDebug'''
* to run test from commandline use
*: <code>mvn test</code>
*: <code>mvn test -Dtest=<testName_without_package></code>
*: <code>mvn test -Dtest=<testName_without_package>#<methodName></code>
* if everything fails, use -X to see TRACE output

And as all these are shell commands, you are free to chain them (with ; || && &) and automate your work a bit:
 mvn clean compile -DskipTests && cd target/longPathToDistribution; aplay <funnyNoise.wav> > /dev/null & ./run.bat -debug; cd -

==Alternative way without m2eclipse plugin - for CLI-fans==
Sometimes m2eclipse plugin does weird things like compiling in infinite loop, updating dependencies when they need to be frozen and the other way around. If you want to omit m2eclipse plugin completely, you can. Of course the xtend plugin is still needed.
# pull code from git
# run in folder with pom:
#: <code>mvn eclipse:eclipse -DdownloadSources=true</code>
# start eclipse and import ''existing project'' (navigate to folder with pom)
