The Model-Driven SAL (MD-SAL) is an infrastructure component that provides messaging and data storage functionality for based on user-defined (application developers) data and interface models.

MD-SAL has two main objectives:

* Provide a '''common-layer''', '''concepts''', '''data''' structure '''building blocks''' and '''patterns''' which serves as building blocks  applications
* support of multiple transport and payload formats, serialization/adaptation them.

## Supported API / Payload variations

One of the target objective of MD-SAL is to expose functionality of providers
via various transport/payload formats, without any coding required on provider
side.

MD-SAL currently exposes following transport/payload formats (Hydrogen):

* '''intra-JVM''' communication using '''generated DTOs''' (Java YANG Binding)
* '''intra-JVM''' communication using '''YANG DOM Model'''
* '''HTTP''' consumer-only APIs using '''Restconf''', '''XML''' and '''JSON''' as payload

Experimental transport/payload formats (Hydrogen):

* '''Cross-process''' APIs using '''ZeroMQ''' and '''XML''' as payload

Planned transport/payload format (Helium):

* '''Cross-JVM''' communication using '''Akka'''

== Basic Concepts ==

* '''Data Tree''' - All state-related data are modeled and represented as data tree, with possibility to address any element / subtree
:* '''Operational Data Tree''' - Reported state of the system, published by the providers using MD-SAL. Represents a feedback loop for applications to observe state of the network / system.
:* '''Configuration Data Tree''' - Intended state of the system or network, populated by consumers, which expreses their intention.
* '''Instance Identifier''' - Unique identifier of node / subtree in data tree, which provides unambiguous information, how to retrieve node / subtree from conceptual data trees.
* '''Notification''' - Asynchronous transient event (from perspective of provider) which may be consumed by consumers and they may act upon it
* '''RPC''' - asynchronous request-reply message pair, when request is triggered by consumer, send to the provider, which in future replies with reply message.


## Supported Messaging Patterns

* Unicast communication 
	* **RPC** - unicast between consumer and provider, where consumer sends *request*
	  message to provider, which asynchronously responds with *reply* message
* Publish / Subscribe
	* **Notifications** - multicast message which is send by provider and is delivered to subscribed consumers
	* **Data Change Notifications** - multicast asynchronous event, which is sent by data broker if there is change in conceptual data tree, and is delivered
	to subsribed consumers
* Data manipulation patterns
  * Transactional **reads** from conceptual **data tree** - read-only transactions
  * Transactional **modification** to conceptual **data tree** - write transactions
