=Overview and Architecture=

===Conceptual Overview===
OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller.
Conventionally, huge investment in the network systems and operating expenses are needed because the network is configured as a silo for each department and system. So, various network appliances must be installed for each tenant and those boxes cannot be shared with others. It is a heavy work to design, implement and operate the entire complex network.
The uniqueness of VTN is a logical abstraction plane. This enables the complete separation of logical plane from physical plane. Users can design and deploy any desired network without knowing the physical network topology or bandwidth restrictions.
VTN allows the users to define the network with a look and feel of conventional L2/L3 network. Once the network is designed on VTN, it will automatically be mapped into underlying physical network, and then configured on the individual switch leveraging SDN control protocol. The definition of logical plane makes it possible not only to hide the complexity of the underlying network but also to better manage network resources. It achieves reducing reconfiguration time of network services and minimizing network configuration errors

[[File:Network Virtualization.jpg|550px]]

For more details please click on the link:[[OpenDaylight Virtual Tenant Network (VTN):Overview|VTN overview]]

=Installation Guide (link)=
The VTN Coordinator installation process is explained in the below link:

*[[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator| VTN Coordinator Installation Guide]]

The VTN Manager installation process is explained in the below link:

*[[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Manager| VTN Manager Installation Guide]]

The Virtualization Edition installation process is explained in the below link:

*[[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:Virtualization_Edition| Virtualization Edition Guide]]

=Installation Troubleshooting(link)=

==How to install VTN Coordinator?==
* Please follow the steps mentioned in the link [[https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator| VTN Coordinator installation]]

==After executing db_setup, you have encountered the error "Failed to setup database"?==
The error could be due to the below reasons
* Not a Root user 
  You may not be user with root permissions, please switch to such a previleage and execute again

* Postgres not Present 
  1.In case of Fedora/CentOS/RHEL, please check if /usr/pgsql/<version> directory is present and also ensure the commands 
    initdb, createdb,pg_ctl,psql are working. If, not please re-install postgres packages

  2.In case of Ubuntu, check if /usr/lib/postgres/<version> directory is present and check for 
    the commands as in the previous step.

* Not enough space to create tables==
 Please check df -k and ensure enough free space is available.
      
* If the above steps do not solve the problem, please refer to the log file for the exact problem
      /usr/local/vtn/var/dbm/unc_setup_db.log for the exact error.

==What are the things to check after vtn_start?==
* list of coordinator processes
    command: ps -ef | grep unc
    postgres 29176 29171  0 18:50 ?        00:00:00 postgres: autovacuum launcher process
    root     29206     1  0 18:50 ?        00:00:00 /usr/local/vtn/sbin/uncd
    root     29221 29206  0 18:50 ?        00:00:00 drvodcd -Pcore.uncd.pid=29206 -Pcore.ipc.notify=uncd,launcher,0 -DR
    root     29243 29206  0 18:50 ?        00:00:00 phynwd -Pcore.uncd.pid=29206 -Pcore.ipc.notify=uncd,launcher,0 -DR
    root     29259 29206  0 18:50 ?        00:00:00 lgcnwd -Pcore.uncd.pid=29206 -Pcore.ipc.notify=uncd,launcher,0 -DR
    postgres 29278 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50531) idle
    postgres 29279 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50532) idle
    postgres 29280 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50533) idle
    postgres 29281 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50534) idle
    postgres 29284 29171  0 18:50 ?        00:00:00 postgres: uncdbuser uncdb 127.0.0.1(50536) idle
    
* Issue the curl command to fetch version and ensure rthe process is able to respond.

    
==Things to do when the processes are not getting listed in process table.==
* Please execute /usr/local/bin/vtn_stop and check process table 
if there are any coordinator process still running. This could error if the directory /usr/local/vtn was removed without vtn_stop.
In such situations, Please kill all coordinator process and retry.
   
* Check the log file /usr/local/vtn/var/uncd/uncd_start.er for any particular startup errors.
   
* Check the log file /usr/local/vtn/var/db/pg_log/postgres*.log to ensure that database startup was 
successful, if else please re-configure database and attempt the start again.
      
* Check the log file /usr/local/vtn/var/uncd/log/pfcd_message.log for the failure of any particular daemon,
If the log messages indicate the failure of a particular daemon, please check the log file of the particular daemon for more details
/usr/local/vtn/var/<daemon>/log/pfcd_message.log

* Mail the error to vtn-dev mailing list with the tar file of the /usr/local/vtn/var directory for debugging.

==After setting up the apache tomcat server, what are the aspects that should be checked.==
     Please check if catalina is running.

==If you encounter an erroneous situation where the REST API is always failing.==
    Please ensure the firewall settings for port:8080 and enable the same.

=Configuration=
The command to configure the opendaylight edition: 
opendaylight/run.sh -virt vtn 

=Tutorial / How-To=
This Example explains about mapping interface and sending packets between hosts for single controller using mininet:
“mininet” details and set-up can be referred at below URL: https://wiki.opendaylight.org/view/OpenDaylight_Controller:Installation#Using_Mininet
Single Controller Topology:
 [[File:Example VTN.png|600px]]

* “mininet” command for above topology:
mininet@mininet-vm:~$ sudo mn --controller=remote,ip=<controller-ip> --topo tree,2
* Create a Controller
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.0.0.2", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8080/vtn-webapi/controllers.json
|}

* Create a VTN 
{|class = "wikitable
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8080/vtn-webapi/vtns.json
|}

* Create a vBridge in the VTN 
{|class = "wikitable"
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges.json
|}

* Create two Interfaces into the vBridge 
{|class = "wikitable"
|-
curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|}

* Get the list of logical ports configured
{|class = "wikitable"
|-
|curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8081/vtn-webapi/controllers/controllerone/domains/\(DEFAULT\)/logical_ports.json
|}

* Configure two mappings on the interfaces 
{|class = "wikitable"
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:03-s3-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:02-s2-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json
|}

* Send packets from Host1 to Host3
{|class = "wikitable"
|-
|mininet> h1 ping h3
|}

Refer to below URL for more details and multi-controller scenario: https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator:RestApi:L2_Network_Example_Using_VTN_Virtualization

=Web/Graphical Interface=
:None

=Command Line Interface=
:None

=Console Interface=
:None

=Programmatic Interface(s) (link)=
Refer to the link [[OpenDaylight Virtual Tenant Network (VTN):Developer Guide#Programmatic_Interface|Programmatic Interface for VTN API's]] for the details on VTN API's

=Help=
*VTN dev mailing lists:
vtn-dev@lists.opendaylight.org
