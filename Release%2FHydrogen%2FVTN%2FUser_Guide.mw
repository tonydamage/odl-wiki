=Overview and Architecture=

==The Exigency for Networks Functions Virtualization(NFV)==
Network functions Virtualization (NFV) offers a new way to design, deploy and manage networking services. NFV decouples the network functions, such as network address translation (NAT), firewalling, intrusion detection, domain name service (DNS), caching, etc., from proprietary hardware appliances, so they can run in software. It’s designed to consolidate and deliver the networking components needed to support a fully virtualized infrastructure – including virtual servers, storage and even other networks.  It utilizes standard IT virtualization technologies that run on high-volume service, switch and storage hardware to virtualize network functions. It is applicable to any data plane processing or control plane function in both wired and wireless network infrastructures.

;The Benefits of NFV
NFV virtualizes network services via software to enable operators to:

* Reduce CapEx: reducing the need to purchase purpose-built hardware and supporting pay-as-you-grow models to eliminate wasteful overprovisioning.
* Reduce OpEX: reducing space, power and cooling requirements of equipment and simplifying the roll out and management of network services.
* Accelerate Time-to-Market: reducing the time to deploy new networking services to support changing business requirements, seize new market opportunities and improve return on investment of new services. Also lowers the risks associated with rolling out new services, allowing providers to easily trial and evolve services to determine what best meets the needs of customers.
*Deliver Agility and Flexibility: quickly scale up or down services to address changing demands; support innovation by enabling services to be delivered via software on any industry-standard server hardware.

==VTN as NFV==

===Conceptual Overview===
OpenDaylight Virtual Tenant Network (VTN) is an application that provides multi-tenant virtual network on an SDN controller.
Conventionally, huge investment in the network systems and operating expenses are needed because the network is configured as a silo for each department and system. So, various network appliances must be installed for each tenant and those boxes cannot be shared with others. It is a heavy work to design, implement and operate the entire complex network.
The uniqueness of VTN is a logical abstraction plane. This enables the complete separation of logical plane from physical plane. Users can design and deploy any desired network without knowing the physical network topology or bandwidth restrictions.
VTN allows the users to define the network with a look and feel of conventional L2/L3 network. Once the network is designed on VTN, it will automatically be mapped into underlying physical network, and then configured on the individual switch leveraging SDN control protocol. The definition of logical plane makes it possible not only to hide the complexity of the underlying network but also to better manage network resources. It achieves reducing reconfiguration time of network services and minimizing network configuration errors

[[File:Network Virtualization.jpg|550px]]

For more details please click on the link:[[OpenDaylight Virtual Tenant Network (VTN):Overview|VTN overview]]

=Installation Guide (link)=
The VTN Coordinator installation process is explained in the below link:

https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Coordinator

The VTN Manager installation process is explained in the below link:

https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:VTN_Manager

The Virtualization Edition installation process is explained in the below link:

https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):Installation:Virtualization_Edition

=Installation Troubleshooting(link)=

=Configuration=
The command to configure the opendaylight edition: 
opendaylight/run.sh -virt vtn 

=Tutorial / How-To=
This Example explains about mapping interface and sending packets between hosts for single controller using mininet:
“mininet” details and set-up can be referred at below URL: https://wiki.opendaylight.org/view/OpenDaylight_Controller:Installation#Using_Mininet
Single Controller Topology:
 [[File:Example VTN.png|600px]]

* “mininet” command for above topology:
mininet@mininet-vm:~$ sudo mn --controller=remote,ip=<controller-ip> --topo tree,2
* Create a Controller
curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"controller": {"controller_id": "controllerone", "ipaddr":"10.0.0.2", "type": "odc", "version": "1.0", "auditstatus":"enable"}}' http://127.0.0.1:8080/vtn-webapi/controllers.json

* Create a VTN 
{|class = "wikitable
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vtn" : {"vtn_name":"vtn1","description":"test VTN" }}' http://127.0.0.1:8080/vtn-webapi/vtns.json
|}

* Create a vBridge in the VTN 
{|class = "wikitable"
|-
curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"vbridge" : {"vbr_name":"vBridge1","controller_id":"controllerone","domain_id":"(DEFAULT)" }}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges.json
|}

* Create two Interfaces into the vBridge 
{|class = "wikitable"
|-
curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if1","description": "if_desc1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|-
|curl -v -X POST -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"interface": {"if_name": "if2","description": "if_desc2"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces.json
|}

* Get the list of logical ports configured
{|class = "wikitable"
|-
|curl -v -X GET -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' http://127.0.0.1:8081/vtn-webapi/controllers/controllerone/domains/\(DEFAULT\)/logical_ports.json
|}

* Configure two mappings on the interfaces 
{|class = "wikitable"
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:03-s3-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if1/portmap.json
|-
|curl -v -X PUT -H 'content-type: application/json' -H 'username: admin' -H 'password: adminpass' -H 'ipaddr:127.0.0.1' -d '{"portmap":{"logical_port_id": "PP-00:00:00:00:00:00:00:02-s2-eth1"}}' http://127.0.0.1:8080/vtn-webapi/vtns/vtn1/vbridges/vBridge1/interfaces/if2/portmap.json
|}

* Send packets from Host1 to Host3
{|class = "wikitable"
|-
|mininet> h1 ping h3
|}

Refer to below URL for more details and multi-controller scenario: https://wiki.opendaylight.org/view/OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator:RestApi:L2_Network_Example_Using_VTN_Virtualization


=Web/Graphical Interface=
:None

=Command Line Interface=
:None

=Console Interface=
:None

=Programmatic Interface(s) (link)=
Refer to the link [[OpenDaylight Virtual Tenant Network (VTN):Developer Guide#Programmatic_Interface|Programmatic Interface for VTN API's]] for the details on VTN API's

=Help=
*VTN dev mailing lists:
vtn-dev@lists.opendaylight.org
