== Current state ==

=== Binding-Aware Broker ===

'''Executors:'''

* ''sal-binding-notification'' Executor 
** 4-32 Threads
** Limited configurable blocking queue
** Leaked to clients by directly invoking callbacks
* ''sal-binding-commit'' Executor - 
* 1 Thread
** unbounded
** Leaked to clients by directly invoking callbacks, via ListenableFuture

==== RPC Invocations ====

Callback to RPC implementation is done via caller's thread. No context switch is present here.
Implementations (providers) are expected to return future object with result as soon as possible
and do NOT block thread for significant amount of time. Callback should end immediatelly with
Future which should be updated once result is available.

===== Blocking operations =====

* Potential invocation of RPC, which has Bidning-Independent implementation and codecs are not generated. 

==== Notifications ====

Notification delivery to clients are done via ''sal-binding-notification''. Simultaneous delivery of
multiple notifications to same listener using multiple threads is not prevented on MD-SAL level. 

===== Blocking operations =====

* Publishing notification is blocking operation when ''sal-binding-notification'' queue is full.

==== Data Broker ====

===== Blocking operations =====

* Read and Writes to transaction may be blocking operations if codec  schema for particular data is currently not present in MD-SAL. (Since client code is using generated DTOs, assumption is schema will be available at some point in the time.

=== Binding-Independent Broker ===

'''Executors:'''
* Data Broker executor
** 1 Thread
** Unbounded queue
** Leaked to clients by ListenableFuture

* Data store executor
** 2 Threads
** Limited configurable blocking queue
** Leaked to clients by directly invoking callbacks in Data Change Events

==== RPC Invocations ====

Callback to RPC implementation is done via caller's thread. No context switch is present here.
Implementations (providers) are expected to return future object with result as soon as possible
and do NOT block thread for significant amount of time. Callback should end immediatelly with
Future which should be updated once result is available.

==== Notifications ====

Notification delivery to clients are done via publisher thread. Simultaneous delivery of
multiple notifications to same listener using multiple threads is not prevented on MD-SAL level.

==== DOM Data Broker ====

DOM Data Broker uses unbounded single-threaded executor which only purpose is to coordinate
three-phase commit on data-stores. Executed coordination code invokes asynchronous operations
on data stores and block until it has result for each invoked operation. 

==== Data Store ====

Data Store uses executor with two threads for:
* Verifying transactions
* Computing snapshots
* Replacement of snapshot (synchronous on Datastore level)
* Delivery of data change events.
 
==== Restconf ====

Restconf uses threads provided by HTTP container. Restconf invokes asynchronous operations
on MD-SAL such as transactions, rpcs invocations and block until asychnronous operation ends.

=== Potential Problems ===
