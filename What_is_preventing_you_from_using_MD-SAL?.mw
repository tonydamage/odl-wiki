=Stability =
===With the first release there were a number of bugs that existed in MD-SAL proper.===
*Proposal: Implement more JUnit tests / do not allow code to be merged without unit testing
===Holes in Implementation – in complete implementations leads to confusion on expected behavior vs missing behavior===
*Proposal: Identify and prioritize filling missing holes
=Consistency=
===Multiple ways to do a task – [Clarification Needed]===
*Binding Aware vs Binding Indentpendent?
:*Just class naming? Or don’t like the two code paths?
*Attributes vs RPC vs Notifications
*OSGi Services vs (MD-SAL ??) Config System
:*Proposal: expose all MD-SAL services via OSGI services so we are not forced to use two different methods.
=Developer Usability=
===Confusion with generated classes – duplicate names differingonly by package leads to confusion.===
*InstanceIdentifier – we have a BA and BI version.. 
:*Proposal: Rename InstanceIdentifier to be BAInstanceIdentifier and BIInstanceIdentifier
*Node: we have xml, json, odl inventory… lots of nodes already exist – can we rename it.
:*Proposal: Rename MD-SAL Node (I think we mean OpendaylightInventory-Node?) to be something other than “Node” which is a very common, and overloaded term.
*Proposal [General] – Can we somehow try and make class names unique, but meaningful, during code generation?
===Difficulty in traversing the DOM (building instance identifiers). Everyone uses helper classes===
*Proposal: Merge the simplified API of building the instance identifiers into the builder…???
===Confusion on purpose of many MD-SAL classes===
*Proposal: Add at a minimum one or two meaningful sentences to every class explaining its purpose. 
*Proposal: Break apart nested classes etc until one or two sentences is enough!
===Too much Yang:  While Yang is a good tool I think its dependencies should be contained as part of a component tool chain.. ===
*Proposal: I would prefer to see a generic approach to plugins (northbound, southbound or otherwise) and have yang be a way to translate to that specific format instead of seeing yang crawl in a core dependency for all the rest of the platform / system.
===MD-SAL is a “Large” framework with a lot of dependencies.===
*Proposal: Decompose MD-SAL into smaller pieces, preferably a layered architecture which allows consumers to enage with MD-SAL and different levels.
=Debugability=
===Runtime generated code makes debugging MD-SAL code fairly complicated and unpredictable.===
*Proposal: Limit or remove the run-time code generation
*Proposal: (Already implemented) Generate the runtime generated code and save the source to a file so it can be examined manually.
=Missing Features=
===“Controller is Ready” status.===
*As a north bound application developer, I need to know when the controller is ready to accept all requests from NB / SB interfaces, so I can be sure requests from my system will be processed correctly (and not fail due to a resource that is missing).
:*	 NOTE:  This problem is solved for RESTConf by making it register for YANG convergence events and have it reload its cache based on these events. However, from the controller, it is impossible to say when the controller is really ready.
===Clustering Services: Hydrogen release was missing MD-SAL clustering.===
*Proposal: (Already is in progress with Akka experiements etc)Make this a priority to implement sooner rather than later. 
=Performance=
Hashtable DataStore Implementation appears to slow exponentially
*Proposal: (Already in progress) Implement a TreeDataStore (some concerns remain)
===Converting BindingAware commits into Binding Independent commits adds debugging complexity, as well as introducing overhead (~5-8%). ===
*Proposal: Consider different code paths for BA/ BI service to maintain performance?
===Process Size: Not sure if it is MD-SAL specifically causing this, but ODL is a large process which consumes a large number of resources. ===
*Proposal: Split the controller up into multiple smaller processes.
