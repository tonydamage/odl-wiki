== Stable Releases ==

Each OpenDaylight major release needs a mechanism for delivering
bugfixes to our users.  Here is a first attempt at describing this
process.  Actual automation details aren't pulled into this draft.
Any and all feedback welcomed.

== Stable Branch ==

A Stable Release is built from a stable branch in each project.  Each
stable branch should have at least one committer, preferably two, on it
(the committer need not be a committer on the main branch).  The final
change in each project's repository leading up to a major release
is the automated update from the maven release plugin's prepare goal.
This updates all artifacts produced from the project to a release
(non-SNAPSHOT) version.  This commit should be the base for a stable
branch (and we can automate creation of this branch).

'''The branch should be named stable/$MAJOR_RELEASE, e.g. stable/hydrogen'''

For example, the controller should have
a branch as if it were created from this simple git command:
 
 git branch stable/hydrogen 48350c456393c0fe530dc29642c7d95c11a8a70a
 
A release on the stable branch can use the same release:prepare and
release:perform goals, simply done on the stable branch and incrementing
artifact release and -SNAPSHOT version numbers to account for stable
branch numbering.

== Artifact Version Numbers ==

This touches on the first issue.  The artifact verion numbers we currently
use are <major.minor.incremental>.  Ideally we'd use 'incremental' to
identify an artifact's update along the stable branch, however, we've
already used it across major release (for example, artifact version
0.5.1 in Hydrogen release updated to 0.5.2-SNAPSHOT for post Hydrogen).
Current proposal is to add a numerical build number as a suffix,
for example 0.5.1-1 (and of course -1-SNAPSHOT during developing the -1 stable release).

'''Stable Artifact Version Numbers should add the suffix -N (where N starts with 1 and increments for each successive stable release) and -N-SNAPSHOT while developing the -N stable release'''
 
For future releases, perhaps we can adopt a more disciplined artifact
versioning.  Something like <major.minor.bugfix>.
 
== Stable Patch Criteria == 

A Stable Patch should contain only important bugfixes that have
corresponding bugs opened in our Bugzilla and the Bugzilla ID should
be included in the git commit message.  The definition of an important
bugfix is something that is best described with guidelines, where
utlimate discretion must be left to the stable branch committer(s).
The purpose of a Stable Patch is to improve stability not increase
risk of regression.  Therefore, a stable fix must meet these criteria:
 
* the fix (or something like it) must already be committed to the master branch
** the fix should be cherry picked from upstream
* the fix must fix a real bug (not theoretical issue) that is being triggered by users or can be easily shown triggerable, such as:
** data corruption
** security vulnerability
** functionality broken w/ no manageable workaround
** regression
* the fix must have a Bugzilla entry opened
* the fix should be small and self-contained
* the fix must not include changes irrelevant to the bug
* the fix must be tested (addition of test case encouraged)
* the fix must not change APIs or add new features
 
The Stable Patch committer is responsible for vetting a fix according
to the above guidelines.  However, the original bug reporter, patch
author, and patch reviewers (or anybody in the community) should share
the responsible for bringing the fix to the attention of the stable
branch committers.  This is a process that should be automated during
the initial upstream review.

== Stable Release Criteria == 

The Stable Release should come at regular intervals after the preceeding
major release and continue until at least the next major release.  The
timing should be driven by a combination of:
 
* critical fix comes in which effectively flushes the patch queue (e.g. security vulnerability)
* time (been a while, flush the queue, assuming there is one)
* patch queue length (not been that long, but lots of changes queued up)

'''We will start off as ASAP, learn from that, and aim for regular time based after that'''
 
Since we are delivering the major release as editions I expect we'll do
the same here.  However, we could consider releasing per project more
frequently.

== General Workflow ==


THIS IS A DRAFT.



[[File:GeneralWorkflow.png|600px]]

== Weekly Meeting Info ==
Meeting Schedule: 

OLD TIME: Thursday; 6:30AM - 7:30AM PDT

NEW TIME (BEGINS 4/15/14):  TUESDAY'S 6:00-7:00AM PDT

WebEX Link: https://cisco.webex.com/cisco/j.php?MTID=m7286d6f07bab770025de48590ac3e155

Passcode:  stablerelease

===April 10, 2014===
*[http://meetings.opendaylight.org/opendaylight-meeting/2014/opendaylight-meeting.2014-04-10-13.31.html Minutes]
*[http://meetings.opendaylight.org/opendaylight-meeting/2014/opendaylight-meeting.2014-04-10-13.31.txt Minutes(text)]
*[http://meetings.opendaylight.org/opendaylight-meeting/2014/opendaylight-meeting.2014-04-10-13.31.log.html Minutes(raw)]

===April 15, 2014===
WebEx Recording:   	
https://cisco.webex.com/cisco/ldr.php?RCID=196d3e2e0650898968cb0b6fc8607d07

== Hydrogen Stable Release Info ==
* [https://docs.google.com/spreadsheet/ccc?key=0AhywWQdJrMqedGZzREV0ZUtCSHkyOGl2a1dmWTJ4Y0E&usp=sharing#gid=0 Hydrogen Stable Release Tasksheet]
* [[OpenDaylight_Controller:Setting_Up_Stability_Branches|Details of Branch Creation]]

== Tips and Tricks ==

=== Tracking stable/hydrogen ===

<pre>
git fetch
git branch --track stable/hydrogen origin/stable/hydrogen
git checkout stable/hydrogen
</pre>

More good data here: http://gitready.com/beginner/2009/03/09/remote-tracking-branches.html

=== Pulling a working branch from stable/hydrogen ===
<pre>
git checkout stable/hydrogen
git checkout -b stable/hydrogen_working
</pre>

=== Cherry picking a patch to your stable/hydrogen working branch ===
<pre>
git checkout stable/hydrogen_working
git cherry-pick <commitid>
</pre>
=== Pushing your changes to stable/hydrogen ===
<pre>
git push ssh://<username>@git.opendaylight.org:29418/<gitreponame>.git HEAD:refs/for/stable/hydrogen
</pre>
for example:
<pre>
git push ssh://eaw@git.opendaylight.org:29418/controller.git HEAD:refs/for/stable/hydrogen
</pre>
