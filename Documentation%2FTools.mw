'''Back to [[CrossProject:Documentation_Group | main Documentation Group page]]'''

The following instructions work with Mac OS X and (probably) Linux. Instructions for Windows clients are awaiting a volunteer.

= Getting Ready =
Before you begin this procedure, be sure to complete the following prerequisites: 
* Install [https://maven.apache.org/download.cgi Maven].
* Install the GitHub client: 
** [https://help.github.com/articles/set-up-git#platform-linux Linux]
** [https://help.github.com/articles/set-up-git#platform-mac Mac OS X]
** [https://help.github.com/articles/set-up-git#platform-windows Windows]

==Git Cheat Sheet==
For a quick overview of Git commands, check out the [[GIT Cheat Sheet | Git Cheat Sheet]]. For more specifics, see below.

== Gerrit Setup ==
Creating a Gerrit account, including registering a public/private key pair, is required for using Git over SSH as documented below. Gerrit is also used for code reviews. If you don't already have an account with established keys, follow the documentation on [[OpenDaylight Controller:Gerrit Setup|setting up Gerrit]].

== Pull code via Git CLI ==
Pull the code by cloning the controller repository:
<pre>
git clone ssh://<username>@git.opendaylight.org:29418/docs.git
</pre>

Note that the command above assumes you've registered a Gerrit account and have a valid keypair for authentication. The public key should be known to Gerrit, and the private key should be on your local system at ~/.ssh/id_rsa.pub.

If you just want to do an anonymous git clone, you can use HTTPS:
<pre>
git clone https://git.opendaylight.org/gerrit/p/docs.git
</pre>

== Setup Gerrit Change-id Commit Msg Hook & default push location ==
The following Git hook automatically inserts a unique Change-Id tag in the footer of each commit message. Git doesn't track hooks, so after pulling the project you'll want to go ahead and grab this one manually. Using this hook is optional, but highly recommended for tracking changes.

<pre>
cd docs
scp -p -P 29418 <username>@git.opendaylight.org:hooks/commit-msg .git/hooks/
chmod 755 .git/hooks/commit-msg
git config remote.origin.push HEAD:refs/for/master
</pre>

= Installing and Editing ODL Documentation =
<ol>
<li> Change to the proper manuals directory and use the  '''mvn install''' command to compile the desired documentation. </li>
<li> Access the compiled guides at ''./manuals/install-guide/target/docbkx/webhelp/'' </li>
<li> Find ASCIIDoc formatting information here: ''http://powerman.name/doc/asciidoc'' </li>
</ol>

= Pushing changes for review =

After making any local changes to the docs and that PDF builds properly in target/docbkx/webhelp you can push your changes for review.

Like many OpenDaylight Projects we suggest the use of git review tool to help in pushing your changes for review by other committers.
git-review is a command-line tool for Git / Gerrit. It makes it easier to configure your git clone, to submit a change or to fetch an existing one.
The upstream project is led by Openstack. Not to be confused with the unrelated Facebook project.

== Installation ==
Before you start, make sure you already have your account and SSH keys set up in Gerrit. See [[OpenDaylight_Controller:Gerrit_Setup]] for instructions.

To install git-review, please see the instructions [http://www.mediawiki.org/wiki/Gerrit/git-review#Installation|here]

== Initial Setup ==
Clone your git repository, and in the root directory enter the following
git review -s
This will set up your connection to Gerrit via git-review

== Submitting Patches ==

Once you've added and committed your changes, you can use git-review to publish to Gerrit

<code>
git review
</code>

Git-review will rebase your changes against the master branch in Gerrit before pushing. It will also notify you of merge conflicts so you can manually resolve them. You can disable the rebase by using the -R or --no-rebase flags.

By default, the Gerrit topic will be the name of your local branch. You can change this using the -t or --topic flags.
<code>
git review -t topic
</code>

== Reviewing Patches ==

If you are downloading code to make changes or test functionality you can use the you can do so as follows:

<code>
git review -d 6150
git commit --amend
git review -t <original-topic> -f
</code>

If you wish to diff between two patch sets you can do so using git-review

<code>
git review -m 6150,3
</code>

Will diff between Patch Set 3 of change 6150 and the latest Patch Set.

= Publishing ODL Documentation =

Documentation will be deployed via site-deploy jobs to a maven site and available online.
