
This page describes the API offered by VTN Manager for components inside OpenDaylight controller.
All the classes described on this page are implemented in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#bundle.api|manager]] bundle and placed in '''org.opendaylight.vtn.manager''' package.

Further, in this page, the package name is omitted during the reference of Java classes other than the one offered by VTN Manager.

:;Object
::java.lang.Object
:;String
::java.lang.String
:;Boolean
::java.lang.Boolean
:;NullPointerException
::java.lang.NullPointerException
:;Serializable
::java.io.Serializable
:;InetAddress
::java.net.InetAddress
:;List
::java.util.List
:;Set
::java.util.Set
:;<div id="Node">Node</div>
::org.opendaylight.controller.sal.core.Node
:;<div id="NodeConnector">NodeConnector</div>
::org.opendaylight.controller.sal.core.NodeConnector
:;<div id="UpdateType">UpdateType</div>
::org.opendaylight.controller.sal.core.UpdateType
:;<div id="Status">Status</div>
::org.opendaylight.controller.sal.utils.Status
:;<div id="StatusCode">StatusCode</div>
::org.opendaylight.controller.sal.utils.StatusCode
:;<div id="DataLinkAddress">DataLinkAddress</div>
::org.opendaylight.controller.sal.packet.address.DataLinkAddress
:;<div id="EthernetAddress">EthernetAddress</div>
::org.opendaylight.controller.sal.packet.address.EthernetAddress
:;<div id="HostNodeConnector">HostNodeConnector</div>
::org.opendaylight.controller.hosttracker.hostAware.HostNodeConnector
:;<div id="IHostFinder">IHostFinder</div>
::org.opendaylight.controller.hosttracker.hostAware.IHostFinder

= Java class =

This section describes Java class offered by VTN Manager as API.

== VTN class ==

This section describes Java class showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.

=== VTenantPath ===
<pre>
public class VTenantPath implements Serializable
</pre>

'''VTenantPath''' is a class that shows the position of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] inside container.
It is used to identify the VTN while executing any operations against it.

==== Constructor ====

===== <div id="VTenantPath:String">VTenantPath(String)</div> =====
<pre>
public VTenantPath(String tenantName)
</pre>

It creates VTenantPath object that shows the position of that [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] having the specified name.

Specify string showing VTN name in <u>tenantName</u>.

*Exception will not occur even if incorrect names like <tt>null</tt> etc. are specified, but if you specify such a VTenantPath object in API of [[#IVTNManager|IVTNManager]] service it will give error.

==== Instance method ====

===== <div id="VTenantPath.getTenantName">getTenantName()</div> =====
<pre>
public String getTenantName()
</pre>

It returns the name of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] configured in VTenantPath object.

===== <div id="VTenantPath.equals:Object">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*Object specified in <u>o</u> is a VTenantPath object.
*The following value inside <u>o</u> is equal to value in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] name

===== <div id="VTenantPath.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VTenantPath object.

===== <div id="VTenantPath.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VTenantPath object.

=== VTenantConfig ===
<pre>
public class VTenantConfig implements Serializable
</pre>

'''VTenantConfig''' is a class that shows the config information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].
This is used during the creation or modification of VTN for specifying VTN information to VTN Manager.

==== Constructor ====

===== <div id="VTenantConfig:String">VTenantConfig(String)</div> =====
<pre>
public VTenantConfig(String desc)
</pre>

It creates VTenantConfig object that shows config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

Specify any description for VTN in <u>desc</u>.
<tt>null</tt> will imply that description is not configured for VTN.

If this constructor is used, then Flow entry timeout value becomes unset.

===== <div id="VTenantConfig:String-int-int">VTenantConfig(String, int, int)</div> =====
<pre>
public VTenantConfig(String desc, int idle, int hard)
</pre>

It creates VTenantConfig object showing the config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

Specify the following values in argument.

:;desc
::Specify any description for VTN.
::*<tt>null</tt> will imply that description is not configured for VTN.
:;idle
::Specify number of seconds that you want to configure in idle_timeout of flow entry configured by VTN. The flow entries configured in switch by VTN are removed if they are not referred for the specified seconds.
::*The range of value that can be specified is from '''0''' to '''65535'''.
::*'''0''' means indefinite period.
::*Negative value will be ignored and treated as if no value is set.
:;hard
::Specify number of seconds that you want to configure in hard_timeout of flow entry configured by VTN. The flow entries configured in switch by VTN are removed after the specified time elapses.
::*The range of value that can be specified is from '''0''' to '''65535'''.
::*'''0''' means indefinite period.
::*Negative value will be ignored and treated as if no value is set.

The value set in <u>hard</u> must be bigger than <u>idle</u> if the value set in both <u>idle</u> and <u>hard</u> is bigger than 0.
Exception will not occur even if incorrect value is specified in <u>idle</u> or <u>hard</u>, but there will be error if you specify such VTenantConfig object in API of [[#IVTNManager|IVTNManager]] service.

==== Instance Method ====

===== <div id="VTenantConfig.getDescription">getDescription()</div> =====
<pre>
public String getDescription()
</pre>

It returns the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] description set in VTenantConfig object.
It returns <tt>null</tt> in case of no description.

===== <div id="VTenantConfig.getIdleTimeout">getIdleTimeout()</div> =====
<pre>
public int getIdleTimeout()
</pre>

It returns seconds configured in idle_timeout of flow entry set in VTenantConfig object.

It returns -1 in case no value is configured.

===== <div id="VTenantConfig.getIdleTimeoutValue">getIdleTimeoutValue()</div> =====
<pre>
public Integer getIdleTimeoutValue()
</pre>

It returns the Integer object for seconds configured in idle_timeout of flow entry set in VTenantConfig object.

It returns <tt>null</tt> in case no value is configured.

===== <div id="VTenantConfig.getHardTimeout">getHardTimeout()</div> =====
<pre>
public int getHardTimeout()
</pre>

It returns the seconds configured in hard_timeout of flow entry set in VTenantConfig object.

It returns -1 in case no value is configured.

===== <div id="VTenantConfig.getHardTimeoutValue">getHardTimeoutValue()</div> =====
<pre>
public Integer getHardTimeoutValue()
</pre>

It returns the Integer object for seconds configured in hard_timeout of flow entry set in VTenantConfig object.

It returns <tt>null</tt> in case no value is configured.

===== <div id="VTenantConfig.equals:Object">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*The object specified in <u>o</u> is a VTenantConfig object.
*The following values stored in <u>o</u> are the same as in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] description
**Seconds set in idle_timeout of Flow entry
**Seconds set in hard_timeout of Flow entry

===== <div id="VTenantConfig.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VTenantConfig object.

===== <div id="VTenantConfig.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VTenantConfig object.

=== VTenant ===
<pre>
public class VTenant extends VTenantConfig
</pre>

'''VTenant''' is a class that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.
It inherits [[#VTenantConfig|VTenantConfig]] class and also holds VTN config information.
VTN Manager passes the VTN information to other components by passing the VTenant object having VTN information .

==== Constructor ====

===== <div id="VTenant:String-VTenantConfig">VTenant(String, VTenantConfig)</div> =====
<pre>
public VTenant(String tenantName, VTenantConfig tconf)
</pre>

It creates VTenant object that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.

Specify following values in argument.

:;tenantName
::Specify VTN name.
:;tconf
::Specify [[#VTenantConfig|VTenantConfig]] object that shows the config information of VTN.
::*All the values stored inside <u>tconf</u> get copied to VTenant object.
::*NullPointerException occurs if you specify <tt>null</tt>.

==== Instance method ====

===== <div id="VTenant.getName">getName()</div> =====
<pre>
public String getName()
</pre>

It returns the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] name configured in VTenant object.

===== <div id="VTenant.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*The object specified in <u>o</u> is a VTenant object.
*The following values stored in <u>o</u> are the same as in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] name
**VTN description
**Seconds set in idle_timeout of Flow entry
**Seconds set in hard_timeout of Flow entry

===== <div id="VTenant.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VTenant object.

===== <div id="VTenant.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VTenant object.

== VBridge class ==

This section describes the Java class that shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] information.

=== VBridgePath ===
<pre>
public class VBridgePath extends VTenantPath
</pre>

'''VBridgePath''' is a class for showing the position of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] inside container.
It inherits [[#VTenantPath|VTenantPath]] and also stores position information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] to which vBridge belongs.
This is used for identifying the vBridge during any operation performed against it.

==== Constructor ====

===== <div id="VBridgePath:String-String">VBridgePath(String, String)</div> =====
<pre>
public VBridgePath(String tenantName, String bridgeName)
</pre>

It creates VBRidgePath object showing position of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This constructor specifies the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] to which vBridge belongs by using name.

Specify following values in argument.

:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

Exception will not occur even if incorrect names like <tt>null</tt> etc. are specified in <u>tenantName</u> or <u>bridgeName</u> but if you specify such VBridgePath object in API of [[#IVTNManager|IVTNManager]] service, it will give error.

===== <div id="VBridgePath:VTenantPath-String">VBridgePath(VTenantPath, String)</div> =====
<pre>
public VBridgePath(VTenantPath tenantPath, String bridgeName)
</pre>

It creates VBRidgePath object that shows the position of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This constructor specifies the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] to which vBridge belongs by using [[#VTenantPath|VTenantPath]].

Specify following values in argument.

:;tenantPath
::Specify [[#VTenantPath|VTenantPath]] object that specifies the position of VTN.
::*All the values inside <u>tenantPath</u> get copied to VBridgePath object.
::*NullPointerException  will occur if you specify <tt>null</tt>.
:;bridgeName
::Specify vBridge name.
::*Exception will not occur even if incorrect names like <tt>null</tt> etc. are specified but if you specify such VBridgePath object in API of [[#IVTNManager|IVTNManager]] service, it will give error.

==== Instance method ====

===== <div id="VBridgePath.getBridgeName">getBridgeName()</div> =====
<pre>
public String getBridgeName()
</pre>

It returns the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] name set in VBridgePath object.

===== <div id="VBridgePath.equals:Object">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*The object specified in <u>o</u> is a VBridgePath object.
*The following values inside <u>o</u> are equal to value in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] name
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] name

===== <div id="VBridgePath.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VBridgePath object.

===== <div id="VBridgePath.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VBridgePath object.

=== VBridgeConfig ===
<pre>
public class VBridgeConfig implements Serializable
</pre>

'''VBridgeConfig''' is a class showing config information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This is used for specifying vBridge information to VTN Manager during creation or modification of vBridge.

==== Constructor ====

===== <div id="VBridgeConfig:String">VBridgeConfig(String)</div> =====
<pre>
public VBridgeConfig(String desc)
</pre>

It creates VBridgeConfig object showing config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify any description for vBridge in <u>desc</u>.
<tt>null</tt> will imply that description is not configured for vBridge.

[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|Aging]] interval of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] becomes unset if this constructor is used.

===== <div id="VBridgeConfig:String-int">VBridgeConfig(String, int)</div> =====
<pre>
public VBridgeConfig(String desc, int age)
</pre>

It creates VBridgeConfig object that shows config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify following values in argument.

:;desc
::Specify any description for vBridge
::*<tt>null</tt> will imply that description is not configured for vBridge.
:;age
::Specify [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] interval for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] in seconds.
::*The range of value that can be specified is from '''10''' to '''1000000'''.
::*Negative value will be ignored and treated as no value set.

Exception will not occur even if incorrect value is specified in <u>age</u>, but there will be error if you specify such VBridgeConfig object in API of [[#IVTNManager|IVTNManager]] service.

==== Instance method ====

===== <div id="VBridgeConfig.getDescription">getDescription()</div> =====
<pre>
public String getDescription()
</pre>

It returns [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] description configured in VBridgeConfig object.
It returns <tt>null</tt> if no description is set.

===== <div id="VBridgeConfig.getAgeInterval">getAgeInterval()</div> =====
<pre>
public int getAgeInterval()
</pre>

It returns the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] interval in seconds for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] configured in VBridgeConfig object.

It returns -1 if no value is set.

===== <div id="VBridgeConfig.getAgeIntervalValue">getAgeIntervalValue()</div> =====
<pre>
public Integer getAgeIntervalValue()
</pre>

It returns Integer object showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] interval (seconds) for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] configured in VBridgeConfig object.

It returns <tt>null</tt> when no value is set.

===== <div id="VBridgeConfig.equals:Object">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*The object specified in <u>o</u> is a VBridgeConfig object.
*The following values inside <u>o</u> are equivalent to the value in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] description
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] interval for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]]

===== <div id="VBridgeConfig.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VBridgeConfig object.

===== <div id="VBridgeConfig.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VBridgeConfig object.

=== VBridge ===
<pre>
public class VBridge extends VBridgeConfig
</pre>

'''VBridge''' is a class showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] information.
It inherits [[#VBridgeConfig|VBridgeConfig]] class and also holds vBridge config information.
VTN Manager passes the vBridge information to other components by passing vBridge object having the vBridge information.

==== Constructor ====

===== <div id="VBridge:String-VNodeStaet-int-VBridgeConfig">VBridge(String, VNodeState, int, VBridgeConfig)</div> =====
<pre>
public VBridge(String bridgeName, VNodeState state, int faults, VBridgeConfig bconf)
</pre>

It creates VBridge object showing the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] information.

Specify following values in argument.

:;bridgeName
::Specify vBridge name.
:;state
::Specify [[#VNodeState|VNodeState]] object showing vBridge state.
::*The state will be treated as [[#VNodeState.UNKNOWN|VNodeState.UNKNOWN]] if <tt>null</tt> is specified.
:;faults
::Specify the number of path faults detected inside vBridge.
:;bconf
::Specify [[#VBridgeConfig|VBridgeConfig]] object showing config information of vBridge.
::*All the values saved in <u>bconf</u> are copied to VBridge object.
::*NullPointerException occurs if you specify <tt>null</tt>.

==== Instance method ====

===== <div id="VBridge.getName">getName()</div> =====
<pre>
public String getName()
</pre>

It returns [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] name configured in VBridge object.

===== <div id="VBridge.getState">getState()</div> =====
<pre>
public VNodeState getState()
</pre>

It returns the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] state configured in VBridge object.

*[[#VNodeState.UNKNOWN|VNodeState.UNKNOWN]] is returned when vBridge is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state.UNKNOWN|UNKNOWN]] state.
*[[#VNodeState.DOWN|VNodeState.DOWN]] is returned when vBridge is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state.DOWN|DOWN]] state.
*[[#VNodeState.UP|VNodeState.UP]] is returned when vBridge is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state.UP|UP]] state.

==== <div id="VBridge.getFaults">getFaults()</div> ====
<pre>
public int getFaults()
</pre>

It returns the number of path faults configured inside VBridge object.
It returns '''0''' is path fault has not been detected.

The value returned by this method shows the number of paths that could not be configured by VTN Manager between the switches that constitute [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] because the paths were broken.

Number of path faults is counted for both directions of the path.
E.g., when switch '''A''' and switch '''B''' are separated, then the path from switch '''A''' to switch '''B''' and path from switch '''B''' to switch '''A''' are counted as different paths.

===== <div id="VBridge.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*The object specified in <u>o</u> is a VBridge object.
*The following values inside <u>o</u> are equal to the values in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] name
**vBridge description
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] interval for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]]
**Number of path faults detected inside vBridge

===== <div id="VBridge.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VBridge object.

===== <div id="VBridge.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VBridge object.

== Virtual Interface class ==

This section describes the Java class that shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]] information.

=== VBridgeIfPath ===

'''VBridgeIfPath''' is a class showing position of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
It inherits [[#VBridgePath|VBridgePath]] and stores position information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] and [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] to which virtual interface belongs.

This is used for specifying target vbridge interface when performing vBridge interface operations.

==== Constructor ====

===== <div id="VBridgeIfPath:String-String-String">VBridgeIfPath(String, String, String)</div> =====
<pre>
public VBridgeIfPath(String tenantName, String bridgeName, String ifName)
</pre>

It creates VBridgeIfPath object for showing the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] position inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This constructor specifies the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] and vBridge to which virtual interface belongs by using name.

Specify following values in argument.

:;tenantName
:: Specify VTN name.
:;bridgeName
:: Specify vBridge name.
:;ifName
:: Specify virtual interface name.

Exception will not occur even if incorrect value like <tt>null</tt> etc. is specified in <u>tenantName</u>, <u>bridgeName</u> or <u>ifName</u>, but there will be error if such VBridgeIfPath object is specified in API of [[#IVTNManager|IVTNManager]] service.

===== <div id="VBridgeIfPath:VBridgePath-String">VBridgeIfPath(VBridgePath, String)</div> =====
<pre>
public VBridgeIfPath(VBridgePath bridgePath, String ifName)
</pre>

It creates VBridgeIfPath object showing position of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This constructor specifies the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] to which virtual interface belongs by using [[#VBridgePath|VBridgePath]].

Specify following values in argument.

:;bridgePath
::Specify [[#VBridgePath|VBridgePath]] object that specifies vBridge location.
::*All the values in <u>bridgePath</u> are copied in VBridgeIfPath object.
::*NullPointerException occurs if you specify <tt>null</tt>.
:;ifName
::Specify name of virtual interface.
::*Exception will not occur even if incorrect value like <tt>null</tt> etc. is specified, but there will be error if such VBridgeIfPath object is specified in API of [[#IVTNManager|IVTNManager]] service.

==== Instance method ====

===== <div id="VBridgeIfPath.getInterfaceName">getInterfaceName()</div> =====
<pre>
public String getInterfaceName()
</pre>

It returns [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] name configured in vBridgeIfPath object.

===== <div id="VBridgeIfPath.equals:Object">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*The object specified in <u>o</u> is a VBridgeIfPath object.
**The following values inside <u>o</u> are equal to the values in own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] name
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] name
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] name

===== <div id="VBridgeIfPath.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VBridgeIfPath object.

===== <div id="VBridgeIfPath.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VBridgeIfPath object.

=== VInterfaceConfig ===
<pre>
public class VInterfaceConfig implements Serializable
</pre>

'''VInterfaceConfig''' is a class that shows config information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]].
This is used for specifying virtual interface information to VTN Manager during creation or modification of interface in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Constructor ====

===== <div id="VInterfaceConfig:String-Boolean">VInterfaceConfig(String, Boolean)</div> =====
<pre>
public VInterfaceConfig(String desc, Boolean enabled)
</pre>

It creates VInterfaceConfig object that shows the config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]].

Specify following values in argument.

:;desc
::Specify any description for virtual interface in <u>desc</u>.
::*<tt>null</tt> will imply that description is not configured for interface.
:;enabled
::Specify Boolean object showing whether virtual interface is to be enabled or not.
::*Specify '''Boolean.TRUE''' for enable and '''Boolean.FALSE''' for disable.
::*<tt>null</tt> will imply that enable or disable interface is not specified.

==== Instance method ====

===== <div id="VInterfaceConfig.getDescription">getDescription()</div> =====
{{{
#!java
public String getDescription()
}}}

It returns description of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] configured in VInterfaceConfig object.
It returns <tt>null</tt> if description is not set.

===== <div id="VInterfaceConfig.getEnabled">getEnabled()</div> =====
<pre>
public Boolean getEnabled()
</pre>

It returns the enable/disable configuration of interface set in VInterfaceConfig object.

*It returns '''Boolean.TRUE''' if it is configured as enable.
*It returns '''Boolean.FALSE''' if it is configured as disable.
*It returns <tt>null</tt> if enable or disable is not specified.

===== <div id="VInterfaceConfig.equals:Object">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether object specified in <u>o</u> is equal to own object or not.

It returns true only when all the following conditions are met.

*Object specified by <u>o</u> is VInterfaceConfig object.
*Following values maintained in the <u>o</u> are equal to the values inside own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|Virtual interface]] description
**Interface enable/ disable configuration

===== <div id="VInterfaceConfig.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VInterfaceConfig object.

===== <div id="VInterfaceConfig.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VInterfaceConfig object.

=== VInterface ===
<pre>
public class VInterface extends VInterfaceConfig
</pre>

'''VInterface''' is a class that shows information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]].
It inherits [[#VInterfaceConfig|VInterfaceConfig]] class and config information of virtual interface is also maintained.
VTN Manager passes the virtual interface information to other components by passing the VInterface object that maintains virtual interface information.

==== Constructor ====

===== <div id="VInterface:String-VNodeState-VNodeState-VInterfaceConfig">VInterface(String, VNodeState, VNodeState, VInterfaceConfig)</div> =====
<pre>
public VInterface(String ifName, VNodeState state, VNodeState estate, VInterfaceConfig iconf)
</pre>

It creates VInterface object that shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] information.

Specify following values in argument.

:;ifName
::Specify the interface name.
:;state
::Specify [[#VNodeState|VNodeState]] object that shows the state of interface.
::*If <tt>null</tt> is specified it is treated as if [[#VNodeState.UNKNOWN|VNodeState.UNKNOWN]] is specified.
:;estate
::Specify the [[#VNodeState|VNodeState]] object that shows the status of network elements mapped to interface.
::*If <tt>null</tt> is specified, then it will be treated as if [[#VNodeState.UNKNOWN|VNodeState.UNKNOWN]] is specified.
:;iconf
::Specify the [[#VInterfaceConfig|VInterfaceConfig]] object that shows the config information of interface.
::*All the values in <u>iconf</u> will be copied to VInterface object.
::*NullPointerException will occur if <tt>null</tt> is specified.

==== Instance method ====

===== <div id="VInterface.getName">getName()</div> =====
<pre>
public String getName()
</pre>

It returns the name of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] configured in VInterface object.

===== <div id="VInterface.getState">getState()</div> =====
<pre>
public VNodeState getState()
</pre>

It returns the state of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] configured in VInterface object.

*If interface is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state.UNKNOWN|UNKNOWN]] state, then [[#VNodeState.UNKNOWN|VNodeState.UNKNOWN]] is returned.
*If interface is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state.DOWN|DOWN]] state, then [[#VNodeState.DOWN|VNodeState.DOWN]] is returned.
*If interface is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state.UP|UP]] state, then [[#VNodeState.UP|VNodeState.UP]] is returned.

===== <div id="VInterface.getEntityState ">getEntityState()</div> =====
<pre>
#java
public VNodeState getEntityState()
</pre>

It returns the state of network elements mapped to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] configured in VInterface object.
It returns the state of physical port of switch that is mapped, if information of interface configured with [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port Mapping]] is maintained.

*[[#VNodeState.UNKNOWN|VNodeState.UNKNOWN]] gets returned if network elements are not mapped to interface.
*[[#VNodeState.DOWN|VNodeState.DOWN]] gets returned if mapped network elements are not operating.
*[[#VNodeState.UP|VNodeState.UP]] is returned if mapped network elements are operating.

Status of mapped network elements is configured irrespective of whether the interface is enabled or disabled.
E.g., even if the interface is disabled, this method returns [[#VNodeState.UP|VNodeState.UP]] when mapped network elements are operating.

===== <div id="VInterface.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether object specified by <u>o</u> is equal to own object or not.

It returns true only if all the conditions mentioned below are met.

*Object specified by <u>o</u> is VInterface object.
*Following values maintained in the <u>o</u> are equal to the value inside own object.
**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|Virtual interface]] name
**Interface description
**Enable/ disable configuration of interface
**Value of [[#VNodeState|VNodeState]] that shows the state of interface
**Value of [[#VNodeState|VNodeState]] that shows the status of mapped network elements

===== <div id="VInterface.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of VInterface object.

===== <div id="VInterface.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of VInterface object.

== Class for Port mapping ==

This section describes the Java class that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] information.

=== SwitchPort ===
<pre>
public class SwitchPort implements Serializable
</pre>

'''SwitchPort''' class is a class that shows the location of port of physical switch.
This is used to specify the port of physical switch to be mapped during configuration of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]].

SwitchPort maintains only the information that identifies the port within physical switch and does that maintain the information that identifies physical switch.
Port of physical switch to be mapped by Port mapping is specified by the combination of [[#Node|Node]] object, which shows physical switch, and SwitchPort object.

==== Constructor ====

===== <div id="SwitchPort:String">SwitchPort(String)</div> =====
<pre>
public SwitchPort(String name)
</pre>

It creates SwitchPort that specifies the port of physical switch.
This constructor specifies port by the name set in the port.

Specify in <u>name</u> the name configured in the port of physical switch.

*String containing 1 or more characters must be specified
*Exception will not occur even if <tt>null</tt> or empty string is specified, but if that SwitchPort object is used to configure [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]], then it will give an error.

===== <div id="SwitchPort:String-String">SwitchPort(String, String)</div> =====
<pre>
public SwitchPort(String type, String id)
</pre>

It creates the SwitchPort object that specifies port of physical switch.
This constructor specifies the port by type and ID of [[#NodeConnector|NodeConnector]].

Specify following values in argument.

:;type
::Specify the string that shows the type of NodeConnector.
::*Specify '''<tt>"OF"</tt>''' for physical port of OpenFlow switch.
:;id
::Specify the string representation of identifier of NodeConnector.
::*Specify string representation of port number for physical port of OpenFlow switches.

Exception will not occur even if <tt>null</tt> or empty string is specified in <u>type</u> or <u>id</u> but if that SwitchPort object is used to configure [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]], then it will give an error.

===== <div id="SwitchPort:String-String-String">SwitchPort(String, String, String)</div> =====
<pre>
public SwitchPort(String name, String type, String id)
</pre>

It creates the SwitchPort object that specifies the port of physical switch.
This constructor specifies the port by using the name configured in port, and type and ID of [[#NodeConnector|NodeConnector]].
[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] is enabled only when port of physical switch exists for specified NodeConnector and when the name of that port matches with the string specified in <u>name</u>.

Specify following values in argument.

:;name
::Specify the name configured in the port of physical switch.
:;type
::Specify the string that shows the type of NodeConnector.
:;id
::Specify the string representation of identifier of NodeConnector.

If <tt>null</tt> is specified in argument it is treated as the conditions for that argument were not specified.
However, if following conditions are not met, then error will be given if this SwitchPort object is used to configure [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]].

*If <tt>null</tt> is specified in <u>name</u>, then you need to specify value other than <tt>null</tt> in both <u>type</u> and <u>id</u> so that NodeConnector can be identified.
*When <tt>null</tt> is specified in both <u>type</u> and <u>id</u>, then you need to specify a string containing 1 or more characters in <u>name</u>  so that port name can be identified.
*It is not possible that <tt>null</tt> is specified only in one value out of <u>type</u> and <u>id</u>, and value other than <tt>null</tt> is specified in the other one.

==== Instance method ====

===== <div id="SwitchPort.getName">getName()</div> =====
<pre>
public String getName()
</pre>

It returns the name of physical port configured in SwitchPort object.
It returns <tt>null</tt> if the same is not configured.

===== <div id="SwitchPort.getType">getType()</div> =====
<pre>
public String getType()
</pre>

It returns the string that shows the type of [[#NodeConnector|NodeConnector]] configured in SwitchPort object.
It returns <tt>null</tt> if the same is not configured.

===== <div id="SwitchPort.getId">getId()</div> =====
<pre>
public String getId()
</pre>

It returns the string that shows the identifier of [[#NodeConnector|NodeConnector]] set in SwitchPort object.
It returns <tt>null</tt> if the same is not configured.

===== <div id="SwitchPort.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*Object specified by <u>o</u> is SwitchPort object.
*Following values maintained in the <u>o</u> are equal to the value inside own object.
**Name of the port configured in physical switch
**Type of [[#NodeConnector|NodeConnector]]
**Identifier of NodeConnector

===== <div id="SwitchPort.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of SwitchPort object.

===== <div id="SwitchPort.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns string representation of SwitchPort object.

=== PortMapConfig ===
<pre>
public class PortMapConfig implements Serializable
</pre>

'''PortMapConfig''' is a class that shows the config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
This is used to specify config information to VTN Manager during configuration of Port mapping.

==== Constructor ====

===== <div id="PortMapConfig:Node-SwitchPort-short">PortMapConfig(Node, SwitchPort, short)</div> =====
<pre>
public PortMapConfig(Node node, SwitchPort port, short vlan)
</pre>

It creates PortMapConfig object that shows the config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]].

Specify following values in argument.

:;node
::Specify the [[#Node|Node]] object corresponding to the physical switch that you want to map to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
:;port
::Specify [[#SwitchPort|SwitchPort]] object that specifies port within <u>node</u>.
:;vlan
::Specify in numbers the VLAN ID that you want to map.
::*'''0''' means untagged Ethernet frame.

==== Instance method ====

===== <div id="PortMapConfig.getNode">getNode()</div> =====
<pre>
public Node getNode()
</pre>

It returns [[#Node|Node]] object that is configured in PortMapConfig object.

===== <div id="PortMapConfig.getPort">getPort()</div> =====
<pre>
public SwitchPort getPort()
</pre>

It returns [[#SwitchPort|SwitchPort]] object that is configured in PortMapConfig object.

===== <div id="PortMapConfig.getVlan">getVlan()</div> =====
<pre>
public short getVlan()
</pre>

It returns the VLAN ID configured in PortMapConfig object.

It returns '''0''' if configuration has been done to map Untagged Ethernet frames.

===== <div id="PortMapConfig.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*Object specified by <u>o</u> is PortMapConfig object.
*Following values maintained internally in <u>o</u>, are equal to the values within own object.
**[[#Node|Node]] object corresponding to physical switch
**[[#SwitchPort|SwitchPort]] object that specifies the port of physical switch
**VLAN ID

===== <div id="PortMapConfig.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns hash code of PortMapConfig object.

===== <div id="PortMapConfig.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns the string representation of PortMapConfig object.

=== PortMap ===
<pre>
public class PortMap implements Serializable
</pre>

'''PortMap''' is a class that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] information set in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
VTN Manager passes the Port mapping information to other components by passing PortMap object that maintains Port mapping information.

==== Constructor ====

===== <div id="PortMap:PortMapConfig-NodeConnector">PortMap(PortMapConfig, NodeConnector)</div> =====
<pre>
public PortMap(PortMapConfig pmconf, NodeConnector nc)
</pre>

It creates PortMap object that shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] information.

Specify following values in argument.

:;pmconf
::Specify [[#PortMapConfig|PortMapConfig]] object that shows config information of Port mapping.
:;nc
::Specify [[#NodeConnector|NodeConnector]] object corresponding to physical port actually mapped in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]]
::*If the physical port that fulfills the conditions specified by config information does not exist, specify <tt>null</tt>.

==== Instance method ====

===== <div id="PortMap.getConfig">getConfig()</div> =====
<pre>
public PortMapConfig getConfig()
</pre>

It returns the [[#PortMapConfig|PortMapConfig]] object set in PortMap object.
Config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] is included in the values that are returned.

===== <div id="PortMap.getNodeConnector">getNodeConnector()</div> =====
<pre>
public NodeConnector getNodeConnector()
</pre>

It returns the [[#NodeConnector|NodeConnector]] object set in PortMap object.

*If physical port is actually mapped to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]], it returns the NodeConnector object corresponding to that port.
*It returns <tt>null</tt> if no physical port meets the conditions specified by [[#PortMapConfig|PortMapConfig]] object.

===== <div id="PortMap.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*Object specified by <u>o</u> is PortMap object.
*Following values maintained in <u>o</u> are same as the values within own object.
**[[#PortMapConfig|PortMapConfig]] object that shows config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]]
**[[#NodeConnector|NodeConnector]] object corresponding to mapped physical switch port

===== <div id="PortMap.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns the hash code of PortMap object.

===== <div id="PortMap.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns the string representation of PortMap object.

== Class for VLAN mapping ==

This section explains the Java class that shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] information.

=== VlanMapConfig ===
<pre>
public class VlanMapConfig implements Serializable
</pre>

'''VlanMapConfig''' is a class that shows the config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN  mapping]] for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This is used to specify config information to VTN Manager during configuration of VLAN mapping.

==== Constructor ====

===== <div id="VlanMapConfig:Node-short">VlanMapConfig(Node, short)</div> =====
<pre>
public VlanMapConfig(Node node, short vlan)
</pre>

It creates the VlanMapConfig object that shows the config information of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]].

Specify the following values in the parameter.

:;node
::Specify the [[#Node|Node]] object that corresponds to the physical switch that you want to map.
::*Specify <tt>null</tt> if you want to map all switches instead of identifying a particular switch.
:;vlan
::Specify in numbers the VLAN ID that you want to map.
::*'''0''' means untagged Ethernet frame.

==== Instance method ====

===== <div id="VlanMapConfig.getNode">getNode()</div> =====
<pre>
public Node getNode()
</pre>

It returns that [[#Node|Node]] object configured in VlanMapConfig object.

===== <div id="VlanMapConfig.getVlan">getVlan()</div> =====
<pre>
public short getVlan()
</pre>

It returns the VLAN ID configured in VlanMapConfig object.

It returns '''0''' if the configuration has been done to map Untagged Ethernet frame.

===== <div id="VlanMapConfig.isOverlapped:VlanMapConfig">isOverlapped(VlanMapConfig)</div> =====
<pre>
public boolean isOverlapped(VlanMapConfig vlconf)
</pre>

It determines whether there is a duplicate of the VLAN mapped by VlanMapConfig object.

Specify in <u>vlconf</u> the VlanMapConfig object that you want to judge.
Further, NullPointerException will occur if you specify <tt>null</tt> in <u>vlconf</u>.

It compares the config information stored in <u>vlconf</u> and own object, and returns true if all the following conditions are met.
It will return false in other cases.

*Value of VLAN ID is equal.
*Same Node object is configured, or if Node object is not configured in one of the two.

===== <div id="VlanMapConfig.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*Object specified in <u>o</u> is a VlanMapConfig object.
*Values stored inside <u>o</u> are equal to the values in own object.
**[[#Node|Node]] object corresponding to the physical switch to be mapped
**VLAN ID

===== <div id="VlanMapConfig.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns the hash code of VlanMapConfig object.

===== <div id="VlanMapConfig.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns the string representation of VlanMapConfig object.

=== VlanMap ===
<pre>
public class VlanMap extends VlanMapConfig
</pre>

'''VlanMap''' is a class that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]] information configured in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
It inherits the [[#VlanMapConfig|VlanMapConfig]] class, and it also stores the config information of VLAN Mapping.
VTN Manager passes the VLAN Mapping information to other components by passing the VlanMap object that stores the VLAN Mapping information.

==== Constructor ====

===== <div id="VlanMap:String-Node-short">VlanMap(String, Node, short)</div> =====
<pre>
public VlanMap(String id, Node node, short vlan)
</pre>

It creates the VlanMap object that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]] information.

Specify the following values in the parameter.

:;id
::Specify the identifier allocated in VLAN mapping.
:;node
::Specify the [[#Node|Node]] object specified in config information of VLAN Mapping.
:;vlan
::Specify the VLAN ID specified in config information of VLAN Mapping.

==== Instance method ====

===== <div id="VlanMap.getId">getId()</div> =====
<pre>
public String getId()
</pre>

It returns the identifier allocated in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]].

===== <div id="VlanMap.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object or not.

It returns true only if all the following conditions are met.

*Object specified in <u>o</u> is a VlanMap object.
*Values stored inside <u>o</u> are equal to the values in own object.
**[[#Node|Node]] object corresponding to the physical switch to be mapped
**VLAN ID
**Identifier allocated in VLAN Mapping

===== <div id="VlanMap.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns the hash code of VlanMap object.

===== <div id="VlanMap.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns the string representation of VlanMap object.

== MAC address table class ==

This section describes the Java class that shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] information inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

=== MacAddressEntry ===
<pre>
public class MacAddressEntry implements Serializable
</pre>

'''MacAddressEntry''' is a class that shows the MAC address information learned inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]].
VTN Manager passes the MAC address information inside MAC address table to other components by passing the MacAddressEntry object that stores the MAC address information.

==== Constructor ====

===== <div id="MacAddressEntry:DataLinkAddress-short-NodeConnector-InetAddress:">MacAddressEntry</div> =====
<pre>
public MacAddressEntry(DataLinkAddress addr, short vlan, NodeConnector nc, InetAddress[] ipaddrs)
</pre>

It shows the MacAddressEntry  object that shows the MAC address information.

:;addr
::Specify the [[#DataLinkAddress|DataLinkAddress]] object that shows the MAC address.
::*<tt>null</tt> must not be specified. Behavior is not defined if <tt>null</tt> is specified.
:;vlan
::Specify the VLAN ID configured in the Ethernet frame where MAC address is detected.
::*Specify '''0''' if VLAN tag is not present.
:;nc
::Specify the [[#NodeConnector|NodeConnector]] object corresponding to the physical port of the switch where MAC address is detected.
::*<tt>null</tt> must not be specified. Behavior is not defined if <tt>null</tt> is specified.
:;ipaddrs
::Specify the InetAddress  object that shows the IP address configured in Ethernet frame where MAC address is detected.
::*Specify <tt>null</tt> if IP header is not present in the Ethernet frame.

==== Instance method ====

===== <div id="MacAddressEntry.getAddress">getAddress()</div> =====
<pre>
public DataLinkAddress getAddress()
</pre>

It returns that [[#DataLinkAddress|DataLinkAddress]] object that shows the MAC address that was detected.

===== <div id="MacAddressEntry.getVlan">getVlan()</div> =====
<pre>
public short getVlan()
</pre>

It returns the VLAN ID configured in the Ethernet frame where MAC address is detected.

It returns '''0''' if the VLAN tag is not configured in the Ethernet frame where MAC address is detected.

===== <div id="MacAddressEntry.getNodeConnector">getNodeConnector()</div> =====
<pre>
public NodeConnector getNodeConnector()
</pre>

It returns the [[#NodeConnector|NodeConnector]] object corresponding to the physical port of the switch where MAC address is detected.

===== <div id="MacAddressEntry.getInetAddresses">getInetAddresses()</div> =====
<pre>
public InetAddress[] getInetAddresses()
</pre>

It returns the InetAddress  object that shows the IP address configured in Ethernet frame where MAC address is detected.

It returns <tt>null</tt> if IP header is not configured in the Ethernet frame where MAC address is detected.

===== <div id="MacAddressEntry.equals">equals(Object)</div> =====
<pre>
public boolean equals(Object o)
</pre>

It determines whether the object specified in <u>o</u> is equal to own object.

It returns true only if all the following conditions are met.

*Object specified in <u>o</u> is a MacAddressEntry object.
*Values stored inside <u>o</u> are equal to the values in own object.
**[[#DataLinkAddress|DataLinkAddress]] object corresponding to the MAC address
**[[#NodeConnector|NodeConnector]] object corresponding to the physical port of the switch
**InetAddress  object that shows the IP address corresponding to MAC address

===== <div id="MacAddressEntry.hashCode">hashCode()</div> =====
<pre>
public int hashCode()
</pre>

It returns the hash code of the MacAddressEntry object.

===== <div id="MacAddressEntry.toString">toString()</div> =====
<pre>
public String toString()
</pre>

It returns the string representation of MacAddressEntry object.

== Other classes ==

=== VNodeState ===
<pre>
public enum VNodeState
</pre>

'''VNodeState''' is an Enumeration class that shows the status of virtual nodes, like [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] etc., present in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

==== Constants ====

VNodeState defines the following constants.

:;<div id="VNodeState.UNKNOWN">UNKNOWN</div>
::It implies that the status of virtual node cannot be determined.
:;<div id="VNodeState.DOWN">DOWN</div>
::It implies that a part of the virtual node is not operating normally.
:;<div id="VNodeState.UP">UP</div>
::It implies that the virtual node is operating normally.

==== Instance method ====

===== <div id="VNodeState.getValue">getValue()</div> =====
<pre>
public int getValue()
</pre>

It returns the numeric representation of VNodeState object.

=== VTNException ===
<pre>
public class VTNException extends Exception
</pre>

'''VTNException''' is an exception for notifying errors that occur in OSGi services provided by VTN Manager.
It stores the [[#Status|Status]] showing the cause of internal error.

==== Constructor ====

===== <div id="VTNException:Status">VTNException(Status)</div> =====
<pre>
public VTNException(Status status)
</pre>

It creates the VTNException object that internally stores the [[#Status|Status]] specified in <u>status</u>. Message configured in <u>status</u> will get configured in exception message.

===== <div id="VTNException:Status-String">VTNException(Status, String)</div> =====
<pre>
public VTNException(StatusCode code, String desc)
</pre>

It creates the VTNException  object that internally stores the [[#Status|Status]] created from <u>code</u> and <u>desc</u>. <u>desc</u> gets configured in the message of the exception.

===== <div id="VTNException:String-Throwable">VTNException(String, Throwable)</div> =====
<pre>
public VTNException(String message, Throwable cause)
</pre>

It creates an VTNException object which shows that VTN Manager has caught an unexpected exception <u>cause</u>. <u>message</u> gets configured in the exception message.

'''StatusCode.INTERNALERROR''' will be the value of the [[#StatusCode|StatusCode]] of [[#Status|Status]] configured internally.

==== Instance method ====

===== <div id="VTNException.getStatus">getStatus()</div> =====
<pre>
public Status getStatus()
</pre>

It returns the [[#Status|Status]] configured in VTNException object.
It returns <tt>null</tt> if Status is not configured.

= OSGi services =

This section describes the specifications of OSGi services provided by VTN Manager.

== IVTNManager ==
<pre>
public interface IVTNManager
</pre>

'''IVTNManager''' is the interface that defines OSGi services for operating VTN Manager.
IVTNManager service is instantiated for each container and it is registered in OSGi service registry.
It is possible to give instructions to VTN Manager inside the container by calling the necessary methods after acquiring from OSGi service registry the object where IVTNManager service is implemented.

=== API for VTN operations  ===

This section describes the APIs provided for operating [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

==== <div id="IVTNManager.getTenants">getTenants()</div> ====
<pre>
public List<VTenant> getTenants() throws VTNException;
</pre>

It acquires the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] present in Container.

In case of normal end, it returns the List object that includes [[#VTenant|VTenant]] objects corresponding to all the VTNs present inside the container.
It returns an empty List object if VTN is not present inside the Container.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.getTenant:VTenantPath">getTenant(VTenantPath)</div> ====
<pre>
public VTenant getTenant(VTenantPath path) throws VTNException;
</pre>

It retrieves the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

Specify in <u>path</u> the [[#VTenantPath|VTenantPath]] object that specifies the position of VTN.

In case of normal end, it returns [[#VTenant|VTenant]] object that shows the information of the VTN specified in <u>path</u>.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in VTN name inside the <u>path</u>.
:;StatusCode.NOTFOUND
::VTN specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.addTenant:VTenantPath-VTenantConfig">addTenant(VTenantPath, VTenantConfig)</div> ====
<pre>
public Status addTenant(VTenantPath path, VTenantConfig tconf);
</pre>

It creates [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] inside the Container.

Specify the following values in argument.

:;path
::Specify the [[#VTenantPath|VTenantPath]] object that specifies the position of the VTN that you want to create. VTN name inside the <u>path</u> must be configured using a string that meets the following conditions.
::*Configure a string having 1 or more and 31 or less characters.
::*String must contain only US-ASCII alphabets, numbers, and underscore ('_').
::*First character must be US-ASCII alphabet or number.
:;tconf
::Specify the [[#VTenantConfig|VTenantConfig]] object that shows the config information of VTN.
::*VTN description is not registered if <tt>null</tt> is configured against the same.
::*idle_timeout  of Flow entry will be treated as '''300''' if no value is configured for seconds.
::*hard_timeout of Flow entry will be treated as '''0''' if no value is configured for seconds.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>tconf</u>.
::*Incorrect VTN name is configured in <u>path</u>.
::*Incorrect value is configured in idle_timeout or hard_timeout of <u>tconf</u>.
:;StatusCode.CONFLICT
::VTN specified in <u>path</u> already exists.
:;StatusCode.NOTACCEPTABLE
::It was tried to configure VTN inside Default container, when container other than Default container is present.

==== <div id="IVTNManager.modifyTenant:VTenantPath-VTenantConfig-boolean">modifyTenant(VTenantPath, VTenantConfig, boolean)</div> ====
<pre>
public Status modifyTenant(VTenantPath path, VTenantConfig tconf, boolean all);
</pre>

It modifies the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

Specify the following values in argument.

:;path
::Specify the [[#VTenantPath|VTenantPath]] object that shows the position of the VTN that you want to modify.
:;tconf
::Specify [[#VTenantConfig|VTenantConfig]] object that includes the VTN config information for modification.
:;all
::Specify boolean value to decide the treatment of attributes for which value has not been configured inside <u>tconf</u>.
::*All the attributes related to VTN are modified if '''true''' is specified.
::**VTN description will be deleted if <tt>null</tt> is configured against the same.
::**idle_timeout  of Flow entry will be treated as '''300'''  if no value is configured for seconds.
::**hard_timeout of Flow entry will be treated as '''0'''  if no value is configured for seconds.
::*If false is specified, then attributes specified with <tt>null</tt> will not be modified.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>tconf</u>.
::*<tt>null</tt> is configured in the VTN name inside <u>path</u>.
::*Incorrect value is configured in idle_timeout or hard_timeout of <u>tconf</u>.
:;StatusCode.NOTFOUND
::VTN specified in <u>path</u> does not exist.
:;StatusCode.NOTACCEPTABLE
::It was tried to modify VTN information of Default container, when container other than Default container is present.

==== <div id="IVTNManager.removeTenant:VTenantPath">removeTenant(VTenantPath)</div> ====
<pre>
public Status removeTenant(VTenantPath path);
</pre>

It removes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].
All the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] etc., which are included inside the specified VTN will also be removed.

Specify in <u>path</u> the [[#VTenantPath|VTenantPath]] object that specifies the position of VTN that you want to remove.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN specified in <u>path</u> does not exist.
:;StatusCode.NOTACCEPTABLE
::It was tried to remove VTN of Default container, when container other than Default container is present.

=== API for vBridge operations ===

This section describes the APIs provided for operating [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== <div id="IVTNManager.getBridges:VTenantPath">getBridges(VTenantPath)</div> ====
<pre>
public List<VBridge> getBridges(VTenantPath path) throws VTNException;
</pre>

It retrieves the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] present inside the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

Specify in <u>path</u> the [[#VTenantPath|VTenantPath]] object that specifies the position of VTN.

In case of normal end, it returns the List object that includes [[#VBridge|VBridge]] objects corresponding to all the vBridges that are present inside VTN specified in <u>path</u>.
It returns an empty list object if vBridge is not present inside the specified VTN.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.getBridge:VBridgePath">getBridge(VBridgePath)</div> ====
<pre>
public VBridge getBridge(VBridgePath path) throws VTNException;
</pre>

It retrieves the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify in <u>path</u> the [[#VBridgePath|VBridgePath]] object that specifies the position of vBridge.

In case of normal end, it returns the [[#VBridge|VBridge]] object that shows the information of the vBridge specified in <u>path</u>.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.addBridge:VBridgePath-VBridgeConfig">addBridge(VBridgePath, VBridgeConfig)</div> ====
<pre>
public Status addBridge(VBridgePath path, VBridgeConfig bconf);
</pre>

It creates [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

Specify the following values in argument.

:;path
::Specify [[#VBridgePath|VBridgePath]] object that shows the position of vBridge that you want to create. vBridge name inside the <u>path</u> must be configured using a string that meets the following conditions.
::*Configure a string having 1 or more and 31 or less characters.
::*String must contain only US-ASCII alphabets, numbers, and underscore ('_').
::*First character must be US-ASCII alphabet or number.
:;bconf
::Specify the [[#VBridgeConfig|VBridgeConfig]] object that shows the config information of vBridge.
::*vBridge description is not registered if <tt>null</tt> is configured against the same.
::*[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|Aging]] interval for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] is treated as '''600''' if it is not configured.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>bconf</u>.
::*Incorrect vBridge name is configured inside <u>path</u>.
::*Incorrect value is configured in <u>bconf</u> for the aging interval of MAC address table.
:;StatusCode.NOTFOUND
::VTN specified in <u>path</u> does not exist.
:;StatusCode.CONFLICT
::vBridge specified in <u>path</u> already exists.
:;StatusCode.NOTACCEPTABLE
::It was tried to create vBridge inside Default container, when container other than Default container is present.

==== <div id="IVTNManager.modifyBridge:VBridgePath-VBridgeConfig-boolean">modifyBridge(VBridgePath, VBridgeConfig, boolean)</div> ====
<pre>
public Status modifyBridge(VBridgePath path, VBridgeConfig bconf, boolean all);
</pre>

It modifies the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify [[#VBridgePath|VBridgePath]] object that shows the position of vBridge that you want to modify.
:;bconf
::Specify [[#VBridgeConfig|VBridgeConfig]] object that includes the vBridge config information for modification.
:;all
::Specify boolean value to decide the treatment of attributes for which value has not been configured inside <u>bconf</u>.
::*All the attributes related to vBridge are modified if '''true''' is specified.
::**vBridge description will be deleted if <tt>null</tt> is configured against the same.
::**[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|Aging]] interval for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] will be treated as '''600''' if it is not configured.
::*If false is specified, then attributes specified with <tt>null</tt> will not be modified.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>bconf</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
::*Incorrect value is configured in <u>bconf</u> for the aging interval of MAC address table.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.NOTACCEPTABLE
::It was tried to modify vBridge information inside Default container, when container other than Default container is present.

==== <div id="IVTNManager.removeBridge:VBridgePath">removeBridge(VBridgePath)</div> ====
<pre>
public Status removeBridge(VBridgePath path);
</pre>

It removes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
All the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] etc. that are included inside the specified vBridge will also get removed.

Specify in <u>path</u> the [[#VBridgePath|VBridgePath]] object that specifies the position of vBridge that you want to remove.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.NOTACCEPTABLE
::It was tried to remove vBridge of Default container, when container other than Default container is present.

=== API for vBridge interface operations ===

This section describes the APIs provided for operating the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]]  of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== <div id="IVTNManager.getBridgeInterfaces:VBridgePath">getBridgeInterfaces(VBridgePath)</div> ====
<pre>
public List<VInterface> getBridgeInterfaces(VBridgePath path) throws VTNException;
</pre>

It retrieves the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] present inside the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify in <u>path</u> the [[#VBridgePath|VBridgePath]] object that specifies the position of vBridge.

In case of normal end, it returns the List object that includes [[#VInterface|VInterface]] objects corresponding to all the virtual interfaces that are present inside the vBridge specified in <u>path</u>.
It returns an empty list object if virtual interface is not present inside the specified vBridge.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.getBridgeInterface:VBridgeIfPath">getBridgeInterface(VBridgeIfPath)</div> ====
<pre>
public VInterface getBridgeInterface(VBridgeIfPath path) throws VTNException;
</pre>

It retrieves the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

Specify in <u>path</u> the [[#VBridgeIfPath|VBridgeIfPath]] object that specifies the position of vBridge interface.

In case of normal end, it returns the [[#VInterface|VInterface]] object that shows the information of the vBridge interface specified in <u>path</u>.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name or interface name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge or vBridge interface specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.addBridgeInterface:VBridgeIfPath-VInterfaceConfig">addBridgeInterface(VBridgeIfPath, VInterfaceConfig)</div> ====
<pre>
public Status addBridgeInterface(VBridgeIfPath path, VInterfaceConfig iconf);
</pre>

It creates [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify [[#VBridgeIfPath|VBridgeIfPath]] object that shows the position of vBridge interface that you want to create. Interface name inside the <u>path</u> must be configured using a string that meets the following conditions.
::*Configure a string having 1 or more and 31 or less characters.
::*String must contain only US-ASCII alphabets, numbers, and underscore ('_').
::*First character must be US-ASCII alphabet or number.
:;iconf
::Specify the [[#VInterfaceConfig|VInterfaceConfig]] object that shows the config information of virtual interface.
::*Interface description is not registered if <tt>null</tt> is configured against the same.
::*If <tt>null</tt> is set as the enable/ disable configuration of interface, it will be treated as if '''Boolean.TRUE''' is specified in the value.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>iconf</u>.
::*Incorrect interface name is configured inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.CONFLICT
::vBridge interface specified in <u>path</u> already exists.
:;StatusCode.NOTACCEPTABLE
::It was tried to create vBridge interface inside Default container, when container other than Default container is present.

==== <div id="IVTNManager.modifyBridgeInterface:VBridgeIfPath-VInterfaceConfig-boolean">modifyBridgeInterface(VBridgeIfPath, VInterfaceConfig, boolean)</div> ====
<pre>
public Status modifyBridgeInterface(VBridgeIfPath path, VInterfaceConfig iconf, boolean all);
</pre>

It modifies the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

Specify the following values in argument.

:;path
::Specify [[#VBridgeIfPath|VBridgeIfPath]] object that shows the position of vBridge interface that you want to modify.
:;iconf
::Specify [[#VInterfaceConfig|VInterfaceConfig]] object that includes the interface config information for modification.
:;all
::Specify boolean value to decide the treatment of attributes for which value has not been configured inside <u>iconf</u>.
::*All the attributes related to vBridge interface are modified if '''true''' is specified.
::**Interface description will be deleted if <tt>null</tt> is configured against the same.
::**If <tt>null</tt> is set as the enable/ disable configuration, it will be treated as if '''Boolean.TRUE''' is specified and interface will be enabled.
::*If false is specified, then attributes specified with <tt>null</tt> will not be modified.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>iconf</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name or interface name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge or vBridge interface specified in <u>path</u> does not exist.
:;StatusCode.NOTACCEPTABLE
::It was tried to modify vBridge interface information inside Default container, when container other than Default container is present.

==== <div id="IVTNManager.removeBridgeInterface:VBridgeIfPath">removeBridgeInterface(VBridgeIfPath)</div> ====
<pre>
public Status removeBridgeInterface(VBridgeIfPath path);
</pre>

It removes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

Specify in <u>path</u> the [[#VBridgeIfPath|VBridgeIfPath]] object that specifies the position of vBridge interface that you want to remove.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name or interface name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge or vBridge interface specified in <u>path</u> does not exist.
:;StatusCode.NOTACCEPTABLE
::It was tried to remove vBridge interface of Default container, when container other than Default container is present.

=== API for Port Mapping operations ===

This section describes the APIs provided for operating [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port Mapping]].

==== <div id="IVTNManager.getPortMap:VBridgeIfPath">getPortMap(VBridgeIfPath)</div> ====
<pre>
public PortMap getPortMap(VBridgeIfPath path) throws VTNException;
</pre>

It retrieves the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port Mapping]] information configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

Specify in <u>path</u> the [[#VBridgeIfPath|VBridgeIfPath]] object that specifies the position of vBridge interface.

In case of normal end, it returns [[#PortMap|PortMap]] object that shows the Port Mapping information configured in the vBridge interface specified in <u>path</u>.
It returns <tt>null</tt> if Port Mapping is not configured on the specified vBridge interface.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name or interface name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge or vBridge interface specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.setPortMap:VBridgeIfPath-PortMapConfig">setPortMap(VBridgeIfPath, PortMapConfig)</div> ====
<pre>
public Status setPortMap(VBridgeIfPath path, PortMapConfig pmconf);
</pre>

It configures [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port Mapping]] in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
If Port Mapping is already configured in the specified vBridge interface, then old configuration is deleted and the specified settings get applied.

Specify the following values in argument.

:;path
::Specify [[#VBridgeIfPath|VBridgeIfPath]] object that shows the position of vBridge interface where Port Mapping is to be configured.
:;pmconf
::Specify [[#PortMapConfig|PortMapConfig]] object that shows the config information of Port Mapping.
::*If <tt>null</tt> is specified, then the Port Mapping of the interface specified in <u>path</u> will get removed.

If value other than <tt>null</tt> is specified in <u>pmconf</u>, then Ethernet frame that flows through the port of the physical switch specified in <u>pmconf</u> will get mapped to the vBridge interface specified in <u>path</u>.

*In <u>pmconf</u>, you must configure the [[#Node|Node]] object corresponding to the physical switch that you want to map to the interface.
**Currently, it is possible to configure only the Node objects that correspond to OpenFlow switches.
*In <u>pmconf</u>, you must specify the [[#SwitchPort|SwitchPort]] object that shows the position of the physical switch port that you want to map to the interface.
**Currently, it is possible to configure only the physical ports of OpenFlow switches.
**Configuration of Port Mapping will succeed even if the specified physical port of the switch does not exist. Port Mapping will come into effect whenever, at a later point in time, the specified physical port is found.
*The VLAN network of Ethernet frame is mapped to the interface according to the VLAN ID configured in <u>pmconf</u>.
**If a value between '''1''' or more and '''4095''' or less is configured, then the Ethernet frames that have this VLAN ID configured will get mapped to interface.
**If '''0''' is configured, untagged Ethernet frames will get mapped to interface.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name or interface name inside <u>path</u>.
::*<u>pmconf</u> is not <tt>null</tt> and, in addition, Node or SwitchPort object is not configured in that.
::*<u>pmconf</u> is not <tt>null</tt> and, in addition, incorrect value is configured in that for Node or SwitchPort object.
::*<u>pmconf</u> is not <tt>null</tt> and, in addition, incorrect VLAN ID is configured in that.
:;StatusCode.NOTFOUND
::VTN or vBridge or vBridge interface specified in <u>path</u> does not exist.
:;StatusCode.CONFLICT
::Physical port specified in <u>pmconf</u> exists and, in addition, the specified combination of physical port and VLAN ID is mapped to another vBridge interface.
:;StatusCode.NOTACCEPTABLE
::It was tried to modify Port Mapping configuration inside Default container, when container other than Default container is present.

=== API for VLAN Mapping operations ===

This section describes the APIs provided for operating [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]].

==== <div id="IVTNManager.getVlanMaps:VBridgePath">getVlanMaps(VBridgePath)</div> ====
<pre>
public List<VlanMap> getVlanMaps(VBridgePath path) throws VTNException;
</pre>

It retrieves the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]] configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify in <u>path</u>  the [[#VBridgePath|VBridgePath]] object that specifies the position of vBridge.

In case of normal end, it returns List object that includes [[#VlanMap|VlanMap]] objects corresponding to all the VLAN Mapping configured on vBridge specified in <u>path</u>.
It returns an empty List object if VLAN Mapping is not configured on the specified vBridge.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.getVlanMap:VBridgePath-String">getVlanMap(VBridgePath, String)</div> ====
<pre>
public VlanMap getVlanMap(VBridgePath path, String mapId) throws VTNException;

</pre>

It retrieves the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]] information configured in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify [[#VBridgePath|VBridgePath]] object that shows the position of vBridge.
:;mapId
::Specify the identifier allocated to VLAN Mapping.

In case of normal end, it returns the [[#VlanMap|VlanMap]] object that shows the information of VLAN Mapping specified in <u>path</u> and <u>mapId</u>.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>mapId</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::
::*VTN or vBridge specified in <u>path</u> does not exist.
::*VLAN Mapping specified in <u>mapId</u> does not exist inside the vBridge specified in <u>path</u>.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.addVlanMap:VBridgePath-VlanMapConfig">addVlanMap(VBridgePath, VlanMapConfig)</div> ====
<pre>
public VlanMap addVlanMap(VBridgePath path, VlanMapConfig vlconf) throws VTNException;
</pre>

It configures [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]] in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify [[#VBridgePath|VBridgePath]] object that shows the position of vBridge .
:;vlconf
::Specify the [[#VlanMapConfig|VlanMapConfig]] object that shows config information of VLAN Mapping.

VLAN network specified in <u>vlconf</u> will get mapped to vBridge specified in <u>path</u>.

*In <u>vlconf</u>, it is possible to configure [[#Node|Node]] object corresponding to physical switch that is to be the target of VLAN Mapping.
**Currently, it is possible to configure the Node objects corresponding to OpenFlow switches only as a target of VLAN Mapping.
**Configuration of VLAN Mapping will succeed even if the physical switch corresponding to the specified Node object does not exist. VLAN Mapping will come into effect whenever, at a later point in time, the specified physical switch is found.
**All the physical switches will be a target of VLAN Mapping if the Node object is not configured.
*The VLAN network is mapped to vBridge according to the VLAN ID configured inside <u>vlconf</u>.
**If a value between '''1''' or more and '''4095''' or less is configured, then the Ethernet frames that have this VLAN ID configured will get mapped to vBridge.
**If '''0''' is configured, untagged Ethernet frames will get mapped to vBridge.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>vlconf</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
::*Incorrect Node object is configured inside <u>vlconf</u>.
::*Incorrect VLAN ID is configured inside <u>vlconf</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.CONFLICT
::Specified VLAN is already mapped to the specified vBridge or another vBridge.
:;StatusCode.NOTACCEPTABLE
::It was tried to modify VLAN Mapping configuration inside Default container, when container other than Default container is present.

==== <div id="IVTNManager.removeVlanMap:VBridgePath-String">removeVlanMap(VBridgePath, String)</div> ====
<pre>
public Status removeVlanMap(VBridgePath path, String mapId);
</pre>

It removes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN Mapping]] configured in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify [[#VBridgePath|VBridgePath]] object that shows the position of vBridge wherein the VLAN Mapping is to be removed.
:;mapId
::Specify the identifier allocated to VLAN Mapping that you want to remove.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>mapId</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::
::*VTN or vBridge specified in <u>path</u> does not exist.
::*VLAN Mapping specified in <u>mapId</u> does not exist inside the vBridge specified in <u>path</u>.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

=== API for ARP transmission ===

This section describes the APIs provided for sending ARP request to Broadcast domains that correspond to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

If method of IHostFinder service provided by arphandler is called and virtual network of VTN is operating inside that container, then arphandler will send ARP request by using the APIs described in this section.

==== <div id="IVTNManager.findHost:InetAddress-Set_VBridgePath">findHost(InetAddress, Set<VBridgePath>)</div> ====
<pre>
public void findHost(InetAddress addr, Set<VBridgePath> pathSet);
</pre>

It sends broadcast ARP request to find hosts that have the specified IP address.

Specify the following values in argument.

:;addr
::Specify the InetAddress object that shows the IP address that you want to search.
::*It returns without doing anything in following cases.
::**If <tt>null</tt> is specified.
::**If InetAddress object that shows IPv6 address is specified.
:;pathSet
::Specify the [[#VBridgePath|VBridgePath]] list that shows the position of the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] where ARP request is to be sent.
::*ARP request will be sent to only those vBridges whose position is included inside <u>pathSet</u>.
::*If <tt>null</tt> is specified, then ARP request will be sent to all the vBridges that are present inside the container.

==== <div id="IVTNManager.probeHost:HostNodeConnector">probeHost(HostNodeConnector)</div> ====
<pre>
public boolean probeHost(HostNodeConnector host);
</pre>

It sends unicast ARP request to check the existence of a specified host.

Specify the [[#HostNodeConnector|HostNodeConnector]] object corresponding to the host in <u>host</u>.
ARP request will be sent to the Physical switch port corresponding to the [[#NodeConnector|NodeConnector]] configured in <u>host</u>.

It returns '''true''' if ARP request is actually sent.
It returns '''false''' if it is not sent.

Following are main reasons for returning '''false'''.

*If <tt>null</tt> is specified in <u>host</u>.
*If NodeConnector  object is not configured inside <u>host</u>.
*If the physical port corresponding to the NodeConnector  object configured in <u>host</u> is not operating.
*If the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] to which the <u>host</u> belongs does not exist.

=== API for MAC address table ===

This section describes the API provided for operating [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== <div id="IVTNManager.getMacEntries:VBridgePath">getMacEntries(VBridgePath)</div> ====
<pre>
public List<MacAddressEntry> getMacEntries(VBridgePath path) throws VTNException;
</pre>

It retrieves the MAC address information list learned inside the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify in <u>path</u> the [[#VBridgePath|VBridgePath]] object that specifies the position of vBridge.

In case of normal end, it returns the List object that includes the [[#MacAddressEntry|MacAddressEntry]] objects corresponding to entire MAC address information learned inside MAC address table of the vBridge specified in <u>path</u>.
It returns an empty List object if not even one MAC address is learnt inside the specified vBridge.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.getMacEntry:VBridgePath-DataLinkAddress">getMacEntry(VBridgePath, DataLinkAddress)</div> ====
<pre>
public MacAddressEntry getMacEntry(VBridgePath path, DataLinkAddress addr) throws VTNException;
</pre>

It searches the specified MAC address information from the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify the [[#VBridgePath|VBridgePath]] object that shows the position of vBridge.
:;addr
::Specify the [[#DataLinkAddress|DataLinkAddress]] object that shows the MAC address that you want to search.
::*Currently VTN Manager handles only Ethernet frame. Thus, in reality, [[#EthernetAddress|EthernetAddress]] object needs to be specified.

It returns [[#MacAddressEntry|MacAddressEntry]] that shows the MAC address information corresponding to <u>addr</u> if the MAC address specified in <u>addr</u> has been learnt inside the MAC address table.
It returns <tt>null</tt> if the MAC address specified in <u>addr</u> has not been learnt.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>addr</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::
::*VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.removeMacEntry:VBridgePath-DataLinkAddress">removeMacEntry(VBridgePath, DataLinkAddress)</div> ====
<pre>
public MacAddressEntry removeMacEntry(VBridgePath path, DataLinkAddress addr) throws VTNException;
</pre>

It removes the specified MAC address information from [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify the following values in argument.

:;path
::Specify the [[#VBridgePath|VBridgePath]] object that shows the position of vBridge.
:;addr
::Specify the [[#DataLinkAddress|DataLinkAddress]] object that shows the MAC address that you want to remove.
::*Currently VTN Manager handles only Ethernet frame. Thus, in reality, [[#EthernetAddress|EthernetAddress]] object needs to be specified.

It returns [[#MacAddressEntry|MacAddressEntry]] object that shows the removed information if MAC Address information has been removed in reality.
It returns <tt>null</tt> if the MAC address specified in <u>addr</u> has not been learnt.

In case of abnormal end, [[#VTNException|VTNException]] that includes the [[#Status|Status]] showing error cause is thrown.
Following are the main [[#StatusCode|StatusCode]] set in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u> or <u>addr</u>.
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

==== <div id="IVTNManager.flushMacEntries:VBridgePath">flushMacEntries(VBridgePath)</div> ====
<pre>
public Status flushMacEntries(VBridgePath path);
</pre>

It removes all the MAC Address information learnt inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

Specify in <u>path</u> the [[#VBridgePath|VBridgePath]] object that specifies the position of vBridge.

In case of normal end, it returns [[#Status|Status]] wherein '''[[#StatusCode|StatusCode]].SUCCESS''' is configured.

In case of abnormal end, it returns the Status showing error cause.
Following are the main StatusCode configured in Status.

:;StatusCode.BADREQUEST
::
::*<tt>null</tt> is specified in <u>path</u>
::*<tt>null</tt> is configured in the VTN name or vBridge name inside <u>path</u>.
:;StatusCode.NOTFOUND
::
::*VTN or vBridge specified in <u>path</u> does not exist.
:;StatusCode.INTERNALERROR
::Fatal internal error occurred in VTN Manager.

=== Other API ===

==== <div id="IVTNManager.isActive">isActive()</div> ====
<pre>
public boolean isActive();
</pre>

It determines whether the Virtual network of VTN Manager is operating inside the Container.
It returns '''true''' if virtual network by VTN Manager is operating and '''false''' if it is not operating.

Even if one [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] is created inside Container, then it is judged that virtual network of VTN Manager is operating and it returns true.
However, if container other than default container is present, then VTN Manager inside the default container gets disabled. In this case, isActive() will always return error against the IVTNManager service for default container.

== IVTNManagerAware ==
<pre>
public interface IVTNManagerAware
</pre>

'''IVTNManagerAware''' defines the listener interface that monitors the status change of VTN Manager inside container.
Corresponding method gets called when there is a change in the management information of VTN Manager, if you register  in OSGi service registry the object where IVTNManagerAware is implemented.

=== <div id="IVTNManagerAware.vtnChanged:VTenantPath-VTenant-UpdateType">vtnChanged(VTenantPath, VTenant, UpdateType)</div> ===
<pre>
public void vtnChanged(VTenantPath path, VTenant vtenant, UpdateType type);
</pre>

This is called when the information related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] inside Container gets changed.

Following values gets specified in arguments.

:;path
::[[#VTenantPath|VTenantPath]] object gets specified. This shows the position of the VTN where information is modified.
:;vtenant
::[[#VTenant|VTenant]] object that shows the VTN information gets specified.
:;type
::[[#UpdateType|UpdateType]] object that shows the type of modification gets specified.
::*'''UpdateType.ADDED''' means that the VTN specified in <u>path</u> has been newly created.
::**Information of the newly created VTN gets specified in <u>vtenant</u>.
::*'''UpdateType.CHANGED''' means that the information of the VTN specified in <u>path</u> has been modified.
::**Information of the updated VTN gets specified in <u>vtenant</u>.
::**Change is notified in the following cases.
::***When [[#VTenantConfig|config information of VTN]] is modified.
::*'''UpdateType.REMOVED''' means that the VTN specified in <u>path</u> has been removed.
::**Information of the VTN just prior to its removal gets specified in <u>vtenant</u>.

Further, if VTN is present in container at the time of registering in VTN Manager the listener where IVTNManagerAware is implemented, then this method gets called with information of each VTN specified so that the existence of these can be notified to listener.
<u>type</u> is specified as '''UpdateType.ADDED''' in such cases.

=== <div id="IVTNManagerAware.vBridgeChanged:VBridgePath-VBridge-UpdateType">vBridgeChanged(VBridgePath, VBridge, UpdateType)</div> ===
<pre>
public void vBridgeChanged(VBridgePath path, VBridge vbridge, UpdateType type);
</pre>

This gets called when information related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] inside the Container gets changed.

Following values gets specified in arguments.

:;path
::[[#VBridgePath|VBridgePath]] object gets specified. This shows the position of the vBridge where information is changed.
:;vbridge
::[[#VBridge|VBridge]] object that shows vBridge information  gets specified.
:;type
::[[#UpdateType|UpdateType]] object that shows that type of change gets specified.
::*'''UpdateType.ADDED''' means that the vBridge specified in <u>path</u> has been newly created.
::**Information of the newly created vBridge gets specified in <u>vbridge</u>.
::*'''UpdateType.CHANGED''' means that the information of the vBridge specified in <u>path</u> has been modified.
::**Information of the updated vBridge gets specified in <u>vbridge</u>.
::**Change is notified in the following cases.
::***When the [[#VBridgeConfig|config information of vBridge]] is changed.
::***When [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state|status of vBridge]] is changed.
::*'''UpdateType.REMOVED''' means that the vBridge specified in <u>path</u> has been removed.
::**Information of the vBridge just prior to its removal gets specified in <u>vbridge</u>.

Further, if vBridge is present in container at the time of registering in VTN Manager the listener where IVTNManagerAware is implemented, then this method gets called with information of each vBridge specified so that the existence of these can be notified to listener.

*It is guaranteed that [[#IVTNManagerAware.vtnChanged:VTenantPath-VTenant-UpdateType|vtnChanged]]([[#VTenantPath|VTenantPath]], [[#VTenant|VTenant]], [[#UpdateType|UpdateType]]), which notifies the existence of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] to which this vBridge belongs, gets called first.
*'''UpdateType.ADDED''' gets specified in <u>type</u>.

=== <div id="IVTNManagerAware.vBridgeInterfaceChanged:VBridgeIfPath-VInterface-UpdateType">vBridgeInterfaceChanged(VBridgeIfPath, VInterface, UpdateType)</div> ===
<pre>
public void vBridgeInterfaceChanged(VBridgeIfPath path, VInterface viface, UpdateType type);
</pre>

This gets called when information related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] configured in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] inside the Container is changed.

Following values gets specified in arguments.

:;path
::[[#VBridgeIfPath|VBridgeIfPath]] object gets specified. This shows the position of the vBridge interface where information is changed.
:;viface
::[[#VInterface|VInterface]] object that shows vBridge interface information  gets specified.
:;type
::[[#UpdateType|UpdateType]] object that shows that type of change gets specified.
::*'''UpdateType.ADDED''' means that the vBridge interface specified in <u>path</u> has been newly created.
::**Information of the newly created vBridge interface gets specified in <u>viface</u>.
::*'''UpdateType.CHANGED''' means that the information of the vBridge interface specified in <u>path</u> has been modified.
::**Information of the updated vBridge interface gets specified in <u>viface</u>.
::**Change is notified in the following cases.
::***When [[#VInterfaceConfig|config information of vBridge interface]] is changed.
::***When [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state|status of vBridge interface]] is changed.
::*'''UpdateType.REMOVED''' means that the vBridge interface specified in <u>path</u> has been removed.
::**Information of the vBridge interface just prior to its removal gets specified in <u>viface</u>.

Further, if vBridge interface is present in container at the time of registering in VTN Manager the listener where IVTNManagerAware is implemented, then this method gets called with information of each vBridge interface specified so that the existence of these can be notified to listener.

*It is guaranteed that [[#IVTNManagerAware.vBridgeChanged:VBridgePath-VBridge-UpdateType|vBridgeChanged]]([[#VBridgePath|VBridgePath]], [[#VBridge|VBridge]], [[#UpdateType|UpdateType]]), which notifies the existence of vBridge to which this vBridge interface belongs, gets called first.
*'''UpdateType.ADDED''' gets specified in <u>type</u>.

=== <div id="IVTNManagerAware.vlanMapChanged:VBridgePath-VlanMap-UpdateType">vlanMapChanged(VBridgePath, VlanMap, UpdateType)</div> ===
<pre>
public void vlanMapChanged(VBridgePath path, VlanMap vlmap, UpdateType type);
</pre>

This gets called when information related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] configured in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] inside the Container is changed.

Following values gets specified in arguments.

:;path
::[[#VBridgePath|VBridgePath]] object gets specified. This shows the position of the vBridge where VLAN mapping information is changed.
:;vlmap
::[[#VlanMap|VlanMap]] object that shows VLAN mapping information  gets specified.
:;type
::[[#UpdateType|UpdateType]] object that shows that type of change gets specified.
::*'''UpdateType.ADDED''' means that VLAN Mapping has been configured in the vBridge specified in <u>path</u>.
::**Information of the newly configured VLAN Mapping gets specified in <u>vlmap</u>.
::*'''UpdateType.REMOVED'''  means that VLAN Mapping of vBridge specified in <u>path</u> has been removed.
::**Information of the VLAN mapping just prior to its removal gets specified in <u>vlmap</u>.
::*Config information of the existing VLAN mapping cannot be changed, thus '''UpdateType.CHANGED''' will not get specified.

Further, if VLAN Mapping configured vBridge is present in container at the time of registering in VTN Manager the listener where IVTNManagerAware is implemented, then this method gets called with information of each VLAN Mapping specified so that the existence of these can be notified to listener.

*It is guaranteed that [[#IVTNManagerAware.vBridgeChanged:VBridgePath-VBridge-UpdateType|vBridgeChanged]]([[#VBridgePath|VBridgePath]], [[#VBridge|VBridge]], [[#UpdateType|UpdateType]]), which notifies the existence of vBridge wherein this VLAN Mapping is configured, gets called first.
*'''UpdateType.ADDED''' gets specified in <u>type</u>.

=== <div id="IVTNManagerAware.portMapChanged:VBridgeIfPath-PortMap-UpdateType">portMapChanged(VBridgeIfPath, PortMap, UpdateType)</div> ===
<pre>
public void portMapChanged(VBridgeIfPath path, PortMap pmap, UpdateType type);
</pre>

This gets called when information related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] configured in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]] inside the Container is changed.

Following values gets specified in arguments.

:;path
::[[#VBridgeIfPath|VBridgeIfPath]] gets specified. This shows the position of the vBridge interface where Port mapping information is changed.
:;pmap
::[[#PortMap|PortMap]] object that shows the Port mapping information gets specified.
:;type
::[[#UpdateType|UpdateType]] object that shows that type of change gets specified.
::*'''UpdateType.ADDED''' means that the Port Mapping has been configured in the vBridge interface specified in <u>path</u>.
::**Information of the newly configured Port mapping gets specified in <u>pmap</u>.
::*'''UpdateType.CHANGED''' means that the Port mapping information of the vBridge interface specified in <u>path</u> is changed.
::**Updated Port mapping information gets specified in <u>pmap</u>.
::**Change is notified in following cases.
::***When [[#PortMapConfig|config information of Port mapping]] is changed.
::***When the [[#PortMap.getNodeConnector|Physical port of the switch that is actually mapped]] is changed.
::*'''UpdateType.REMOVED''' means that the Port Mapping of the vBridge interface specified in <u>path</u> is removed.
::**Information of the Port mapping just prior to its removal gets specified in <u>pmap</u>.

Further, if Port Mapping configured vBridge interface is present in container at the time of registering in VTN Manager the listener where IVTNManagerAware is implemented, then this method gets called with information of each Port Mapping specified so that the existence of these can be notified to listener.

*It is guaranteed that [[#IVTNManagerAware.vBridgeInterfaceChanged:VBridgeIfPath-VInterface-UpdateType|vBridgeInterfaceChanged]]([[#VBridgeIfPath|VBridgeIfPath]], [[#VInterface|VInterface]], [[#UpdateType|UpdateType]]), which notifies the Existence of vBridge interface wherein this Port Mapping is configured, gets called first.
*'''UpdateType.ADDED''' gets specified in <u>type</u>.

== IVTNModeListener ==
<pre>
public interface IVTNModeListener
</pre>

'''IVTNModeListener''' defines the listener interface that monitors the presence of virtual network environment of VTN Manager inside the container.
It is possible to detect the operation start and end of virtual network of VTN Manager, if you register  in OSGi service registry the object where IVTNModeListener is implemented.

=== <div id="IVTNModeListener.vtnModeChanged:boolean">vtnModeChanged(boolean)</div> ===
<pre>
public void vtnModeChanged(boolean active);
</pre>

This is called when the operation mode of VTN Manager inside the Container changes.

This method is called when the value returned by [[#IVTNManager|IVTNManager]].[[#IVTNManager.isActive|isActive]]() is modified.
Value returned by IVTNManager.isActive() at that point in time gets specified in <u>active</u>.
That is, '''true''' gets specified if the virtual network of VTN Manager is operating, and '''false''' gets specified if it is not operating.

Further, if you register in VTN Manager the listener where IVTNModeListener is implemented, then this method is called for notifying the operation mode, at that point in time, to listener.

[[Category:OpenDaylight Virtual Tenant Network]]
