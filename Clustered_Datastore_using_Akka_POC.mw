
'''Test Setup: '''

 
Test were run from command line using mvn exec plugin ( check the last column in the table below) -- Had to increase the VM params to''' -Xmx1500m -XX:MaxPermSize=512m''' to not run into OOM errors

 
'''Results: '''

 
The persistence and snapshot based recovery results are captured below ('''Note that the numbers were taken with just the test program running on my Laptop i.e. without other Apps -- I have seen it varies heavily if it is run along with other Apps''')

                                    
{| border="1"
|-
!
				Test Scenario
!
				Using Java Serialization
!
				         POC Program Command to execute
|-
| 
					1. Persisting of 150k families structure 
					(countinously sending one persist message per family) 
| 
					Persisting and updating Shard  state took (150K TreeMap with 10 entries each) 
					  
					Try 1: 
					  
					Time taken : 17.5 secs 
					Journal Size : 248MB 
					  
					Time taken: 18.secs  
					Journal Size : 248MB 
					  
|  '''mvn clean install exec:java -Dexec.mainClass=&quot;org.opendaylight.controller.datastore.clustered.Main&quot; -Dexec.args=&quot;p 150000 1&quot;''' 
					  
					where the command arguments 
					                             p - is for persist 
					                             150000 -- indicate that many family models -- aka TreeMap wth 10 entries each 
					                              1 - indicate just one run 
					  
					Journal directory is  : 
					target/org/opendaylight/controller/datastore/clustered/shard/journal 
|-
|
				2. Recovering form just Journal containing 150K families (TreeMap with 10 entries each)
| 
					Try 1 : 
					  
					Time Taken :  ~14.4 secs 
					Journal Size : 248MB 
					  
					Try 2: 
					  
					Time Taken: ~14.7 secs 
					Journal Size : 248MB 
					  
|  '''Note:''' since we are recovering we are not using &quot;mvn clean install&quot; as it would clean up the target directory where we have the Journal 
					  
					   '''mvn exec:java -Dexec.mainClass=&quot;org.opendaylight.controller.datastore.clustered.Main&quot; -Dexec.args=&quot;r 150000 1&quot;''' 
					  
					 where r -- is for recovery from journal 
					             150000 - ignored for now 
					                1 -- is ignored for now 
|-
|
				2. Taking snapshot of 150k families entries (using Java Serialization)
| 
					Snapshot( 1.5M TreeMap entries-- refer family structure below) : took 
					  
					Try 1:
				~7 seconds<br> 
					  
					Snapshot size: 
					131MB 
					  
					Try 2: 
					~7.2 seconds 
					  
					Snapshot Size: 
					131MB 
					  
					  
|  '''mvn clean install exec:java -Dexec.mainClass=&quot;org.opendaylight.controller.datastore.clustered.Main&quot; -Dexec.args=&quot;ps 150000 1&quot;''' 
					  
					 where ps-- is for persist and snapshot 
					             150000 -- indicate that many family models -- aka TreeMap wth 10 entries each<br> 
						              1 - indicate just one run 
						  
						  
						Snapshot directory is 
						akka-stuff/akka-persistence/target/org/opendaylight/controller/datastore/clustered/shard/snapshots<br>
						   
|-
|
				3. Pure Snapshot recovery of size 131MB ( the Journal entries are emptied to have a pure snapshot based recovery -- Java serialization was used)
| 
					Try 1 : 
					  
					~5.9 secs 
					  
					Snapshot Size: 
					131 MB 
					  
					Try 2: 
					~6.9 secs 
					  
					Snapshot Size: 
					131 MB 
					  
					  
					  
|  '''Note:''' since we are snapshot recovering we are not using &quot;mvn clean install&quot; as it would clean up the target directory where we have the Journal 
					  
					   '''mvn exec:java -Dexec.mainClass=&quot;org.opendaylight.controller.datastore.clustered.Main&quot; -Dexec.args=&quot;sr 150000 1&quot;''' 
					        where sr  - to recover from latest snapshot 
					                  150000 -- is ignored for now 
					                       1 - is ignored for now 
					  
|-
|
				 
|
				 
|
				 
|} 

		  
'''Test Data'''

 
The following family information in form of tree is used for persisting

 
Family has the following structure

 
Family

 
-- name:attribute<br>
		 --age: attribute<br>
		 list children<br>
		 child 1<br>
		 --name:attribute<br>
		 --age: attribute<br>
		 list grand-children<br>
		 grand child 1<br>
		 -- name:attribute<br>
		 -- age:attribute<br> <br>
		 grand child 2<br>
		 --name:attribute<br>
		 --age: attribute<br> <br>
		 child 2<br>
		 --name:attribute<br>
		 --age: attribute<br>
		 list grand-children<br>
		 grand child 3<br>
		 -- name:attribute<br>
		 -- age:attribute<br> <br>
		 grand child 4<br>
		 --name:attribute<br>
		 --age: attribute

 
child 3<br>
		 --name:attribute<br>
		 --age: attribute<br>
		 list grand-children<br>
		 grand child 5<br>
		 -- name:attribute<br>
		 -- age:attribute<br> <br>
		 grand child 6<br>
		 --name:attribute<br>
		 --age: attribute<br> <br> '''Note1 : The above structure results in about 10 entries in a TreeMap/family and for 150k families it results in 1.5million TreeMap entries '''

   
	  <br>
