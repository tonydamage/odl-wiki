=Sample Application: the Learning Switch=
==Functionality==
* Create a HashMap called mac_to_port
* On packet_in, parse packet to get source and destination MAC addresses 
* Store in a hashmap mapping between src_mac and in_port 
* Lookup dst_mac in mac_to_port map to find next hop 
* If next hop is found, create flow_mod and send
* Else, flood like hub.


=Building the Application=
* '''Prerequisites:'''
** Java 7, Maven 3.0.5 or later, Linux or Mac

* Download the application code from ODL OpenFlow Plugin repo:
<pre>
> git clone https://git.opendaylight.org/gerrit/p/openflowplugin.git
</pre>

* Build the application:
<pre>
> cd  openflowplugin/samples/learning-switch/
> mvn clean install
</pre>

* The build creates the ‘learning-switch-0.0.3-SNAPSHOT.jar’ bundle  in ‘openflowplugin/samples/learning-switch/target’

==Analyzing the Code in Eclipse:==
Prerequisites: Install maven plugin for Eclipse


=Setting up the Environment=
* '''Prerequisites:'''
** Java 7, Linux or Mac
** [https://www.dropbox.com/s/t66vqfqx57a7nhk/mininet-2.1.0-of1.3.zip Mininet 2.1 with OpenFlow 1.3]
** [https://nexus.opendaylight.org/content/repositories/opendaylight.release/org/opendaylight/integration/distributions-base/0.1.1/ OpenDaylight Base Edition]

* Unzip the downloaded controller package
* Delete the ‘Simple Forwarding Application’ bundle from the distribution:
<pre>
> rm opendaylight/plugins/org.opendaylight.controller.samples.simpleforwarding-0.4.1.jar
</pre>

* Upload the created bundle: put the ‘learning-switch-0.0.3-SNAPSHOT.jar’ bundle into the ‘opendaylight/plugins’ folder
* Update logger configuration:
* Optionally, add the following line to the 'configuration/logback.xml' file:
<pre>
<logger name="org.opendaylight.openflowplugin.learningswitch" level="TRACE"/>
</pre>

=Starting up the Environment=
* Run the controller:
<pre>
> ./run.sh -of13
</pre>

* Check that the application bundle is active. On the controller console, type:
<pre>
osgi > lb learn
</pre>
* You should see something like:
<pre>
START LEVEL 6
   ID|State      |Level|Name
  103|Active     |    4|learning-switch (0.0.3.SNAPSHOT)
osgi> 
</pre>

* Optionally, check that the controller is listening on Ports 6633 and 6653. 
** On a Linux console, type:
<pre>
> netstat -lnp | grep 'java’
</pre>
** On a Mac OSX console, type:
<pre>
> lsof -i | grep LISTEN |grep java
</pre>

* Start Mininet:
<pre>
> sudo mn --topo single,10  --controller 'remote,ip=<controller-ip-address>,port=6633' --switch ovsk,protocols=OpenFlow13
</pre>

=Running the App=
==Workflow==

=== Learning switch startup ===

* The bundle activator, org.opendaylight.openflowplugin.learningswitch.Activator is using [https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/target/apidocs/org/opendaylight/controller/sal/binding/api/AbstractBindingAwareConsumer.html AbstractBindingAwareConsumer] as its activator base, which registers with OSGi and waits for MD-SAL to get initialized and fires off [https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/target/apidocs/org/opendaylight/controller/sal/binding/api/BindingAwareConsumer.html#onSessionInitialized(org.opendaylight.controller.sal.binding.api.BindingAwareBroker.ConsumerContext) onSessionInitialized()]. 

 public class Activator extends AbstractBindingAwareConsumer implements AutoCloseable {
     @Override
     public void onSessionInitialized(ConsumerContext session) {
         [...]
     }
 }

* Once MD-SAL is online, we get references to the following services registered with MD-SAL:
** [https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/target/apidocs/org/opendaylight/controller/sal/binding/api/data/DataBrokerService.html DataBrokerService]
** [https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/target/apidocs/org/opendaylight/controller/sal/binding/api/NotificationService.html NotificationService]
** PacketProcessingService
and inject them into a new LearningSwitchManagerMultiImpl instance, which we then start.

* During its startup, LearningSwitchManagerMultiImpl hooks up into MD-SAL services by:
** registering a new instance of PacketInDispatcherImpl as a [https://jenkins.opendaylight.org/controller/job/controller-merge/lastSuccessfulBuild/artifact/target/apidocs/org/opendaylight/controller/sal/binding/api/NotificationListener.html NotificationListener]


- Bundle activator registers for:
  - SimpleLearningSwitchHandler as PacketInNotification
- into SimpleLearningSwitchManager injets DataBrokerService
- starts SimpleLearningSwitchManager

- SimpleLearningSwitchManager registers for:
  - WakeupOnNode as DataChangedListener
    (InstanceIdentifier: Nodes/Node/augmentation:FlowCapableNode/Table)

- as soon as first table with id == 0 appears WakeupOnNode does following:
  - writes flow to config context so that all packets will be forwarded to controller (low priority)
  - notifies SimpleLearningSwitchHandler with InstanceIdentifier of the (received) table

- SimpleLearningSwitchHandler does following during this notification:
  - stores info about table and node
  - closes registration [WakeupOnNode as DataChangedListener] in order not to get notified again

- now only PacketInNotification event may occur
  - SimpleLearningSwitchHandler reads source and destination MAC and stores ingress port + source MAC into map
  - if the map contains destination MAC
    - check if covering flow already exists (if yes, it is not working)
    - else:
      - create flow so that packets from source MAC to destination MAC will use corresponding port
      - create second flow working the other way around)
    - stores MAC addresses covered by flows so that the same flow won't be created again

  - uses flood to deliver packet 
    (if flow was created -> flooded last time for this source/destination MAC combination)
        (else this is the only way to deliver packet)

... take some time ...

- now all packets should be managed by flows on switch and none should be sent to controller

==Testing scenario==
- build distribution/base
- remove plugins/org.opendaylight.controller.samples.simpleforwarding-*-SNAPSHOT.jar
- copy simple learning jar into plugins folder
- start controller (run.sh)
- start wireshark
- start mininet+(ovs(OF-1.0|OF-1.3)|cpqd)
  - ovs(OF-1.0) : sudo mn --topo single,10  --controller 'remote,ip=10.0.42.5,port=6633' --switch ovsk,protocols=OpenFlow10
  - ovs(OF-1.3) : sudo mn --topo single,10  --controller 'remote,ip=10.0.42.5,port=6633' --switch ovsk,protocols=OpenFlow13
  - cpqd        : sudo mn --topo single,10  --controller 'remote,ip=10.0.42.5,port=6633' --mac --switch user
- observe wireshark, wait for flow_mod message
- check if flow is pushed to switch 
  - ovs(OF1.0): sudo ovs-ofctl -O OpenFlow10 dump-flows s1
  - ovs(OF1.3): sudo ovs-ofctl -O OpenFlow13 dump-flows s1
  - cpqd      : sudo dpctl unix:/tmp/s1 stats-flow
- in mininet enter: 
  - h1 ping h2
  - pingall
- observe ws, flows ..
