= Basic principle =
In order to use extensions it is needed to augment existing model and register new (de)serializers.

'''Augmenting the model:''' <br />
1. Create new augmentation (you can check how do the existing ones look like in openflow-augments.yang) <br />

'''Register (de)serializers:''' <br />
1. Create your (de)serializer <br />
2. Let it implement OFDeserializer<> / OFSerializer<> <br />
- in case the structure you are (de)serializing needs to be used in Multipart TableFeatures messages, let it implement HeaderDeserializer<> / HeaderSerializer <br />
3. Implement prescribed methods <br />
4. Register your class under MessageCodeKey / EnhancedMessageCodeKey when registering deserializer <br />
5. Register your class under MessageTypeKey / EnhancedMessageTypeKey when registering serializer <br />
6. Done, test the change <br />

'''NOTE:''' <br />
There is also an exemplary bundle called openflow-protocol-ext (in the openflowjava project). One can inspire how to register custom (de)serializers based on the implementation of this bundle. <br />
If you don't know what key should be used with your (de)serializer implementation, please visit 
[[Openflow Protocol Library:Openflow Protocol Library's extensibility:Registration keys | Registration keys]] page.


= Example =
Let's say we have vendor / experimenter action represented by this structure:

 struct foo_action {
     uint16_t type;
     uint16_t length;
     uint32_t experimenter;
     uint16_t first;
     uint16_t second;
     uint8_t  pad[4];
 }

First, we have to augment existing model. We create new module, which imports "openflow-types.yang" (don't forget to update your pom.xml with api dependency). Now we create foo action identity:

 import openflow-types {prefix oft;}
 identity foo {
     description "Foo action description";
     base oft:action-base;
 }

This will be used as type in our structure.
Now we must augment existing action structure, so that we will have the desired fields first and second. In order to create new augmentation, our module has to import "openflow-action.yang". The augment should look like this:

 import openflow-action {prefix ofaction;}
 augment "/ofaction:actions-container/ofaction:action" {
     ext:augment-identifier "foo-action";
         leaf experimenter {
             type uint32;
         }
         leaf first {
             type uint16;
         }
         leaf second {
             type uint16;
         }
     }
We are finished with model changes. Run mvn clean compile to generate sources.
After generation is done, we need to implement our (de)serializer.  

Deserializer:
 public class FooActionDeserializer extends OFDeserializer<Action> {
    @Override
    public Action deserialize(ByteBuf input) {
        ActionBuilder builder = new ActionBuilder();
        input.skipBytes(SIZE_OF_SHORT_IN_BYTES); // we know the type of action
        builder.setType(Foo.class);
        input.skipBytes(SIZE_OF_SHORT_IN_BYTES); // we don't need length
        FooActionBuilder fooBuilder = new FooActionBuilder();
        fooBuilder.setExperimenter(input.readUnsignedInt());
        fooBuilder.setFirst(input.readUnsignedShort());
        fooBuilder.setSecond(input.readUnsignedShort());
        builder.addAugmentation(FooAction.class, fooBuilder.build());
        input.skipBytes(4); // padding
        return builder.build();
    }
 }

Serializer:
 public class FooActionSerializer extends OFSerializer<Action> {
    @Override
    public void serialize(Action action, ByteBuf outBuffer) {
        outBuffer.writeShort(FOO_CODE);
        outBuffer.writeShort(16);
        FooAction foo = action.getAugmentation(FooAction.class);
        outBuffer.writeInt(foo.getExperimenter());
        outBuffer.writeShort(foo.getFirst());
        outBuffer.writeShort(foo.getSecond());
        for (int i = 0; i < 4; i++) {
            outBuffer.writeByte(0); //write padding
        }
    }
 }

Register both deserializer and serializer: <br />
SwitchConnectionProvider.registerDeserializer(new MessageCodeKey(0x04, 0xFFFF, Action.class), new FooActionDeserializer()); <br />
SwitchConnectionProvider.registerSerializer(new EnhancedMessageTypeKey<>(0x04, Action.class, Experimenter.class)), new FooActionSerializer()); <br />

We are ready to test our implementation.
