{| align="right" border="1"
|align="center"|'''Guide Contents'''
|-
|[[OpenDaylight Controller:Overview|OpenDaylight Controller Overview]]<br>[[OpenDaylight Controller:Architectural Framework|Architectural Framework]]<br>[[OpenDaylight Controller:Development Infrastructure Overview|Development Infrastructure Overview]]<br>[[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from the CLI|Pulling, Hacking, and Pushing the Code from the CLI]]<br>[[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from Eclipse|Pulling, Hacking, and Pushing the Code from Eclipse]]<br>[[OpenDaylight Controller:Sample Applications|Sample Applications]]<br>[[OpenDaylight Controller:Library Descriptions|Library Descriptions]]<br>[[OpenDaylight Controller:REST Reference and Authentication|REST Reference and Authentication]]<br>[[OpenDaylight Controller:Java API Reference|Java API Reference]]<br>[[OpenDaylight Controller:Topologies|Topologies]]<br>[[OpenDaylight Controller:Main|Top Level Contents]]
|}

Software Defined Network (SDN) is a new way of deploying network infrastructure.  The SDN adapts to the requirements of applications deployed on the network.  Current generation networks and architectures are statically configured and vertically integrated.  New generation applications require networks to be agile and flexibly adapt to application requirements.   

As networks get larger, especially in Massively Scalable Data Centers and Cloud, there is a large desire at ease-of-management and orchestration. This is leading to the need for programmatic interface (API) to the network to make it easier to write scripts as CLI and SNMP are not conducive to automation. There has been a change going on in IT and the CIO are getting influenced more by the Application and Server Admins and they who are used to the API and the ease of server management tools are demanding similar things from the network.

As application programmers desire their applications to be moved around in a data center or across clouds, it becomes imperative that the network becomes agile in meeting the requirements (bandwidth, services like load balancing, firewall) of the applications. 
* Network Abstraction and Virtualization is desired as it allows the network operators to operate the network at a higher level without worrying about the quirkiness of different products from the same or different vendors. 
* Additionally, there has been a desire from network operators for the ability to influence the forwarding and other network behavior based on their own algorithms and business logic. That means there is a need for the network to no longer be vertically integrated with the networking control logic coming only from the networking vendor. 
* Finally, there has been a desire see the cost of networking gear come down especially amongst the Web Services and Cloud providers who build out large Data Centers. They thus view vendor neutrality and the rise of merchant silicon as leverage to be used against the networking vendors.

All these factors play into the growing interest in software defined networking and also results in a not-so-crisp definition of what SDN really means. However, it is clear that SDN is a 3-legged stool with the Network Applications (Apps) on the top written to open API, a Controller as the middle plane interacting with and managing network devices. Clearly there needs to be some sort of API or protocol needed for the Controller and the network devices to communicate with each other. OpenFlow is one such protocol which has come out of the efforts of Open Networking Foundation (ONF). The network devices support Agents which interpret the protocol and the API.

Central to the SDN effort is the Controller which provides the ability to deploy software to control the network gear and redeploy as needed. The vision is to have a modular Controller with well published Northbound API for network Applications to be written towards it and using multi-protocol on the southbound to communicate with a variety of devices on the South. The industry and customers will benefit immensely by having an Open Source Controller with contributions from various industry players. This document covers the Open Daylight Controller.

The Open Daylight Controller can not only support the OpenFlow protocol but also other open protocols to allow it to communicate with devices which have OpenFlow and/or respective Agents. It also includes north bound API to allow customer applications (software) which will work with the Controller in controlling the network. The Custom Apps cover a wide spectrum of solutions for solving customer needs across different vertical market segments.

The Controller architecture supports both the Hybrid Switch model as well as classical OpenFlow model of having a fully centralized Control Plane.

==Hardware and Software Requirements==
Open Daylight Controller is a JVM so it can run on any metal and OS provided it supports Java JVM 1.7+. We recommend the following:
* Linux (Ubuntu or RHEL or Fedora or Any other popular Linux Distro that supports Java)
* JVM 1.7+

[[Category:OpenDaylight Controller]]
