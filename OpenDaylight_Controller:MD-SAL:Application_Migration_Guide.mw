== Conceptual changes  ==

Model-driven SAL is model-agnostic in a way, that it does not enforce you to use only flow-capable device model as it is case in existing SAL (Hard SAL). 

Other conceptual change is that generated service APIs maps to interfaces generated for YANG rpcs and notifications. 


=== *Service interface  ===

Service interface is generated from rpc definitions in YANG models and represents functionality provided by implementations of that model (usually Southbound Protocol Plugins). 

Each method returns java.concurrent.Future object with RpcResult object. 


=== *Listener interface  ===

Listener interfaces are to be implemented by applications if they desire to listen on notificafions (events) or callbacks provided by implementations. 

== Models replicating HARD&nbsp;SAL<br>  ==

Functionality of existing SAL is provided via models and their respective APIs in following artifacts: 

*'''model-inventory '''- maven artefact containing inventory model - model of nodes and node connectors 
*'''model-flow-base '''- maven artefact containing base flow types - model of flows, groups, matches and actions 
*'''model-flow-service '''- maven artefact containing flow service model 
*'''model-flow-statistics''' - maven artefact containing flow statistics model

=== model-inventory  ===

Inventory model defines base concepts as: 

*'''Node''' - Represents Network Node (Element) with attributes 
*'''NodeRef''' - reference to the network node. Designed to be used to reference node, without exposing internal structures. Semanticly similar to the Node class in HARD SAL. 
*'''NodeConnector''' - Represents node connector (e.g. interface or port) and its attributes. 
*'''NodeConnectorRef''' - reference to the node connector. Designed to be used to reference node connector, without exposing internal structures. Semanticly similar to the NodeConnector class in HARD SAL.

=== model-flow-base  ===

Defines base concepts related to the flow-capable devices such as: 

*'''Flow '''- Base flow definition 
*'''Match''' - Aggragate Match structure containing fields for base match types separated by layer information 
*'''EthernetMatch''' - Layer2 match, similar to NW_SRC and NW_DST match fields 
*'''VlanMatch''' 
*'''Layer3Match''' - Layer 3 match, could be Ipv4Match, Ipv6Match or ArpMatch 
*'''Layer4Match''' - Layer 4 match, could be TcpMatch, UdpMatch or SctpMatch 
*'''Action''' and subactions 
*'''Group'''

=== model-flow-service  ===

Defines service interfaces, events and listener interfaces which are to be consumed by applications using MD-SAL and flow-capable nodes. 

*'''SalFlowService '''- interface used to set up the flow, update flow or delete flow on node 
*'''SalFlowListener '''- listener interface which could be implemented by application to receive events on flow changes
