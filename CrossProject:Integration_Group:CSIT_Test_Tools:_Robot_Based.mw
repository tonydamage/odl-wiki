== Maintainer ==
Baohua Yang (baohyang@cn.ibm.com) and Denghui Huang (huangdenghui@gmail.com)

== Introduction ==
The library is designed for the robot framework to implement flexible and readable test case. The design is following google's [http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html#creating-test-libraries recommendation] style.

You can try the latest code from the [https://github.com/yeasy/robot_tool Github] or the stable code from the [https://git.opendaylight.org/gerrit/#/admin/projects/integration integration git repo].

During developing this tool, we find and fix [https://bugs.opendaylight.org/show_bug.cgi?id=153 bug 153].

== Get Code ==
<pre>
git clone https://github.com/yeasy/robot_tool.git
</pre>
The stable version can be pulled by
 <pre> git clone https://git.opendaylight.org/gerrit/integration </pre>

== Usage ==
===Prerequisites===
* Python 2.6/2.7
<pre>
aptitude install python2.7
</pre>
* [https://wiki.opendaylight.org/view/GettingStarted:Developer_Main OpenDaylight Controller]
Download and build OpenDaylight Controller

<pre>
   git clone https://git.opendaylight.org/gerrit/p/controller.git
   cd controller/opendaylight/distribution/opendaylight
   mvn clean install -DskipTests -Dmaven.compile.fork=true -U
</pre>
* [http://mininet.org/walkthrough Mininet]
<pre>
aptitude install mininet
</pre>
* [http://robotframework.org Robotframework]
<pre>
pip install robotframework
</pre>

===Run Test===
* Start the [https://wiki.opendaylight.org/view/GettingStarted:Developer_Main OpenDaylight Controller]
<pre>
  cd controller/target/distribution.opendaylight-0.1.0-SNAPSHOT-osgipackage/opendaylight/
  ./run.sh
</pre>
* Start mininet, and make sure mininet has all switches connected to the controller, for example, 
<pre>sudo mn --controller=remote,ip=your_controller_ip --topo tree,2</pre>
*  Go to the suites directory, executing the suite such as 
<pre>pybot  -v CONTROLLER:127.0.0.1 base                  #Run all tests in the base suite 
OR
pybot -v CONTROLLER:127.0.0.1 arp_handler.txt     #Test the arp handler module.
</pre>

==Code Structure==

    robot_tool
    \---------suites       # all robot test suites
    |              \-----base                # all test suites for the base edition
    |              |
    |              \-----service_provider    # all test suites for the service provider edition
    |              |
    |              \-----virtualization      # all test suites for the service provider edition
    |
    \---------libraries    # all keywords
    |
    \---------resources    # resources related files
    |
    \---------variables    # all variables

==Hack Code==
===Create and Import Library===
The robotframework supports both Python and Java based library. Here we take the Python code for example.

The library can be either a normal module or a class (Commonly a *.py file). You can add the ''Library    your_library_file'' command into the ''*** Settings ***'' part to import a library. Notice the elements (variable, keyword, etc) separator in robot script is tab (or four spaces), instead of space. Space is only used inside the name of the same element.

===Add Keyword===
In case of a module, a keyword will be created for each top-level function in the module. In case of a class, a keyword will be created for each public method of the class.

Keyword name will be mapped to the function name (case insensitively and underscores removed), and the keywords will have same arguments as the functions. For example, if you define a function in the library as
<pre>
def print_hello_world(param1,param2):
    """
    Just print out the first hello to the world.
    """
    print "Hello world",param1,param2
</pre>
Then after import the library, you can use the keyword in the robot framework as
<pre>
$param1    Hi
$param2    Again
Print Hello World     ${param1}    ${param2}
</pre>

===Example Case===
Some useful basic functions are defined in ''libraries/Common.py'' library.
You can see the code to find a ''collection_should_contain'' function (check if a collection should contain every given member) like
<pre>
import collections
def collection_should_contain(collection, *members):
    """
    Fail if not every members is in the collection.
    """
    if not isinstance(collection, collections.Iterable):
        return False
    for m in members:
        if m not in collection:
            return False
    else:
        return True
</pre>
Then we can use the keyword ''Collection Should Contain'' after importing the library as
`Library           ../../libraries/Common.py`.
For example, in the switch_manager.txt robot script.
<pre>
Collection Should Contain    ${nodes}    ${topo_nodes}
</pre>

===Keyword List===
Keyword can be utilized in the robot scripts as functions. 

* Collection Should Contain
 Name: Collection Should Contain
 Source: Common <test library>
 Arguments: [ collection | *members ]
 Fail if not every members is in the collection.

* Combine Strings
 Name: Combine Strings
 Source: Common <test library>
 Arguments: [ *strings ]
 Combines the given `strings` together and returns the result. The given strings are not altered by this keyword.

* Create Session
 Name: Create Session
 Source: RequestsLibrary <test library>
 Arguments: [ alias | url | headers={} | cookies=None | auth=None | timeout=None | proxies=None | verify=False ]
 Create Session: create a HTTP session to a server 
 `url` Base url of the server 
 `alias` Robot Framework alias to identify the session

===Learning More===
Would like to suggest to read the [http://code.google.com/p/robotframework/wiki/PythonTutorial Python Tutorial for robotframework] and the [http://code.google.com/p/robotframework/wiki/UserGuide Robot Framework User Guide].

==Debug==
Since CSIT tool is based on the [http://http://robotframework.org/ robotframeowork], debugging CSIT is really flexible.
===Diagnosis based on output files===
[[File:log_html.png|100px|thumb|right|log.html example]]
[[File:log_html.png|100px|thumb|right|report.html example]]

After running test suites, typically robot will generate several output files. 

By default these are output.xml, report.html and log.html. Those files include many useful information of the test execution, and they can also be combined and otherwise post-processed with Rebot. 

The output.xml file contains all the test execution results in machine readable XML format, and the log.html and the report.html are generated based on it. 

The log.html file contains details about the test execution in HTML format, which has hierarchical structure to show the results of test suite, test case and the key word. Log file is needed nearly every time when test results are to be investigated in detail. Even though log files also have statistics, report file is better for getting an higher-level overview. 

The command line option --log (-l) determines where log files are created. Unless the special value NONE is used, log files are always created and their default name is log.html.

The report.html contains an overview of the test execution results in HTML format. It has statistics based on tags and executed test suites, as well as a list of all executed test cases. When both report and log are generated, the report has links to the log file for easy navigation to more detailed information. It is easy to see the overall test execution status from report, because its background color is green, if all critical tests pass, and bright red otherwise. 

The command line option --report (-r) determines where report files are created. Similarly as log files, reports are always created unless NONE is used as a value, and their default name is report.html.

If no outputs are needed, they should all be explicitly disabled using --output NONE --report NONE --log NONE.

===Debug the code===

== Development Plan ==
=== Code architecture discussion  ===
Done.

=== Base edition test suites  ===
Basically Done.

=== Accept controller IP parameters  ===
Done.

=== Operate the outside mininet environment  ===
Done.

=== Support topology parameters  ===
TODO.

==Reference==
#http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html

[[Category:Integration Group:CSIT Test Tools]]
