== Intro ==

=== What is Karaf ===

[http://karaf.apache.org Apache Karaf] is a small OSGi based runtime which provides a lightweight container onto which various components and applications can be deployed. It tends to be helpful to think of Karaf as providing an ecosystem for your application - we've collected together various libraries and frameworks, and tested that they work well together, simplifying your runtime experience.

Here is a short list of features supported by the Karaf:

* '''FEATURE DESCRIPTORS''': Karaf supports provisioning via 'feature descriptors' which allow developers to group together features, bundles, configuration files, and other resources into one simple to use deployable.
* Hot deployment: Karaf supports hot deployment of OSGi bundles by monitoring jar files inside the [home]/deploy directory. Each time a jar is copied in this folder, it will be installed inside the runtime. You can then update or delete it and changes will be handled automatically. In addition, the Karaf also supports exploded bundles and custom deployers (blueprint and spring ones are included by default).
* Dynamic configuration: Services are usually configured through the ConfigurationAdmin OSGi service. Such configuration can be defined in Karaf using property files inside the [home]/etc directory. These configurations are monitored and changes on the properties files will be propagated to the services.
* Logging System: using a centralized logging back end supported by Log4J, Karaf supports a number of different APIs (JDK 1.4, JCL, SLF4J, Avalon, Tomcat, OSGi)
* Provisioning: Provisioning of libraries or applications can be done through a number of different ways, by which they will be downloaded locally, installed and started.
* Native OS integration: Karaf can be integrated into your own Operating System as a service so that the lifecycle will be bound to your Operating System.
* Extensible Shell console: Karaf features a nice text console where you can manage the services, install new applications or libraries and manage their state. This shell is easily extensible by deploying new commands dynamically along with new features or applications.
* Remote access: use any SSH client to connect to Karaf and issue commands in the console
* Security framework based on JAAS
* Managing instances: Karaf provides simple commands for managing multiple instances. You can easily create, delete, start and stop instances of Karaf through the console.

=== What makes Karaf useful as a Release Vehicle ===

== User Download Experience ==

Because Karaf allows us to specify high level features which users can be installed in the container, we have the opportunity to allow users to have exactly the high level features they want.

By having the download page display a list of high level features that a user may wish installed in their OpenDaylight download, we can very simply assemble those features
for download.

===Example A ===

User wants features:

* bgpcep-all
* ovsdb-neutron

They check those two on the download page and click the 'Download' button.

The server provides them with a zip file to download that has had its org.apache.karaf.features.cfg replaced with one that 
contains the users list of features.  Thus when they start OpenDaylight, they will get *precisely* the minimum set of things they need
for the requested features to run.  No more, no less.

== User Driven Feature Selection ==

== No Hard Release Vehicles ==

This proposal requires no 'hard' Release Vehicles, because we provide exactly the collection of features that each individual user has requested.

== Testing Strategy ==
