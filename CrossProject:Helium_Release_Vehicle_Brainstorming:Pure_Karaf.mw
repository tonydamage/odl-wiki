== Intro ==

=== What is Karaf ===

[http://karaf.apache.org Apache Karaf] is a small OSGi based runtime which provides a lightweight container onto which various components and applications can be deployed. It tends to be helpful to think of Karaf as providing an ecosystem for your application - we've collected together various libraries and frameworks, and tested that they work well together, simplifying your runtime experience.

Here is a short list of features supported by the Karaf:
* Hot deployment: Karaf supports hot deployment of OSGi bundles by monitoring jar files inside the [home]/deploy directory. Each time a jar is copied in this folder, it will be installed inside the runtime. You can then update or delete it and changes will be handled automatically. In addition, the Karaf also supports exploded bundles and custom deployers (blueprint and spring ones are included by default).
* Dynamic configuration: Services are usually configured through the ConfigurationAdmin OSGi service. Such configuration can be defined in Karaf using property files inside the [home]/etc directory. These configurations are monitored and changes on the properties files will be propagated to the services.
* Logging System: using a centralized logging back end supported by Log4J, Karaf supports a number of different APIs (JDK 1.4, JCL, SLF4J, Avalon, Tomcat, OSGi)
* Provisioning: Provisioning of libraries or applications can be done through a number of different ways, by which they will be downloaded locally, installed and started.
* Native OS integration: Karaf can be integrated into your own Operating System as a service so that the lifecycle will be bound to your Operating System.
* Extensible Shell console: Karaf features a nice text console where you can manage the services, install new applications or libraries and manage their state. This shell is easily extensible by deploying new commands dynamically along with new features or applications.
* Remote access: use any SSH client to connect to Karaf and issue commands in the console
* Security framework based on JAAS
* Managing instances: Karaf provides simple commands for managing multiple instances. You can easily create, delete, start and stop instances of Karaf through the console.

=== Karaf Provisioning in Details ===

Karaf has two methods of provisioning high level components known as features. This can be done via Feature Descriptors or standalone .KAR file packages. Feature descriptors are suitable for development , testing and advanced users while .KAR archives provides downloadable binary artifacts mostly suitable for end-user standalone offline installation. 

==== Feature Descriptors ====

Karaf supports provisioning via 'feature descriptors' which allow developers to group together sub-features, bundles, configuration files, and other resources into one simple to use deployable package. The bundles will be resolved via [https://ops4j1.jira.com/wiki/display/paxurl/Documentation|PAX-URL] compatible URL as defined in the feature file. The current descriptors currently is using the local maven repository (.m2/repository) along with whatever is part of the custom distribution (/system) as the locations from which to fetch the bundles. The feature descriptor also specifies the *start-level* and order in which the bundles have to start as such making feature start-stop behaviour more deterministic thus reducing the number of runtime errors encountered. 

** Example: Feature MD-SAL contains 25+ bundles, and requires yang tools. All told that around 40 bundles plus configuration files. Using ''feature:install odl-mdsal-all" will provision all of these bundles along with the  configuration files and install them into the OSGi container. This frees users and developers from needing to know about all the individual components required to run MD-SAL. 

** Example: Feature openflowplugin contains two openflowplugin bundles, and requires the md-sal feature.  Just specifying the openflowplugin feature get you exactly what you need, no more, no less.
 
====  KAR Archives ====

The KAR archive (Karaf Archive) is a special archive package that contains both the feature descriptor file along with all the referenced bundles. This way a user doesn't need to have a local or remote maven repository with the bundles in order to install the feature. This makes .kar files suitable for offline installations or easy to download links. Installing KAR files can be done via 

kar:install /path/odl-feature.kar

on the console or simply by putting the .kar file in the /deploy folder of the customized Karaf distribution for OpenDaylight


=== What makes Karaf useful as a Release Vehicle ===

Karaf allows us to have:

# A minimal karaf container - karaf + branding fragment + possibly a few config files
# Features which can be installed as one liners like:

feature:install odl-openflowplugin-all

which pull in openflowplugin and everything you need for it to work.

== User Download Experience ==

Because Karaf allows us to specify high level features which users can be installed in the container, we have the opportunity to allow users to have exactly the high level features they want.

By having the download page display a list of high level features that a user may wish installed in their OpenDaylight download, we can very simply assemble those features
for download.

===Example A ===

User wants features:

* bgpcep-all
* ovsdb-neutron

They check those two on the download page and click the 'Download' button.

The server provides them with a zip file to download that has had its org.apache.karaf.features.cfg replaced with one that 
contains the users list of features.  Thus when they start OpenDaylight, they will get *precisely* the minimum set of things they need
for the requested features to run.  No more, no less.

== User Driven Feature Selection ==

Because there is a huge set of combinatronics in terms of the features that users want together, and they are difficult to predict accurately, having User Driven Feature Selection rather than Centrally Planned Release Vehicle Definition allows us to give our users what they actually want.

== No Hard Release Vehicles ==

This proposal requires no 'hard' Release Vehicles, because we provide exactly the collection of features that each individual user has requested.

== Testing Strategy ==

If testing is defined feature-wise (which it probably should be) then a given FeatureTest can be run against two configurations:

# feature:install <just the feature> - which confirms that the feature works as only what it claims to need is installed in the container.
# feature:install <everything> - which confirms that it works in the presence of other features
