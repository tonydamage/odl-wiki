'''Q: MD-SAL architecture 101:''' 
:* '''What is the overall architecture, components and functionality?'''
:*  '''Who supplies which components, how are the components plumbed, etc.?'''

A: The overall MD-SAL architecture did not really change from the Hard SAL. As with the Hard SAL, plugins can be data providers, or data consumers or both (although the Hard SAL did not explicitly name them as such). Just like the Hard SAL, the MD-SAL connects data consumers to appropriate data providers and (optionally) facilitates data adaptation between them. 

:Now, in the Hard SAL, the SAL APIs, request routing between consumers and providers, and data adaptations are all statically defined at compile/build time. In the MD-SAL, the SAL APIs and request routing between consumers and providers are defined from models, and data adaptations are provided by 'internal' adaptation plugins. API code is generated from models when a plugin is compiled. The API code is loaded into the controller along with the rest of the plugin containing the model when the plugin OSGI bundle is loaded into the controller.

In addition, what functionality does the MD-SAL assume? For example, does the SAL assume the network model shown in Jan's slide will be available?
