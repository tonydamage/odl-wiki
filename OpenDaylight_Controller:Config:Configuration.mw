=Configuration=
'''Configuration''' operation consists of three states. '''Proposed''' configuration is created and it's target is to replace old configuration. It needs to be validated firstly. If it passes successfully, it's state will be changed to '''validated'''. Now configuration can be '''committed''' and affected modules reconfigured.<br />
In fact each configuration is wrapped into the '''transaction'''. Once the transaction is created, it can be '''configured''', user is either able to '''abort''' the transaction during this stage. After the transaction configuration is done, it is committed to '''validation''' stage. Here the validation is invoked. If validation fail, transaction can be reconfigured. On success, '''second phase commit''' is called. In the case that commit is successful, transaction is in last stage - '''committed'''. After that, desired modules are reconfigured. If second phase commit fails, it means that transaction is '''unhealthy''' - new instance creation failed. Thereafter, application can stay in inconsistent state.

<gallery>
File:Configuration.jpg|Configuration states
File:Transaction.jpg|Transaction states
</gallery>

===Validation===
To secure consistency, conflict avoidance and safety of new configuration, validation process is absolutely needed. Usually, validation check input parameters of new configuration and mainly verify module-specific relations. Validation procedure results in decision of proposed configuration healthy.

===Dependency resolver===
Since dependencies between modules can exist, change of one module configuration can affect others state. Therefore it is needed to verify whether dependent modules can be resolved. It acts likewise dependency injectors - dependency tree is build.

==APIs and SPIs==
In this section configuration system APIs and SPIs will be briefly described.

===SPIs===
'''Module'''
org.opendaylight.controller.config.spi.Module is common interface for all modules - each module must implement it. Module is designated to hold configuration attributes, validate them and create instance of service based on the attributes. This instance must implement AutoCloseable interface, due to resources clean up. If module was created from already running instance, it contains and old instance of module. Module can implement multiple services. if module depends on other modules, setters need to be annotated with @RequireInterface.

'''Module creation'''
Firstly, module needs to be '''configured''' - set all required attributes. Thereafter module is moved to '''commit''' stage, where validation is performed. If fails - module can reconfigured, otherwise new instance is '''created''' or old instance is reconfigured.

'''ModuleFactory'''
org.opendaylight.controller.config.spi.ModuleFactory interface must be implemented by each module factory. Module factory can create new module instance in two ways - from existing module instance or pure new instance. Module factory implementation must have globally unique name.

===APIs===
'''ConfigRegistry'''<br />
represents functionality provided by configuration transaction (create, destroy module, validate, abort transaction).

'''ConfigTransactionController'''<br />
represents functionality for manipulating with configuration transactions (begin, commit config ).

'''RuntimeBeanRegistratorAwareConfiBean'''<br />
module implementing this interface will recieve RuntimeBeanRegistrator before getInstance is invoked.

===Runtime API===

'''RuntimeBean'''<br />
common interface for all runtime beans.

'''RootRuntimeBeanRegistrator'''<br />
represents functionality for root runtime bean registration, which subsequently allows hierarchical registrations.

'''HierarchicalRuntimeBeanRegistration'''<br />
represents functionality for runtime bean registration and unreregistration from hierarchy.

===JMX API===
JMX API is purposed as a transition between Client API and JMX platform.

'''ConfigTransactionControllerMXBean'''<br /> 
extends ConfigTransactionController, executed by Jolokia clients on configuration transaction.

'''ConfigRegistryMXBean'''<br />
represents entry point of configuration management for MXBeans.

===Object names===
Object Name is pattern used in JMX to locate JMX beans. It consists of domain and key properties (at least one key-value pair). Domain is defined as "org.opendaylight.controller". The only mandatory property is "type".

==Use case scenarios==
Few samples of successful and unsuccessful transactions scenarios.
===Successful commit scenario===
# User create transaction calling creteTransaction() method on ConfigRegistry.
# ConfigRegisty create transaction controller and registers the transaction as new bean.
# Runtime configurations are copied to the transaction. User can create modules and set their attributes.
# Configuration transaction is to be committed.
# Validation process is performed.
# After successful validation, second phase commit begins.
# Modules proposed to be destroyed are destroyed - their service instances are closed.
# Runtime beans are set to registrator
# Transaction controller invoke method getInstance on each module
# Transaction is committed and resources are closed or released.

===Validation failure scenario===
Transaction is same as previous case until validation process. 
# If validation fails (i.e. illegal input attributes values or dependency resolver failure), ValidationException is thrown and exposed to user.
# User can decide to reconfigure transaction and commit again or abort current transaction.
# On aborted transaction, TransactionController and JMXRegistrator are properly closed.
# Unregistration event is send to ConfigRegistry.
