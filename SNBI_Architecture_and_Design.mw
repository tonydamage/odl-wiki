=Introduction=
Key distribution in a scaled network has always been a challenge, as part of the SNBI project we intend to simplify the process of bootstrapping network devices with the keys required for secure communication. SNBI enables not only boot strapping devices with the required keys, but enables connectivity to the network devices by assigning unique IPv6 addresses. Admission control of devices into a specific domain is achieved using the combination of Black/white list of authorized devices and the device IEEE802.1 AR certificates.

=Architecture and Design=
The diagram below represents the various modules involved. The description of each of the module will be done below.

[[File:SNBI.png|800px|center]]

== Controller Components ==

=== SNBI South Plugin ===
[[File:SNBI header.png|400px|right]]
The SNBI south plugin involves the following set of modules.
* '''SNBI Sockets:''' SNBI uses application layer sockets to sends and receive packets. SNBI operates on top of UDP port 8888, and appends an SNBI header to all the packets that are sent out on the socket. The SNBI header is used to identify the type of message being exchanged.

::'''''Version:'''''  A 4 bit version indicates SNBI protocol version.
::'''''reserved:''''' A 4 bit reserved field, it is not used currently.
::'''''protocol type:''''' A 8 bit protocol type field, the protocol type identifies what type of protocol information is being exchanged. Examples of protocol types are Adjacency Discovery, Bootstrap etc.
::'''''Flags:''''' A 8 bit flags field, this is reserved and is not being used.
::'''''Message type:''''' A 16 bit message type field. The field identifies the message type for each protocol type. The various message types for each protocol type will be described further below.
[[File:Snbi_ND.png|400px|right]]
*'''Neighbour Discovery:''' The first step towards accommodating devices into a secure network is Neighbour Discovery. SNBI performs neighbour discovery of SNBI agents by periodically transmitting ND packets to a multicast IPv6 address "0xFF02::1". The source IPv6 address for these packets will be the linklocal IPv6 address of the interface on which the packets are being transmitted. All SNBI agents listens to this multicast stream to receive ND packets. Information such as Neighbour ID, Domain, Credentials, Capabilities etc are packed in the form of TLVs and are exchanged between SNBI agents and the information received from various SNBI agents an ND table is constructed to maintain the adjacency information. Further the registrar module will authorize the SNBI agent discovered into the domain.Neighbour Discovery is periodic and bidirectional, ND packets are transmitted every 10 seconds. A 40 second refresh timer is associated with each discovered neighbour. -- '''ND HELLO Msg'''.Upon expiry of the refresh timer, the Neighbour Adjacency is no longer valid and is removed from the ND table.The certificate information (SUDI) exchanged by the SNBI agents are further validated and accepted into the domain by the SNBI registrar in the controller.Any new SNBI agent which is still not part of the SNBI domain, exchanges ND packets with default(empty) domain name. Once the device is accepted into the domain, the ND packets contain the domain name they the device belongs to.It should be possible that the same is SNBI neighbour is discoverable on multiple links, the expiry of one doesn't automatically remove the other from the ND table.Once a device is discovered, the protocol tries to fetch the device domain certificate if the device is already bootstrapped.Following is the packet format of the message that is used for Neighbour Discovery.
[[File:ND+cert Req.png|400px|center]]
:The diagram above depicts the message flow for L3 neighbour discovery and certificate exchange. After a neighbour is discovered the protocol verifies if the device is already bootstrapped by requesting for the device domain certificate. -- '''CERT REQ/RESP msg.'''. If the device is not bootstrapped, then the proxy device initiates the bootstrap of the new device.
[[File:BS NBR invite.png|400px|right]]
*'''BootStrap:''' Bootstrapping a device is all about the following in sequence.
::- Authenticate a Device.
::- Allocate appropriate device ID and IPv6 address to uniquely identify the device in the network.
::- Allocate required keys by installing a Device Domain Certificate.
::- Accommodating the device into the domain.
::- The new device is deemed outside the domain until it is bootstrapped.
::- The Forwarding element which discovered the new device acts as the proxy and proxies all request to the registrar.

* Neighbour Invite phase.
:: BootStrap connect message is initiated by the proxy device on behalf of the New device -- '''NEIGHBOUR CONNECT Msg.'''. The message is sent to the registrar to authenticate the device. The source IPv6 address is the proxy IPv6 address.The destination IPv6 address is the registrar IPv6 address. UDI here is the new device UDI which is used to authenticate using a white list at the registrar. The SNBI Registrar provides appropriate device ID and IPv6 address to uniquely identify the device in the network and then invites the device to join the domain. -- NEIGHBOUR INVITE Msg. Once the new device is authenticated, its invited to join the domain. The Src IPv6 address is the registrar IPv6 address. The Dest IPv6 address is the proxy IPv6 address. The UDI is the UDI of the new device being invited. SNBI RA signature is the signed hash of the message by the RA. Once the proxy device receives the Invite message from the SNBI RA, it forwards the message to the new device using the linklocal address.
[[File:BS.png|400px|center]]

* Neighbour Reject
::If the Device UDI is not in the white list of devices, then the device is rejected and is not accepted into the domain. The proxy device just updates its Db with the reject information but still maintains the Neighbour relationship.
[[File:Bs reject.png|400px]][[File:Bs rej flow.png|450px]]
* Neighbour BootStrap Phase -Once the new device gets a neighbour invite message, it tries to boot strap itself by performing the following.
::- Generate a key pair.
::- Generate a Certificate Sign Request(CSR) PKCS10 request and gets it signed by the CA running at SNBI Registrar. -- '''BS REQ Msg.'''
::- Once the certificate is enrolled and signed by the CA, the generated x.509 certificate is returned back to the new device to complete the bootstrap process. -- '''BS RESP Msg.'''
