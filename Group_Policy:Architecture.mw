This document describes the architecture for the [[Group Policy:Main|group-based policy project]], a part of [[Main Page|OpenDaylight]].  The group-based policy project defines an application-centric policy model for OpenDaylight that separates information about application connectivity requirements from information about the underlying details of the network infrastructure.

This document is organized as a series of overview pages that provide a high-level picture of a particular area, but can then link into pages that provide a more detailed treatment of some aspect of that high-level area.  This page provides an overview for the system as a whole, and has subpages that provide information about each of the major components of the architecture.

== Overview ==
[[File:group-based policy architecture.png|framed|right|Overview of group-based policy archtecture.  State repositories (blue) communicate using MD-SAL (orange) with external orchestration systems as well as internally with renderers (green) through the renderer common framework (red)]]
The components of the architecture are divided into two main categories.  First, there are components that are responsible for managing the policy, configuration, and related state.  These are the components that deal with the higher-order group-based policy that exists independent of the underlying infrastructure.  Second, the renderer components that are responsible for applying the policy model to the underlying network infrastructure.  The system can support potentially a variety of renderers that may have very different sets of features and different approaches for enabling the policy that the user has requested.

The key to understanding the architecture is to first understand the policy model -- much of the design of the system flows directly from the design of the policy model.

== Policy Model ==
{{Main|[[Group_Policy:Architecture/Policy_Model|Policy Model]]}}
{{:Group_Policy:Architecture/Policy_Model}}
== State Repositories ==
The state repositories are distributed data stores that provide the configuration and operational data required for renderers to apply the policy as specified by the user.  The state repositories all model their state as yang models, and store that state in the MD-SAL data store as either operational or configuration data, as appropriate.  The state repositories implement a minimum amount of actual functionality and instead focus on defining the models and supporting the correct querying and subscription semantics.  The intelligence is expected to be in the renderers.

=== Querying and Subscription ===
{{Main|[[Group_Policy:Architecture/Querying and Subscription|Querying and Subscription]]}}
{{:Group_Policy:Architecture/Querying and Subscription}}
=== Endpoint Repository ===
{{Main|[[Group_Policy:Architecture/Endpoint_Repository|Endpoint Repository]]}}
{{:Group_Policy:Architecture/Endpoint_Repository}}
=== Policy Repository ===
{{Main|[[Group_Policy:Architecture/Policy_Repository|Policy Repository]]}}
{{:Group_Policy:Architecture/Policy_Repository}}
=== Status Repository ===
{{Main|[[Group_Policy:Architecture/Status_Repository|Status Repository]]}}
{{:Group_Policy:Architecture/Status_Repository}}

== Renderers ==
One of the key design features of the group-based policy architecture is that it can support a variety of renderers based on very different underlying technology.  This is possible because the policy model is based only on high-level user intent, and contains no information about the details of how the network traffic is actually forwarded.  However, one consequence of this design choice is that the renderers actually contain most of the complexity in the design of the system, and most of the real problems in building a software-defined virtual network solution will need to be solved by the renderers themselves.

=== Renderer Common Framework ===
{{Main|[[Group_Policy:Architecture/Renderer_Common|Renderer Common]]}}
{{:Group_Policy:Architecture/Renderer_Common}}
=== Open vSwitch-Based Overlay Renderers ===
{{Main|[[Group_Policy:Architecture/OVS Overlay|OVS Overlay]]}}
{{:Group_Policy:Architecture/OVS Overlay}}
==== OpenFlow/OVS Renderer ====
{{Main|[[Group_Policy:Architecture/OpenFlow_Renderer|OpenFlow Renderer]]}}
{{:Group_Policy:Architecture/OpenFlow_Renderer}}
==== OpFlex Renderer ====
{{Main|[[Group_Policy:Architecture/OpFlex_Renderer|OpFlex Renderer]]}}
{{:Group_Policy:Architecture/OpFlex_Renderer}}
