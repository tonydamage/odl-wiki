= Features =
* OpenDayLight SAL plugin
* Support SNMP & CLI as the south bound protocol to enable Ethernet switch on the SDN paradigm
* New mechanisms for switch discovery and topology discovery for Ethernet switch in SDN

= Overview =
We propose a southbound plugin that can control the off-the-shelf commodity Ethernet switches for the purpose of building SDN using Ethernet switches. For Ethernet switches, forwarding table and ACL are where one can install the flow configuration on, and this is done via SNMP and CLI in the proposed plugin. In addition, extensions to the SAL configuration APIs are needed to provide additional API to support some settings, e.g. disabling STP and flooding, etc, which are required for Ethernet switches in SDN.

[[File:SNMP4SDN_in_ODL_Architecture.jpg|400px]]

Figure. SNMP4SDN as a southbound plugin in OpenDaylight architecture

= Functionality =
For the SDN controller to support building an SDN using Ethernet switches, it needs to be able to configure flows on the switches. In addition, in initial, it has to discover which switches are under its management and then can configure flows on them. Also, the connectivity topology among switches is necessary information for the controller and applications. In this plugin, flow configuration on Ethernet switch would be done via SNMP or CLI, switch discovery would be achieved via SNMP trap sent from the switch, and topology discovery would be resolved by reading LLDP data on the switches.

== Flow configuration on Ethernet switch ==
A flow’s configuration on an Ethernet switch could be implemented by configuring forwarding table and ACL, via SNMP or CLI.

=== Forwarding table configuration ===
The entry of the forwarding table is composed of “destination mac address” and “output port”, so a flow with indicating only its destination mac address and output port could be configured on the forwarding table. The configuration could be done via SNMP. That is, the plugin could send corresponding SNMP command to the switch so as to add/modify/delete/read an entry on the forwarding table that equivalents to add/modify/delete/read a flow on the switch.

=== ACL configuration ===
(TBD)

== Switch discovery ==
A mechanism for the controller and switches to know each other are necessary in an SDN. For example, OpenFlow switches need to be configured to have a controller IP address set, then every switch will proactively connects the controller, then the controller can manage the switches. As for Ethernet switches, however, they were not designed to behave like OpenFlow switches to proactively connect to the specific controller, since in tradition it is not assumed to have a central controller above. Therefore, the approach for Ethernet switch to proactively notify the controller of its existence could be: using SNMP trap. That is, every Ethernet switch is (1) configured with its SNMP host (i.e. the controller’s IP address) and (2) configured to send SNMP trap when the switch boots up. (1) and (2) are supported in general and needs to be configured via CLI for only once. In this way, the controller will know a switch joining in, when receiving the switch’s SNMP trap of booting up.

[[File:SNMP4SDN_SwitchDiscovery.jpg | 500px]]

Figure. SNMP trap configuration in order to enable switch discovery

== Topology discovery ==
To discover the connectivity topology among all the switches, we can know the connectivity between switches by reading the LLDP data on every switch, and then the whole topology among all the switches could be resolved. An example is illustrated as below. The plugin queries each switch, and each switch responds with its LLDP data, including the switch it self’s port IDs, chassis IDs of the connected switches, and port IDs of the connected switches. Then, this information could be resolved as edges.

[[File:SNMP4SDN_TopologyDiscovery.jpg|500px]]

Figure. Topology discovery example

= Design =
The modules in the plugin as well as the interaction among the modules are depicted as follows.
* FlowProgrammerService: to add/modify/remove flows on the switches.
* ReadService: to acquire the flows on the forwarding table on the switch.
* InventoryService: to acquire the switches’ and their ports’ properties.
* DiscoveryService: to discover the underlying switches as well as the port pairs connecting the switches. The updates from discovery will also be reflected to the TopologyService.
* TopologyService: to discover the connectivity topology among switches by resolving the LLDP data retrieved by SNMP queries to switches.
* ConfigService: to disable kind of flooding (BPDU flooding, broadcast flooding, multicast flooding, and unknown flooding), disabling source mac check and source learning, and setting SNMP host and community.
* DataPacketService: to pass the received data packets to controller, or transmit data packets as the controller requires.

For the services above, when they need to read or configure the underlying switches via SNMP or CLI, these queries are dealt with the modules SNMPHandler and CLIHandler which directly talk with the switches.

* SNMPHandler: 
** To support the FlowProgrammerService to add/modify/remove flows on the switch in form of SNMP commands.
** To support the ReadService to acquire the flows on the switch in form of SNMP commands.
** To support the DiscoveryService to discover switches and the topology.
* CLIHandler: 
** To support the FlowProgrammerService to add/modify/remove flows on the switch in form of CLI commands.
** To support the ReadService to acquire the flows on the switch in form of CLI commands.

[[File:SNMP4SDN_Modules.jpg|500px]]

Figure. Modules in the SNMP4SDN plugin

[[File:SNMP4SDN_Architecture_Internal.jpg|500px]]

Figure. Architecture of the SNMP4SDN plugin and the interaction among the modules
