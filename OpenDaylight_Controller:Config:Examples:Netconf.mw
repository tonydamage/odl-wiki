In the Hydrogen release, the Netconf Client (NCC) must be configured with the address and login credentials (username/password) for each target Netconf Server to which it connects. An NCC instance must be configured for a each target Server.

The yang model for NCC configuration can be found at {{git/link|controller.git|opendaylight/md-sal/sal-netconf-connector/src/main/yang/odl-sal-netconf-connector-cfg.yang}}. The per target Server configuration includes the target Server's IP address, port, connection type (TCP or SSH), and username/password. The NCC configuration also includes a reference to MD-SAL and the configuration of NCC's thread group for opening and maintaining sockets and its event executor for sourcing events into MD-SAL. Defaults values for global configuration, defined in this page, should be used in most cases.

=Configuring Netconf client with yangcli-pro=

== Requirements ==
yangcli-pro version 13.04-9.2 or later.

== Connecting to the Controller Configuration Server ==

To connect to the controller's config server with a plain TCP connection, use the syntax described below. No authentication is performed for TCP connection, user and password parameters can bye any ascii strings. 
<pre>
yangcli-pro --user=a --password=a --transport=tcp --ncport=8383 --server=localhost
</pre>

Alternatively, you may connect using SSH: 
<pre>
yangcli-pro --user=netconf --password=netconf --transport=ssh --ncport=1830 --server=localhost
</pre>

For better debugging please include following arguments:

<pre>
 --log=/tmp/yuma.log --log-level=debug4
</pre>
Note that when the log file is set, the output will not appear on stdout.

== Configuring an NCC Instance ==
This example shows how to configure the NCC to connect to the collector's own Netconf server. The controller's configuration subsystem can then be accessed through the controller's NB Restconf API.

Once yangcli-pro connects to the controller's Netconf server, issue the following sequence of commands:

* Enter '''merge /modules/module'''. yangcli-pro will prompt for a string value for leaf <name>. This is the name of the module that we are configuring.
* Enter '''controller''' for the name of the module, since we are configuring the NCC for the controller (you can enter any ascii name you like). yangcli-pro will prompt for a string value for leaf <type>. This is the type of the module that we are configuring.
* Enter '''sal-netconf-connector'''. yangcli-pro will print a list of possible choices for the selection of the case statement, as shown below.
<pre>
  1: case netty-threadgroup-fixed:
       leaf thread-count
  2: case binding-broker-impl:
       container data-broker
       container notification-service
  3: case binding-data-broker:
       container dom-broker
       container mapping-service
  4: case logback:
       list file-appenders
       list rolling-appenders
       list console-appenders
       list loggers
  5: case dom-broker-impl:
       container data-store
  6: case threadpool-flexible:
       leaf max-thread-count
       leaf minThreadCount
       leaf keepAliveMillis
       container threadFactory
  7: case remote-zeromq-rpc-server:
       container dom-broker
       leaf port
  8: case shutdown:
       leaf secret
       leaf old-secret
  9: case threadpool-scheduled:
       leaf max-thread-count
       container threadFactory
  10: case netty-hashed-wheel-timer:
       leaf tick-duration
       leaf ticks-per-wheel
       container thread-factory
  11: case async-eventbus:
       container threadpool
  12: case threadfactory-naming:
       leaf name-prefix
  13: case sal-netconf-connector:
       leaf address
       leaf port
       leaf tcp-only
       leaf username
       leaf password
       container dom-registry
       container boss-thread-group
       container worker-thread-group
       container event-executor
  14: case threadpool-fixed:
       leaf max-thread-count
</pre>
* Enter the number of the line that contains the ''sal-netconf-connector'' case ('''13''' in the list above).
* The next step is to configure the sal-netconf-connector's attributes. Yangcli-pro will now prompt for target server's IP address:
** Enter the target server's '''<IP-Address>''' (for example, '''localhost''' or '''127.0.0.1''' if yangcli-pro is running on the same host as the controller). Yangcli-pro will now prompt for the target server's port:
** Enter the target server's '''<Port-Number>''' ('''8383''' in this example, since we're configuring a TCP connection; if we were configuring an SSH connection, '''1830''' would be entered). Yangcli-pro will now prompt for the user name.
** Enter '''<User-Name>''' ('''foo''' in our example; user name does not matter, since we're configuring a TCP connection). Yangcli-pro will now prompt for the password.
** Enter '''<Password>''' ('''bar''' in our example; password does not matter, since we're configuring a TCP connection). 
* The next step is to configure the MD-SAL Connector (dom-registry).
**  Yangcli-pro will prompt for the dom-registry type (Enter service-type-ref value for leaf <type>):
** Enter '''dom-broker-osgi-registry'''. Yangcli-pro will now prompt for the dom-registry name (Enter leafref value for leaf <name>):
** Enter '''dom-broker'''. Dom-broker is the default configured dom-registry - don't change this unless you have a good reason and you know what you're doing
* The next step is to configure the boss thread group (the boss-thread-group container):
** Yangcli-pro will prompt for the boss-thread-group type:
** Enter '''netty-threadgroup'''. Yangcli-pro will prompt for the boss-thread-group name:
** Enter '''global-boss-group'''. Global-boss-group is the default boss-thread-group - don't change this unless you have a good reason and you know what you're doing
* The next step is to configure the worker thread group (the worker-thread-group container):
** Yangcli-pro will prompt for the worker-thread-group type:
** Enter '''netty-threadgroup'''. Yangcli-pro will prompt for the worker-thread-group name:
** Enter '''global-worker-group'''. Global-worker-group is the default worker-thread-group - don't change this unless you have a good reason and you know what you're doing
* The next step is to configure the Event Executor (the event-executor container):
** Yangcli-pro will prompt for the event-executor type:
** Enter '''netty-event-executor'''. Yangcli-pro will prompt for the event-executor name:
** Enter '''global-event-executor'''. Global-event-executor is the default event-executor - don't change this unless you have a good reason and you know what you're doing
* Finally, if everything has been entered properly and the config subsystem successfuly validated the entries, yangcli-pro will print something like:
<pre>
RPC OK Reply 32 for session 6 [default]:
</pre>

The values of all above entries are repeated below for reference:
<pre>
foo@192.168.4.1> history

  [958]	merge modules/module
  [959]	controller
  [960]	sal-netconf-connector
  [961]	13
  [962]	192.168.4.1
  [963]	8383
  [964]	true
  [965]	foo
  [966]	bar
  [967]	dom-broker-osgi-registry
  [968]	dom-broker
  [969]	netty-threadgroup
  [970]	global-boss-group
  [971]	netty-threadgroup
  [972]	global-worker-group
  [973]	netty-event-executor
  [974]	global-event-executor
  [975]	commit
</pre>

After successful commit you can verify that the controller node shows in in OpenDaylight inventory. From a REST client (e.g. Postman), issue a GET request for all nodes in the inventory:
<pre>
GET 'http://<Controlller-IP-Address>:8080/restconf/operational/opendaylight-inventory:nodes'
Accept: application/json
</pre>

You should see something like this:
<pre>
{
    "nodes": {
        "node": [
            {
                "id": "controller"
            }
        ]
    }
}</pre>

=Editing Netconf Client Configuration in the Controller Config File =

Configuration for different controller modules can be added into the controller's current configuration located in 'configuration/current/controller.currentconfig.xml'. It it important to notice that initially the file controller.currentconfig.xml does not exist whether pulling and compiling from source code or downloading the zipped distribution. Create the controller.currentconfig.xml file or if the controller.currentconfig.xml exists and have a configuration such as [[OpenDaylight Controller:Config:Examples:Netconf:Example Configuration]], insert the following stanza into the <modules></modules> section to add the above configuration:

<source>
 <module>
     <type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">prefix:sal-netconf-connector</type>
     <name>controller</name>
     <port xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">8383</port>
     <username xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">foo</username>
     <worker-thread-group xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
         <type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:netty">prefix:netty-threadgroup</type>
         <name>global-worker-group</name>
     </worker-thread-group>
     <address xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">192.168.4.1</address>
     <tcp-only xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">true</tcp-only>
     <event-executor xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
         <type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:netty">prefix:netty-event-executor</type>
         <name>global-event-executor</name>
     </event-executor>
     <password xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">bar</password>
     <boss-thread-group xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
         <type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:netty">prefix:netty-threadgroup</type>
         <name>global-boss-group</name>
     </boss-thread-group>
     <dom-registry xmlns="urn:opendaylight:params:xml:ns:yang:controller:md:sal:connector:netconf">
          <type xmlns:prefix="urn:opendaylight:params:xml:ns:yang:controller:md:sal:dom">prefix:dom-broker-osgi-registry</type>
          <name>dom-broker</name>
     </dom-registry>
</module>
</source>

To change the configuration for a different target Netconf server, edit the <name/>, <address/>, <port/>, <tcp-only/>, <username/> and <password/> entities.

An example configuration file can be found in [[OpenDaylight Controller:Config:Examples:Netconf:Example Configuration]]
