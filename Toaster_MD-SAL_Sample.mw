__TOC__

=Overview =
This page will be used to document the Toaster MD-SAL sample.

= Documentation Contributors =
This section can be used to track people actively contribute documentation on the Toaster example.

''Add your name here if you are contributing to the documentation effort in anyway. It will help to ensure we are not duplicating efforts. This is a temporary list until we get the toaster documented.''

Toaster Tutorial
* Stefan Mag is working on it and draft will be ready by 17th April
Would like to contribute comments to yang / java code
* Devin Avery
Will be implementing the tool to generate the JavaDoc, which shows how the generated classes are used instead of just describing the model.
* Debolina Bandyopadhyay

=Questions=
''Place questions here that we can try and get answered''
# Were the toaster-provider, toaster-provider-impl, toaster-consumer, toaster-consumer-impl yang models created post Hydrogen release when toaster initialization was moved to config subsystem?
# It will be good to show the relation between how various java classes get generated based on Yang elements. e.g. if RPCs are present it created <ModuleName>Service java class, if Notifications are present it creates <ModuleName>Listener etc
#:Answer: The following wiki page provides a deeper dive into how the yangtools generates files. [[YANG Tools:YANG to Java Mapping]]
# The OpendaylightToaster implements the getToaster method from ToasterProviderRuntimeMXBean interface to return a hard-coded Toaster instance. However, issuing a GET via restconf does not invoke the OpendaylightToaster to return this instance. restconf goes directly to the data store. Also issuing a POST to create the Toaster goes directly to the data store. There seems to be a disconnect here between restconf and the OpendaylightToaster service. Is the OpendaylightToaster actually supposed to access the data store service as restconf does?
# While invoking make-toast RPC, I specified an incorrect toasterToastType, "wheat-toast" instead of "wheat-bread". It got into the OpendaylightToaster.makeToast method fine although it threw an NPE because toastType was null. However since the toast type was invalid it should have been caught earlier and an exception thrown. The transformation is done in a BindingCodec class that is generated on-the-fly from the MakeToastInput interface. The generated code actually calls LazyGeneratedCodecRegistry::IdentityCompositeCodec.deserialize which looks up the name in qnamesToIdentityMap and just returns null if not found. It seems this method should throw an IllegalArgumentEx.

= Toaster Tutorial (draft)=
[[Toaster_MD-SAL_Sample:Toaster Tutorial|Toaster Tutorial]]
