== Overview ==
{{:OpenDaylight Controller:MD-SAL:Explained:Include:Messaging Patterns}}

== RPCs (unicast messaging) ==

=== Concepts ===

=== RPC Routing ===

==== RPC Routing by type ====

This is default RPC routing behaviour, which assumes only one implementation
per RPC Type, which is selected purely on message type.

==== RPC Routing by payload ====

RPC Routing by payload, is defined by use of extensions from yang-ext module,
which defines which leaf from payload is used for routing.

==== Implementations ====

* Brokers / Registry
:* sal-binding-broker: org.opendaylight.controller.sal.binding.impl.RpcProviderRegistryImpl - (Binding version)
:* sal-dom-broker:	org.opendaylight.controller.sal.dom.broker.impl.SchemaAwareRpcBroker - (DOM version)

== Notification ==
=== Concepts ===

=== Implementation ===

* Brokers / Registry
:*sal-binding-broker:	org.opendaylight.controller.sal.binding.impl.NotificationBrokerImpl - (Binding Version)
:*sal-dom-broker:	org.opendaylight.controller.sal.dom.broker.impl.NotificationRouterImpl - (DOM Version)
== Data Tree Related Messaging ==

=== Concepts ===

* Data Operations
:* Read node / subtree
:* Put node / subtree
:* Merge node / subtree
:* Delete node / subtree
* Transaction
* Transaction Chain
* Data Change Event

=== Transactions ===

==== Read-only Transaction ====

==== Write-only Transaction ====

==== Read-write Transaction ====

===== Implementations =====

* Brokers
:* Async Data Brokers (helium API):
::* sal-dom-broker:	org.opendaylight.controller.md.sal.dom.broker.impl.DOMDataBrokerImpl
::* sal-binding-broker:	org.opendaylight.controller.md.sal.binding.impl.ForwardedBindingDataBroker
:* Backwards-compatibility brokers (hydrogen APIs)
::* sal-dom-broker:	org.opendaylight.controller.md.sal.dom.broker.impl.compat.BackwardsCompatibleDataBroker
::* sal-binding-broker:	org.opendaylight.controller.md.sal.binding.impl.ForwardedBackwardsCompatibleDataBroker

* Data Store
:* o.o.c.sal.store.impl.InMemoryDOMDataStore 
* Transactions
:* Data Broker transactions
::* o.o.c.sal.dom.broker.impl.DOMDataBrokerImpl.AbstractCompositeTransaction - Composite transaction which consists of multiple DOM Store transactions, each for particular conceptual data tree.
::* sal-binding-broker:	org.opendaylight.controller.md.sal.binding.impl.AbstractForwardedTransaction
:* Data Store transactions
* sal-dom-broker:	org.opendaylight.controller.md.sal.dom.store.impl.AbstractDOMStoreTransaction - (InMemory DOM Data Store  transactions, which implements actual operations logic and transactional separation
:* Backwards-compatible transaction (hydrogen APIs)
::* sal-dom-broker:	org.opendaylight.controller.md.sal.dom.broker.impl.compat.BackwardsCompatibleTransaction

:
==== Data change notifications ====


==== Implementations ====

* Transfer objects:
	* o.o.c.sal.binding.impl.TranslatedChangeEvent (Binding)
	* o.o.c.sal.store.impl.ImmutableDataChageEvent
* Computation of data change events
	* o.o.c.sal.dom.store.impl.ResolveChangeEventsTask (invoked by InMemoryDOM Data Store)
