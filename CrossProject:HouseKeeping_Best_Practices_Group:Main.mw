== NOTE ON TIMING ==

A lot of folks who are needed to sort out these problems are quite busy getting Hydrogen out right now, so while this page is intended to provide a forum 
to collect these issues, and possible approaches to them, do not expect serious traction towards solutions until after Hydrogen goes out the door and folks
have time for a good long sleep ;)

== Introduction ==

As we grow together a community, it can help to figure out best practices to recommend to projects to make the process of living together more comfortable.
These are not intended to be things *forced* on a project, but rather, to identify problems we need to solve, and robust solutions to those problems suitable for
broad adoption.

== Problems ==

{| class="wikitable sortable"
|-
! Problem !! Description  !! Potential Difficulties !! SubPage
|-
| VERSIONING || This is actually a few problems rolled together.  First, there is a desire to have bundles rev their versions whenever their API changes.  Second, there is a desire on the part of projects to be able to control the rate at which they absorb change from projects they depend on.  A reasonable best practice for versioning looks like a promising mechanism for managing both. || There are several potential problems with using versioning to solve these problems.  First, we have many many bundles, and so manually keeping up versions across many projects is likely to be extremely fragile.  Second, There is danger in projects falling *too* far behind things they depend on, particularly if that falling behind is unintentional.  Neither of these problems should be insurmountable, but  both need to be addressed|| [[CrossProject:HouseKeeping Best Practices Group:Versioning|Versioning]]||
|-
| INTEGRATION TESTS || Pax-exam turns out to be quite fragile as an integration test mechanism cross projects, as it can produce false failures in situations in which no actual functional failure has occurred.   This leads to false appearances of instability due to failures rooted in pax-exam fragileness rather than actual breakage in the system. || || [[CrossProject:HouseKeeping Best Practices Group:Integration Test|Integration Test]]
|-
| WHITESPACE || A failure on the part of a project to have a single, enforced policy on whitespace can lead to difficult to read diffs, where simple whitespace changes get reported along side actual code changes. || Care must be taken if using a mechanism like checkstyle to insure that it not run on generated code, as such code is not in fact checked into the code base, and there is often limited control over whitespace issues there.  Additionally, care must be taken to insure that projects have independence. || [[CrossProject:HouseKeeping Best Practices Group:Whitespace| Whitespace]]
| -
| MINDFULDEPENDENCIES || Java has an incredibly rich ecosystem of components available through maven allowing for rapid code velocity.  Thus the ability to bring shift dependencies, both for new functionality and to address bugs is critical to development and should not be curtailed.  However, developers *should* be made to *think* about their dependency choices.  Additionally, there is benefit in trying to converge on a common version of a dependency when possible. || ||  [[CrossProject:HouseKeeping Best Practices Group:Whitespace|Mindful Dependencies]]

|}
