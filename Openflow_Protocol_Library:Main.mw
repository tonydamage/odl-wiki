{|  class="wikitable" style="color:#ff6600; background-color:#ffcc99;"  align="right" border="1"
|align="center"|'''OpenFlow Protocol Library Facts                                                           '''
|-
|'''Project Creation Date:''' July 18th, 2013
'''Lifecycle State:''' Incubation <br>
'''Primary Contact:''' Michal Polkorab <michal.polkorab@pantheon.sk> <br>
'''Project Lead:''' Michal Polkorab <michal.polkorab@pantheon.sk> <br>
'''Committers:''' <br>
* Daniel Bartos <daniel.bartos@pantheon.sk>
* Adam Brcek <adam.brcek@pantheon.sk> <br>
'''IRC:'''  freenode.net #opendaylight <br>
'''Mailing List:''' openflowjava-dev@lists.opendaylight.org <br>
|}

= OpenFlow Protocol Library: Links =

* [[Project Proposals:Openflow Protocol Library|Project Proposal]]
* [[Openflow Protocol Library:RELEASE Plan 2013|RELEASE Plan 2013]]
* [[Openflow Protocol Library:PROJECT Plan 2013|PROJECT Plan 2013]]

* [[Openflow Protocol Library:Possible future progress|Future progress]]

=OpenFlow  Protocol Library: Insights=

==Architecture and Design==
===Key objectives=== 
* Simultaneous support of multiple versions of wire-protocol 
* Extensibility to support later OpenFlow versions 
* Immutable transfer objects generation 
* Scalable non-blocking implementation 
* Pipeline processing 
* Scatter buffer 
* TLS support 

===Common principles===

* Serialization (message coding / decoding) logic is separated from implementation of transfer objects.

* All transfer objects returned from this library are immutable.

* Input/Output processing is done via processing pipeline, which could be modified in runtime based on session characteristics (e.g. support of multiple binary protocol versions). 
==Components==

===Public API (openflow-protocol-api)===
Set of interfaces and builders for immutable data transfer
objects representing Openflow Protocol structures.
  
Transfer objects and service APIs are infered from several 
YANG models using code generator to reduce verbosity of 
definition and repeatibility of code. 

The following YANG modules are defined:
* openflow-types - defines common Openflow specific types
* openflow-instruction - defines base Openflow instructions
* openflow-action - defines base Openflow actions
* openflow-augments - defines object augmentations
* openflow-extensible-match - defines Openflow OXM match
* openflow-protocol - defines Openflow Protocol messages
* system-notifications - defines system notification objects
 
This modules also reuse types from following YANG modules:
* ietf-inet-types - IP adresses, IP prefixes, IP-protocol related types
* ietf-yang-types - Mac Address, etc. 
 
The use of predefined types is to make APIs contracts more 
safe, better readable and documented (e.g using MacAddress instead 
of byte array...)

===Channel pipeline (openflow-protocol-impl)===
[[File:ChannelPipeline.png|500px|right|Channel pipeline]]

Creates channel processing pipeline based on configuration and 
support.

==== Switch Connection Provider ====
Implementation of connection point for other projects. Library exposes its functionality through this class.

==== TCP Handler ====
Represents single server that is handling incoming connections over TCP protocol.

==== Publishing Channel Initializer ====
This class is used for channel initialization / rejection and passing arguments.

==== Idle State Handler ====
If there are no messages received for more than time specified, handler triggers idle state notification.

==== TLS Detector ====
Detector is used for detecting message encryption.

==== TLS Handler ====
It encrypts and decrypts messages with configured protocol.

==== OF Frame Decoder ====
Parses input stream into message frames for further processing.

==== OF Version Detector ====
Detects version of used OpenFlow Protocol and discards unsupported version messages.

==== OF Decoder ====
Chooses correct deserilization factory (based on type of message) and deserializes messages into generated DTOs.

==== OF Encoder ====
Chooses correct serialization factory (based on type of DTO) and serializes DTOs into byte messages.

==== Delegating Inbound Handler ====
Delegates received DTOs to Connection Adapter.

==== Connection Adapter ====
Provides a facade on top of pipeline, which hides netty.io specifics. Provides a set of methods
to register for incoming messages and to send messages to particular channel / session.

=== SPI (openflow-protocol-spi)===
Defines interface for library's connection point for other projects. Library exposes its functionality through this interface.

=== Integration test (openflow-protocol-it)===
Testing communication with simple client. 

=== Simple client(simple-client)===
Lightweight switch simulator - programmable with desired scenarios.


= Startup Guide =
* [[Openflow Protocol Library:Startup Guide|Startup Guide]]

= Testing =
* [[Openflow Protocol Library:Testing|Testing]]

=== Testing environment ===

* [[Openflow Protocol Library:OpenVirtualSwitch|OpenVirtualSwitch]]

=Documentation=
* [[Openflow Protocol Library:Documentation|Documentation]]

= Release Notes =

* [[Openflow Protocol Library:Release Notes|Release Notes]]
