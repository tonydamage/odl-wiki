

= OpenFlow Protocol Library: Links =

* [[Project Proposals:Openflow Protocol Library]]
* [[Openflow Protocol Library:RELEASE Plan 2013]]
* [[Openflow Protocol Library:PROJECT Plan 2013]]

=OpenFlow  Protocol Library: Insights=

==Architecture and Design==

[[File:Openflow_Protocol_Library.pdf]]

[[File:OpenFlow_Protocol_Library_-_Project_documentation.pdf]]

==Model Documentation==
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/openflow-action.html openflow-action]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/openflow-augments.html openflow-augments]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/openflow-extensible-match.html openflow-extensible-match]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/openflow-instruction.html openflow-instruction]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/openflow-protocol.html openflow-protocol]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/openflow-types.html openflow-types]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/ws/openflow-protocol-api/target/site/restconf/system-notifications.html system-notifications]

==Javadoc Documentation==
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/org.opendaylight.openflowjava$openflow-protocol-api/ws/target/apidocs/index.html Api-Javadoc]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/org.opendaylight.openflowjava$openflow-protocol-impl/ws/target/apidocs/index.html Impl-Javadoc]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/org.opendaylight.openflowjava$openflow-protocol-spi/ws/target/apidocs/index.html Spi-Javadoc]
[https://jenkins.opendaylight.org/openflowjava/job/openflowjava-merge/org.opendaylight.openflowjava$simple-client/ws/target/apidocs/index.html Simple-Client-Javadoc]

===Common principles===

* Serialization (message coding / decoding) logic is separated from implementation of transfer objects.

* All transfer objects returned from this library are immutable.

* Input/Output processing is done via processing pipeline, which could be modified in runtime based on session characteristics (e.g. support of multiple binary protocol versions). 
===Components===

====Public API====
Set of interfaces and builders for immutable data transfer
objects representing Openflow Protocol structures.
  
Transfer objects and service APIs are infered from several 
YANG models using code generator to reduce verbosity of 
definition and repeatibility of code. 

The following YANG modules are defined:
* openflow-types - defines common Openflow specific types
* openflow-instruction - defines base Openflow instructions
* openflow-action - defines base Openflow actions
* openflow-extensible-match - defines Openflow OXM match
* openflow-protocol - defines Openflow Protocol messages
 
This modules also reuse types from following YANG modules:
* ietf-inet-types - IP adresses, IP prefixes, IP-protocol related types
* ietf-yang-types - Mac Address, etc. 
 
The use of predefined types is to make APIs contracts more 
safe, better readable and documented (using MacAddress instead 
of byte array...) 

==== Pipeline Factory====

Creates channel processing pipeline based on configuration and 
support.

==== Frame Decoder ====

Parses input stream into message frames for further processing.

==== Message CoDec ====

Baseline message decoder is responsible for decoding messages and
structures in Java Data Transfer Objects defined in library API,
which are send / published to upstream handler.

Message coding part is responsible for serializing API Data Transfer 
Objects into byte message frames (byte buffers) which are then send to 
downstream handler.

====  Pipeline Facade ====

Provides a facade on top of pipeline, which hides netty.io specifics
from consumers (clients)  of library. Provides a set of methods
to register for incoming messages and to send messages to
particular channel / session.

==== SPI ====

Service provider interface to define
serializers and deserializers for additional
match fields, instructions, actions and
messages which could be added by third-party 
bundle.

=== Integration with Plugin ===
{| class="wikitable"
|-
| '''Plugin'''
| '''SwitchConnectorHandler'''
* onSwitchConnected(''ConnectionAdapter'') [4]
:: <code>connectionAdapter.setMessageListener(ofProtocolListener)</code> [5]
:: <code>connectionAdapter.setSystemListener(systemListener)</code> [5]
* accept(''InetAddress'')
:: //policy logic
----
'''OFProtocolListener'''
* onHelloMessage(message)
* ...
----
'''SystemListener'''
* onDisconnectEvent(event)
----
call particular rpc method on particular instance of ''ConnectionAdapter'' to send message to particular switch [6][7]
|-
| '''Library'''
| '''SwitchConnectionProvider'''
* config() [1]
* startup() [2]
* shutdown() [8]
* setSwitchConnectionHandler(''SwitchConnectionHandler'') [1]
----
'''ConnectionAdapter''' extends OFProtocolService
* disconnect()
* sendMessage() -- via RPC (OFProtocolService)
* isAlive()
* setOFProtocolListener(''OFProtocolListener'') -- place to send message notifications
call ''OFProtocolListener'' when a message arrives  [6][7]
|}


==== Connection workflow ====
# @Plugin: config, set ''SwitchConnectionHandler''
# @Plugin: startup()
# new switch connects to netty layer
# @Library: onSwitchConnected(new ''ConnectionAdapter''...)
# @Plugin: setMessageListener(); setSystemListener();
# @both: send/receive Hello  (handshake)
# @both: do some switch exercise
# @Plugin: shutdown

= Testing =
* [[Openflow Protocol Library:Testing]]

== Testing environment ==

* [[Openflow Protocol Library:OpenVirtualSwitch]]
