__TOC__

= Overview =
Build time tests are tests which run during the compilation phase of your project. Build time tests provide a way for a developer to quickly test (in isolation) the logic which belongs to a given project to verify it is behaving as desired.

Justification of build time tests and the recommended practices as outlined by the TSC can be found here: [[Developer Best Practices]].

= Introduction to JUnit =
JUnit is a framework for writing build time tests. See their home page ( http://junit.org/ ) for more information specific to JUnit. Below we will provide the basics of a JUnit tests and how you can use them, along with recommendations of how to write JUnits.

Additionally JUnit integrates nicely with the Eclipse and Idea frameworks to provide launching and debuging unit tests from within the IDE framework.

= Qualities of a Good Unit Test =

A good unit test will:

#Run quickly
#*No sleeps or thread blocking if you can avoid it
#Run against the public API's of a class (think interfaces!)
#Test a "single" unit of work
#*Unit tests generally test an isolated piece of functionality. Integration tests are used to test the interaction between two pieces of logic.
#*You can have multiple tests in a single test class, each testing a different piece of functionality... more on that later.
#Contain assertions which validate the functionality

To help get an idea if you tested all of your code you can use Code Coverage tools to review your code coverage. One such tools is www.eclemma.org for eclipse which provides a mechanism to visually report the code coverage of or more unit tests.

= Example Implementation =

Below we provide an example of how you can implement a JUnit test in your code.

== Adding JUnit to your Maven Project ==

To add the JUnit dependency to your maven project you simply add this dependency into the dependencies section of your pom file.

<code>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.8.1</version> 
      <scope>test</scope> <!-- you only want this dependency during tests, not production time -->
    </dependency>
</code>

''Note: You can exclude the scope and version tags assuming a parent project has defined the dependency in the dependency management section.''

== Creating your Test Class ==

In Progress
*Annotations

== Assertions ==

In Progress

== Multiple Threads ==

In Progress

== Mocking ==

In Progress
