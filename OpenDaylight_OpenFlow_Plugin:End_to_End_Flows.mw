= Instructions =
== Learn End to End for Inventory ==
* [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]

== Check inventory ==
* Run mininet with support for OF 1.3 as described in [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]
* Make sure you see the openflow:1 node come up as described in [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]

== Flow Strategy ==
Current way to flush a flow to switch looks like this:
# Create MD-SAL modeled flow and commit it into dataStore using two phase commit [[OpenDaylight_Controller:MD-SAL:FAQ|MD-SAL FAQ]]
# FRM gets notified and invokes corresponding rpc (addFlow) on particular service provider (if suitable provider for given node registered)
# The provider (plugin in this case) transforms MD-SAL modeled flow into OF-API modeled flow
# OF-API modeled flow is then flushed into OFLibrary
# OFLibrary encodes flow into particular version of wire protocol and sends it to particular switch
# Check on mininet side if flow is set

== Push your flow == 
* With PostMan:
** Set headers:
*** Content-Type: application/xml
*** Accept: application/xml
*** Authentication
** Use URL: <nowiki>http://<controller IP>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/0/flow/1</nowiki>
** PUT
** Use Body:
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow xmlns="urn:opendaylight:flow:inventory">
    <priority>2</priority>
    <flow-name>Foo</flow-name>
    <match>
        <ethernet-match>
            <ethernet-type>
                <type>2048</type>
            </ethernet-type>
        </ethernet-match>
        <ipv4-destination>10.0.10.2/24</ipv4-destination>
    </match>
    <id>1</id>
    <table_id>0</table_id>
    <instructions>
        <instruction>
            <order>0</order>
            <apply-actions>
                <action>
                   <order>0</order>
                   <dec-nw-ttl/>
                </action>
            </apply-actions>
        </instruction>
    </instructions>
</flow>
</pre>
'''<nowiki>*Note</nowiki>''': If you want to try a different flow id or a different table, make sure the URL and the body stay in sync.  For example, if you wanted to try: table 2 flow 20 you'd change the URL to:
<nowiki>http://<controller IP>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/20</nowiki>

but you would also need to update the <id>20</id> and <table_id>2</table_id> in the body of the XML.

Other caveat, we have a known bug with updates, so please only write to a given flow id and table id on a given node once at this time until we resolve it. Or you can use the DELETE method with the same URL in PostMan to delete the flow information on switch and controller cache.

== Check for your flow on the switch ==
* See your flow on your mininet:
<pre>
mininet@mininet-vm:~$ sudo ovs-ofctl -O OpenFlow13 dump-flows s1
OFPST_FLOW reply (OF1.3) (xid=0x2):
cookie=0x0, duration=7.325s, table=0, n_packets=0, n_bytes=0, idle_timeout=300, hard_timeout=600, send_flow_rem priority=2,ip,nw_dst=10.0.10.0/24 actions=dec_ttl
</pre>

If you want to see the above information from the mininet prompt - use "sh" instead of "sudo" i.e. use "sh ovs-ofctl -O OpenFlow13 dump-flows s1".

== Check for your flow in the controller config via RESTCONF ==
* See your configured flow in POSTMAN with
** URL <nowiki>http://<controller IP>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/0/</nowiki>
** GET
** You no longer need to set Accept header

== Look for your flow stats in the controller operational data via RESTCONF ==
* See your operational flow stats in POSTMAN with
** URL <nowiki>http://<controller IP>:8080/restconf/operational/opendaylight-inventory:nodes/node/openflow:1/table/0/</nowiki>
** GET

= Discovering and testing new Flow Types =

Currently, the openflowplugin has a test-provider that allows you to push various flows through the system from the OSGI command line.  Once those flows have been pushed through, you can see them as examples
and then use them to see in the config what a particular flow example looks like.

== Using addMDFlow ==

From the
<pre>
cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh
</pre>

Point your mininet at the controller as described above.

once you can see your node (probably openflow:1 if you've been following along) in the inventory, at the OSGI command line try running:
<pre>
addMDFlow openflow:1 f#
</pre>
Where # is a number between 1 and 80.  This will create one of 80 possible flows.  You can go confirm they were created on the switch.

Once you've done that, use 
* GET
* Accept: application/xml
* URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/

To see a full listing of the flows in table 2 (where they will be put).  If you want to see a particular flow, look at

* URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/#
Where # is 123 + the f# you used.  So for example, for f22, your url would be

* URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/145

Note: You may have to trim out some of the sections like <flags> that contain bitfields and binary types that are not correctly modeled.

Note: Before attempting to PUT a flow you have created via addMDFlow, please change its URL and body to, for example, use table 1 instead of table 2 or another Flow Id, so you don't collide.

Note: There are several test command providers and the one handling flows is '''OpenflowpluginTestCommandProvider'''. Methods, which can be use as '''commands in OSGI-console''' have prefix '_'.


= Example Flows =

Examples for XML for various flow matches, instructions & actions can be found  [[Editing OpenDaylight OpenFlow Plugin:End to End Flows:Example Flows|here]]
