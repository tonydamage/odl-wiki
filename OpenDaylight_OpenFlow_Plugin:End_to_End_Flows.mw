= Instructions =
== Learn End to End for Inventory ==
* [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]

== Build the  openflowplugin plugin distribution ==
<pre>cd openflowplugin
mvn clean install </pre>

== Run the openflow plugin distribution of controller ==
* Run the local openflowplugin distribution
<pre>cd distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</pre>
* Give it a few seconds to come up :)

== Check inventory ==
* Run mininet with support for OF 1.3 as described in [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]
* Make sure you see the openflow:1 node come up as described in [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]

== Push your flow == 
* With PostMan:
** Set 
*** Content-Type: application/yang.data+xml
*** Accept: application/xml
** Use URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/0/flow/1
** Use Body:
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow xmlns="urn:opendaylight:flow:inventory">
    <priority>2</priority>
    <flow-name>Foo</flow-name>
    <match>
        <ethernet-match>
            <ethernet-type>
                <type>2048</type>
            </ethernet-type>
        </ethernet-match>
        <ipv4-destination>10.0.10.2/24</ipv4-destination>
    </match>
    <id>1</id>
    <table_id>0</table_id>
    <instructions>
        <instruction>
            <order>0</order>
            <apply-actions>
                <action>
                   <order>0</order>
                   <dec-nw-ttl/>
                </action>
            </apply-actions>
        </instruction>
    </instructions>
</flow>
</pre>
** Note: If you want to try a different flow id or a different table, make sure the URL and the body stay in sync.  For example, if you wanted to try: table 2 flow 20 you'd change the URL to

http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/20

but you would also need to update the <id>20</id> and <table_id>2</table_id> the body to match.

Other caveat, we have a known bug with updates, so please only write to a given flow id and table id on a given node once at this time until we resolve it.

== Check for your flow on the switch ==
* See your flow on your mininet:
<pre>
mininet@mininet-vm:~$ sudo ovs-ofctl -O OpenFlow13 dump-flows s1
OFPST_FLOW reply (OF1.3) (xid=0x2):
 cookie=0x0, duration=7.325s, table=0, n_packets=0, n_bytes=0, idle_timeout=300, hard_timeout=600, send_flow_rem priority=2,ip,nw_dst=10.0.10.0/24 actions=dec_ttl
</pre>

== Check for your flow in the controller config via RESTCONF ==
* See your configured flow in POSTMAN with
** URL http://192.168.195.157:8080/restconfig/config/opendaylight-inventory:nodes/node/openflow:1/table/0/
** GET
** You should no longer need to set Accept

== Look for your flow stats in the controller operational data via RESTCONF ==
* See your operational flow stats in POSTMAN with
** URL http://192.168.195.157:8080/restconfig/config/opendaylight-inventory:nodes/node/openflow:1/table/0/
** GET

= Discovering and testing new Flow Types =

Currently, the openflowplugin has a test-provider that allows you to push various flows through the system from the OSGI command line.  Once those flows have been pushed through, you can see them as examples
and then use them to see in the config what a particular flow example looks like.

== Using mdAddFlow ==

From the
<pre>
cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh
</pre>

Point your mininet at the controller as described above.

once you can see your node (probably openflow:1 if you've been following along) in the inventory, at the OSGI command line try running:
<pre>
addMDFlow openflow:1 f#
</pre>
Where # is a number between 1 and 49.  This will create one of 49 possible flows.  You can go confirm they were created on the switch.

Once you've done that, use 
* GET
* Accept: application/xml
* URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/

To see a full listing of the flows in table 2 (where they will be put).  If you want to see a particular flow, look at

* URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/#
Where # is 123 + the f# you used.  So for example, for f22, your url would be

* URL: http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/145

Note: You may have to trim out some of the sections like <flags> that contain bitfields and binary types that are not correctly modeled.

Note: Before attempting to PUT a flow you have created via addMDFlow, please change its URL and body to use table 1 instead of table 2 so you don't collide.

= Testing Reports =

Please report on your attempts below.

== f21 - <span style="color:red">ACTION IS DROP, SHOULD BE FLOOD</span> ==

=== f21 URL ===

http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/1/flow/144

=== f21 Body ===

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow 
    xmlns="urn:opendaylight:flow:inventory">
    <strict>false</strict>
    <instructions>
        <instruction>
            <apply-actions>
                <action>
                    <flood-action/>
                </action>
            </apply-actions>
        </instruction>
    </instructions>
    <table_id>1</table_id>
    <id>144</id>
    <cookie_mask>10</cookie_mask>
    <out_port>10</out_port>
    <installHw>false</installHw>
    <out_group>2</out_group>
    <match>
        <ethernet-match>
            <ethernet-type>
                <type>2048</type>
            </ethernet-type>
        </ethernet-match>
        <ipv4-destination>10.0.0.1/24</ipv4-destination>
    </match>
    <hard-timeout>12</hard-timeout>
    <flags>FlowModFlags [_cHECKOVERLAP=false, _rESETCOUNTS=false, _nOPKTCOUNTS=false, _nOBYTCOUNTS=false, _sENDFLOWREM=false]</flags>
    <cookie>10</cookie>
    <idle-timeout>34</idle-timeout>
    <flow-name>FooXf21</flow-name>
    <priority>2</priority>
    <barrier>false</barrier>
</flow>
</pre>

=== f21 Results ===

When PUT via RESTCONF did not get error via RESTCONF

When PUT via RESTCONF did not get exception on OSGI console

When PUT via RESTCONF did see flow on switch:

<pre>
vagrant@vagrant-ubuntu-trusty-64:~$ sudo ovs-ofctl -O OpenFlow13 dump-flows s1
OFPST_FLOW reply (OF1.3) (xid=0x2):
 cookie=0xa, duration=3.434s, table=1, n_packets=0, n_bytes=0, idle_timeout=34, hard_timeout=12, send_flow_rem priority=2,ip,nw_dst=10.0.0.0/24 actions=drop
</pre>

Validated that flow on switch <span style="color:red">does not match</span> flow sent via RESTCONF.  Action is drop, should be flood.

When PUT via RESTCONF could GET via RESTCONF returned the following body:

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow 
    xmlns="urn:opendaylight:flow:inventory">
    <strict>false</strict>
    <instructions>
        <instruction>
            <apply-actions>
                <action>
                    <flood-action/>
                </action>
            </apply-actions>
        </instruction>
    </instructions>
    <table_id>1</table_id>
    <id>144</id>
    <cookie_mask>10</cookie_mask>
    <out_port>10</out_port>
    <installHw>false</installHw>
    <out_group>2</out_group>
    <match>
        <ethernet-match>
            <ethernet-type>
                <type>2048</type>
            </ethernet-type>
        </ethernet-match>
        <ipv4-destination>10.0.0.1/24</ipv4-destination>
    </match>
    <hard-timeout>12</hard-timeout>
    <flags>[FlowModFlags, [_cHECKOVERLAP=false,, _rESETCOUNTS=false,, _nOPKTCOUNTS=false,, _nOBYTCOUNTS=false,, _sENDFLOWREM=false]]</flags>
    <cookie>10</cookie>
    <idle-timeout>34</idle-timeout>
    <flow-name>FooXf21</flow-name>
    <priority>2</priority>
    <barrier>false</barrier>
</flow>
</pre>

== f22 <span style="color:red">MISSING IPv4 DST MATCH</span> ==

=== f22 URL ===

http://192.168.195.157:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/table/2/flow/145

=== f22 Body ===

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow 
    xmlns="urn:opendaylight:flow:inventory">
    <strict>false</strict>
    <instructions>
        <instruction>
            <apply-actions>
                <action>
                    <flood-all-action/>
                </action>
            </apply-actions>
        </instruction>
    </instructions>
    <table_id>2</table_id>
    <id>145</id>
    <cookie_mask>10</cookie_mask>
    <out_port>10</out_port>
    <installHw>false</installHw>
    <out_group>2</out_group>
    <match>
        <ethernet-match>
            <ethernet-type>
                <type>2048</type>
            </ethernet-type>
        </ethernet-match>
        <ipv4-destination>10.0.0.1/24</ipv4-destination>
    </match>
    <hard-timeout>12</hard-timeout>
    <cookie>10</cookie>
    <idle-timeout>34</idle-timeout>
    <flow-name>FooXf22</flow-name>
    <priority>2</priority>
    <barrier>false</barrier>
</flow>
</pre>

=== f22 Results ===

When PUT via RESTCONF did not get error via RESTCONF

When PUT via RESTCONF did not get exception on OSGI console

When PUT via RESTCONF did see flow on switch:

<pre>
vagrant@vagrant-ubuntu-trusty-64:~$ sudo ovs-ofctl -O OpenFlow13 dump-flows s1
OFPST_FLOW reply (OF1.3) (xid=0x2):
 cookie=0xa, duration=5.25s, table=2, n_packets=0, n_bytes=0, idle_timeout=34, hard_timeout=12, send_flow_rem priority=2,ip actions=drop
</pre>

Validated that flow on switch <span style="color:red">does not match</span> flow sent via RESTCONF.  Missing IPv4 Destination Match

Had to trim out bit field or binary:

<pre>
    <flags>FlowModFlags [_cHECKOVERLAP=false, _rESETCOUNTS=false, _nOPKTCOUNTS=false, _nOBYTCOUNTS=false, _sENDFLOWREM=false]</flags>
</pre>

When PUT via RESTCONF could  GET via RESTCONF returned the following body:

<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<flow 
    xmlns="urn:opendaylight:flow:inventory">
    <strict>false</strict>
    <instructions>
        <instruction>
            <apply-actions>
                <action>
                    <flood-all-action/>
                </action>
            </apply-actions>
        </instruction>
    </instructions>
    <table_id>2</table_id>
    <id>145</id>
    <cookie_mask>10</cookie_mask>
    <out_port>10</out_port>
    <installHw>false</installHw>
    <out_group>2</out_group>
    <match>
        <ethernet-match>
            <ethernet-type>
                <type>2048</type>
            </ethernet-type>
        </ethernet-match>
        <ipv4-destination>10.0.0.1/24</ipv4-destination>
    </match>
    <hard-timeout>12</hard-timeout>
    <cookie>10</cookie>
    <idle-timeout>34</idle-timeout>
    <flow-name>FooXf22</flow-name>
    <priority>2</priority>
    <barrier>false</barrier>
</flow>
</pre>
