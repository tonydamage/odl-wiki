This page contains design proposal for Data Store Tracer component. 

Data Store Tracer is responsible for tracing and persisting the changes in the datastore. The tracer should also support "replay" function to update the data tree according to persisted changes from previous runs or crafted by user for debugging purposes. 

== Motivation ==
The primary goal of data store tracer is to bring more visibility into the md-sal/data-store by providing information about the changes in the data tree using human readable form (e.g. json, xml).

== Tracer Components ==
* Persister - Component responsible for storing data change events on e.g. filesystem in human readable form.
* PersisterController - Aggregator component for multiple persisters with same configuration.
* Retriever - Component responsible for replaying the data change events in the datastore from human readable form.

== Class diagram ==

Class diagram for data store tracer according to https://git.opendaylight.org/gerrit/#/c/7986/3 (omitting md-sal dependencies e.g. SchemaService):

[[File:Data_Store_Tracer_(2).png]]

== Persister ==
Every change in the data tree has to be recorded by the persisters. The Persisters are responsible for transforming the data nodes from datastore into human readable form and storing the data preferably as an ordered collection of diffs (only the changed data). Interface definition for persisters is present in: DataStorePersister. This interface extends:

* DomDataChangeListener - to receive the data change events
* SchemaContextListener - to receive the global schema context, which will be used to transform between data nodes from datastore and human readable form

Note: The persisters implement 2 listener interfaces and receive 2 sets of information: schema and data. These data could be inconsistent in general, but the implementation of md-sal/datastore uses the same schema when inserting the data into datastore. We are therefore guranteed that the schema context will always contain all the modules required to perform the translation from data nodes into e.g. 

=== Xml persister ===
The xml persister stores the changes in form of xml files. Every change/update is stored in a dedicated file. This persister should reuse utility code from XmlDocumentUtils located in yangtools project to perform the. With schema context present, the transformation is pretty straightforward using XmlDocumentUtils. 

=== Json persister===
The Json persister is not much different to xml persister. It should also reuse existing code to perform the transformation. This code is located in modules implementing restconf.

Task: This code is not publicly accessible, and it is necessary to extract the code before it can be used by the json persister.

== Persister Controller ==
The controller class is responsible for aggregating multiple Persisters.
* Persisters receive notifications about current changes and are responsible for persistance
** Controller should implement DomDataChangeListener interface, register itself to the datastore and delegate change notifications to all the persisters. This way only one registration to the datastore could be used for multiple persisters with the same scope.
* Persisters require schema context in order to transform the data
** Controller should be provided SchemaService instance from which, the global schema context will be retrieved and injected into all its persisters.

== Retriever ==
Replay function is designed only for debugging purposes with main use case: applying data changes during isolated controller runs during debug sessions. Because of this, the design of the retrievers will be simple with a few limitations/issues ignored:

These limitations are:
* Inconsistencies between schema context and data to be restored - This would be a major issue in case the retrievers are used in production environment. It would require for the persisters to store capabilities alongside the data in order to check the schema in retrievers while doing replay (Same mechanism as in config-persister).
* Conflicts when changing the data - The data could get changed by different sources while performing the replay function. The persister would have to freeze the whole data store in order to avoid such conflicts.

These limitations make the persisters and replay function reliably usable only in controlled runs.

The retrievers are responsible for loading all the data changes from human readable form using SchemaContext. In addition to schema context, they require Datastore dependency in form of DOMDataBroker in order to submit the changes to the datastore (using WriteTransaction) during replay phase.

=== Xml retriever ===
The xml retriever is the opposite of the xml persister and should use the same utility code for transformation.

=== Json retriever ===
The json retriever is the opposite of the json persister and should use the same utility code for transformation.

== Persistance format ==
The persisters will receive data change events in form of AsyncDataChangeEvent<InstanceIdentifier, NormalizedNode<?, ?>>. This event contains following data:
* Map<InstanceIdentifier, NormalizedNode> of original data
* NormalizedNode containing Original data subtree
* Set<InstanceIdentifier> of removed paths
* Map<InstanceIdentifier, NormalizedNode> of updated data
* NormalizedNode containing Updated data subtree
* Map<InstanceIdentifier, NormalizedNode> of created data

There are 2 options for persisting data:
# The whole updated subtrees
# Diffs

We suggest to go with the 2<sup>nd</sup> options for the initial version due to its advantages.

=== Whole subtree ===
With this option, the persisters would persist the changes in form of snapshots of the entire data tree. The entire subtree in form of NormalizedNode would be transformed into human readable format e.g. xml as a whole and stored in the file. 

The replay function would be pretty straightforward to implement and only replace the whole datastore with last snapshot. However if trying to debug and providing hand crafted snapshot, users would have to craft the whole snapshot instead of a diff (when considering the same format for persist and replay).

Note: Currently the data change listeners do not receive the whole subtree if they listen on the entire datastore and this prevents us from going with this option.

Pros:
* Easy transformation of the data tree
* Easy to implement

Cons:
* Lots of data to store
* Hard to hand craft persisted data change for the replay function
* UPDATED SUBTREE NOT PRESENT IN DATA CHANGE EVENT WHEN LISTENING ON ROOT

=== Diffs ===
With this option, the persisters would persist the changes in form of a structure containing collections of removed, updated and created data (or possibly just 2 collections: removed, changed). This would require custom structure/format in order to persist the data since we need to persist the InstanceIdentifiers for the removed data. Also the diffs come in the form of maps and we would probably have to transform these maps into the human readable tree form e.g. xml. 

The replay function would have to process all the persisted changes and replay them in the datastore by removing and updating the data.

Pros:
* Fewer data to store
* Easy to hand craft a diff to change the data in data store using replay function

Cons:
* Different format of persisted data when compared to data in datastore
* Custom transformation and processing of data change event required

==== Persisted file format ====
As we mentioned earlier, the diffs in data change event are present in form of:
# map containing created data
# map containing updated data
# set containing Instance identifiers for removed data

The following cases showcase different changes to datastore and how the persisted file should look like:

===== Create =====
Data added to datastore in xml form:
<source>
<nodes xmlns="urn:opendaylight:inventory">
  <node>
    <id>controller-config</id>
  </node>
</nodes>
</source>

Data in notification:
<source>
(urn:opendaylight:inventory?revision=2013-08-19)nodes
ImmutableContainerNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)nodes, value=[ImmutableMapNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node, value=[ImmutableMapEntryNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}], value=[ImmutableLeafNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)id, value=controller-config, attributes={}}], attributes={}}]}], attributes={}}, 

(urn:opendaylight:inventory?revision=2013-08-19)nodes/(urn:opendaylight:inventory?revision=2013-08-19)node
ImmutableMapNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node, value=[ImmutableMapEntryNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}], value=[ImmutableLeafNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)id, value=controller-config, attributes={}}], attributes={}}]}, 

(urn:opendaylight:inventory?revision=2013-08-19)nodes/(urn:opendaylight:inventory?revision=2013-08-19)node/(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}]/(urn:opendaylight:inventory?revision=2013-08-19)id
ImmutableLeafNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)id, value=controller-config, attributes={}}, 

(urn:opendaylight:inventory?revision=2013-08-19)nodes/(urn:opendaylight:inventory?revision=2013-08-19)node/(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}]=ImmutableMapEntryNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}], value=[ImmutableLeafNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)id, value=controller-config, attributes={}}], attributes={}}
</source>

The persisted file for this data change would look like this (for xml):
<source>
<changed>
  <nodes xmlns="urn:opendaylight:inventory">
    <node>
      <id>controller-config</id>
    </node>
  </nodes>
</changed>
<deleted>
  <!-- List of instance identifiers from removed -->
</deleted>
</source>

Note: The data change event contains created data entry also for nested elements. The persisters could ignore these nested elements and persist only their root element.<br />
Note: Every modified subtree would be present under the '''changed''' element.

===== Update =====
Updating node controller-config in datastore by adding node-connector to it:
<source>
<node>
  <id>controller-config</id>
  <node-connector>
    <id>nc</id>
  </node-connector>
</node>
</source>

The data change event contains following data in updated data map:
<source>
Key:
(urn:opendaylight:inventory?revision=2013-08-19)nodes/(urn:opendaylight:inventory?revision=2013-08-19)node/(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}]

Value:
ImmutableMapEntryNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}], value=[ImmutableLeafNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)id, value=controller-config, attributes={}}, ImmutableMapNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node-connector, value=[ImmutableMapEntryNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)node-connector[{(urn:opendaylight:inventory?revision=2013-08-19)id=nc}], value=[ImmutableLeafNode{nodeIdentifier=(urn:opendaylight:inventory?revision=2013-08-19)id, value=nc, attributes={}}], attributes={}}]}], attributes={}}
</source>

The persisted file for this data change would look like this (for xml):
<source>
<changed>
  <nodes xmlns="urn:opendaylight:inventory">
    <node>
      <id>controller-config</id>
      <node-connector>
        <id>nc</id>
      </node-connector>
    </node>
  </nodes>
</changed>
<deleted>
  <!-- List of instance identifiers from removed -->
</deleted>
</source>

Note: The format would not make differences to created and updated data.
Note: The data change event contains updated node in updated data map but also in created data map. Persisters have to compare these 2 maps and extract requested data to persist.

===== Delete =====
Now assume that the node element gets deleted in the datastore. The notification would contain Set of removed paths:
<source>
(urn:opendaylight:inventory?revision=2013-08-19)nodes/(urn:opendaylight:inventory?revision=2013-08-19)node/(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}]/(urn:opendaylight:inventory?revision=2013-08-19)id, 

(urn:opendaylight:inventory?revision=2013-08-19)nodes/(urn:opendaylight:inventory?revision=2013-08-19)node/(urn:opendaylight:inventory?revision=2013-08-19)node[{(urn:opendaylight:inventory?revision=2013-08-19)id=controller-config}]
</source>

The persisted file for this data change would look like this (for xml):
<source>
<changed>
</changed>
<deleted>
  <nodes xmlns="urn:opendaylight:inventory">
    <node>
      <id>controller-config</id>
    </node>
  </nodes> 
</deleted>
</source>

Note: The data change event contains removed path also for nested elements. The persisters could ignore these nested elements and persist only their root element.

==== Persisted file format (replay) ====
From the retrievers' point of view, the persisted format for data would be interpreted as:
# Every subtree under the '''changed''' tag would be replaced in the datastore
# Every subtree under '''deleted''' would be reconstructed into a form of InstanceIdentifier and submitted for delete in the datastore

== Dependencies from MD-SAL ==
The tracer requires following dependencies from md-sal:
* Datastore
** in form of DOMDataBroker in order to register itself as data change listener. (Controller)
** in form of DOMDataBroker in order to replay data changes. (Retriever)
* Schema context - current, global schema context retrieved from SchemaService. (Controller, Retriever)

== Config subsystem binding ==
The dependencies on DOMDataBroker and SchemaService will be retrieved using config-subsystem.

Component diagram for config subsystem binding:

[[File:Tracer config (1).png]]

The replay function should be also accessible from config subsystem and netconf in order to easily trigger it during debugging sessions.
