= MD-SAL Code-paths =

===  Client-MD-SAL ===

{| class="wikitable sortable"
|-
! ID !! Scenario !! Trigger Event !! Trigger Payload type !! Received Event !! Received Payload Type !! Comment

|-
|colspan="7"| '''RPC Scenarios'''

|-
|rowspan="2"| RPC-1
|rowspan="2"| RPC implementation received input, client received Error from MD-SAL in correct payload format.
|rowspan="2"| RPC Input
| DOM 
|rowspan="2"| Error
| DOM
| Comment
|-
| Binding 
| Binding
| Comment

|-
|colspan="7"| '''Data Scenarios'''

|-
|rowspan="2"| DATA-1
|rowspan="2"| Consumer creates transaction, invokes  Commit, consumer receives TransactionStatus#COMMITED
|rowspan="2"| WriteTransaction#commit()
| DOM 
|rowspan="2"| TransactionStatus#COMMITED
| DOM
| Comment
|-
|  Binding
| Binding
| Tested in sal-binding-dom-it


|-
|rowspan="2"| DATA-2
|rowspan="2"| Consumer creates transcaction, invokes  Commit, consumer receives OptimisticLockFailedException
|rowspan="2"| WriteTransaction#commit()
| DOM 
|rowspan="2"| OptimisticLockFailedException
| DOM
| Comment
|-
| Binding
| Binding
| Comment

|-
|rowspan="2"| DATA-3
|rowspan="2"| Consumer creates transcaction, invokes  Commit, consumer receives DataVerificationFailedException
|rowspan="2"| WriteTransaction#commit()
| DOM 
|rowspan="2"| DataVerificationFailedException
| DOM
| Comment
|-
| Binding
| Binding
| Comment

|}

=== Component-Component ===
{| class="wikitable sortable"
|-
! ID !! Scenario !! Trigger Event !! Trigger Payload type !! Received Event !! Received Payload Type !! Comment

|-
|colspan="7"| '''RPC Scenarios'''

|-
|rowspan="4"| RPC-2
|rowspan="4"| User invokes RPC, implementation receives RPC input
|rowspan="4"| RPC Input
| DOM 
|rowspan="4"| RPC Input
| DOM
| Comment
|-
|  DOM
| Binding
| Comment
|-
| Binding 
| DOM
| Comment
|-
| Binding 
| Binding
| Comment


|-
|rowspan="4"| RPC-3
|rowspan="4"| RPC implementation received input, client received RPC Output in correct payload format.
|rowspan="4"| RPC Input
| DOM 
|rowspan="4"| RPC Output
| DOM
| Comment
|-
|  DOM
| Binding
| Comment
|-
| Binding 
| DOM
| Comment
|-
| Binding 
| Binding
| Comment

|-
|rowspan="4"| RPC-4
|rowspan="4"| RPC implementation received input, client received Error in correct payload format.
|rowspan="4"| RPC Input
| DOM 
|rowspan="4"| Error
| DOM
| Comment
|-
|  DOM
| Binding
| Comment
|-
| Binding 
| DOM
| Comment
|-
| Binding 
| Binding
| Comment


|-

|colspan="7"| '''Notification Scenarios'''

|-
|rowspan="4"| NOT-1
|rowspan="4"| Implementation publishes Notification , implementation receives Notification
|rowspan="4"| Notification
| DOM 
|rowspan="4"| Notification
| DOM
| Comment
|-
|  DOM
| Binding
| Comment
|-
| Binding 
| DOM
| Comment
|-
| Binding 
| Binding
| Comment

|-
|colspan="7"| '''Data Scenarios'''

|-
|rowspan="4"| DATA-3
|rowspan="4"| Consumer creates transaction, invokes  Commit, Data Change Listeners received Data Change Event
|rowspan="4"| WriteTransaction#commit()
| DOM 
|rowspan="4"| Data Change Event
| DOM
| Comment
|-
|  DOM
| Binding
| One of most complicated paths if data were not written by Binding-Aware component. Mostly problematic are augments and cases in uses statements.
|-
| Binding 
| DOM
| Comment
|-
| Binding 
| Binding
| Tested in sal-binding-dom-it.

|}

== Testing Tools ==

Currently for Testing we are using several approaches which are:


=== MD-SAL Binding/DOM Based suite ===

This test tools are used for integration testing between DOM and Binding Data Format, tools are exported
as '''test-jar''' for '''sal-binding-broker'''.

* MD-SAL Test deployer - mostly for integration testing and legacy API support, where fully working MD-SAL is deployed
* Set of Abstract*Test used for unit testing of MD-SAL, may be used for unit testing of client code
:* AbstractSchemaAwareTest - test which loads yang schema from classpath and instantiates runtime codecs
:* AbstractDataBrokerTest - test which instantiates binding broker, dom broker and datastore
:* AbstractChangeListenerTest - variation of DataBroker test which has possibility for simple data change event testing


=== Restconf Testsuite ===

Current Restconf testing is done using JerseyTest, Mockito.

Jersey tests could be combined with Abstract*Test from MD-SAL to provide Java-based end-to-end integration and regression
testing between MD-SAL Binding and DOM formats to Restconf XML and JSON format.
