__TOC__ 

== Getting Started Overall ==

# Jump on IRC ([http://webchat.freenode.net/ webchat])
## #opendaylight
## #opendaylight-meetings
## #opendaylight-openflowplugin
## #opendaylight-ovsdb
## #opendaylight-dlux
## #opendaylight-lispflowmapping
# Sign up for [https://lists.opendaylight.org/mailman/listinfo mailing lists] (recommend at least [https://lists.opendaylight.org/mailman/listinfo/discuss discuss] ). 
# [[GettingStarted:Pulling,_Hacking,_and_Pushing_All_the_Code_from_the_CLI|Pulling Hacking and Pushing All the Code from the CLI]]
# [[GettingStarted:PushAndFix | Push + fix scenario]]

=== Tasks that need work ===

[[GettingStarted:Tasks that Need Work|Tasks that Need Work]]

=== Helpful Tips and Tricks ===

==== OSGI ====
* [[GettingStarted:Executing Methods from the OSGI Console|Executing Methods from the OSGI Console]] - This is an awesome trick to allow you to execute methods in your bundle directly by typing in the OSGI console... very helpful during development :)
* [http://isurues.wordpress.com/2009/01/01/useful-equinox-osgi-commands/ Useful Equinox OSGI Commands] - a very useful list of commonly used OSGI commands

==== Maven Archetypes ====
Maven Archetypes are sort of like 'templates' for maven projects.  Currently for OpenDaylight we have the following archetypes:

* [[Maven Archetypes:odl-model-project|odl-model-project]] - A maven archetype to create a yang model project that will generate java code from .yang files

== Getting Started by Project ==

=== Controller ===

Sign up for [https://lists.opendaylight.org/mailman/listinfo/controller-dev controller-dev] mailing list.

* [[OpenDaylight_Controller:Pulling,_Hacking,_and_Pushing_the_Code_from_the_CLI| Pulling Hacking and Pushing Code from the CLI]]

* [[OpenDaylight_Controller:Building_from_CLI| Building from the CLI]]

* [[OpenDaylight_Controller:Pulling,_Hacking,_and_Pushing_the_Code_from_Eclipse| Pulling Hacking and Pushing Code from Eclipse]]

=== VTN ===

Sign up for [https://lists.opendaylight.org/mailman/listinfo/vtn-dev vtn-dev] mailing list.

* [[OpenDaylight_Virtual_Tenant_Network_(VTN):Installation|Installation Guides]]

* [[OpenDaylight_Virtual_Tenant_Network_(VTN):Implementation|Implementation]]

=== OVSDB ===

Jump on the IRC Channel #opendaylight-ovsdb on irc.freenode.net

* [[OVSDB:Installation_Guide|Installation Guide]]

* [[OVSDB:User_Guide|User Guide]]

* [[OVSDB:Developer_Guide|Developer Guide]]

=== SNMP4SDN ===

Sign up for [https://lists.opendaylight.org/mailman/listinfo/snmp4sdn-dev snmp4sdn-dev] mailing list.

* [[SNMP4SDN:Installation_Guide|Installation Guide]]

* [[SNMP4SDN:User_Guide|User Guide]]

* [[SNMP4SDN:Developer_Guide|Developer Guide]]

== Troubleshooting ==

It may also be useful to look at the [[OpenDaylight_Controller:Installation#Troubleshooting|controller installation troubleshooting page]].

=== Build Issues ===

There are some common recurring issues in building OpenDaylight which largely relate to the build environment and the occasional maven failing to fetching a given file.

Also, in general, it's very difficult to debug an error if you only include the one line of maven output which says it failed. It helps a lot to run maven with the <tt>-e</tt> flag and then try to find the lines of code where the actual error occurs.

==== Java Version ====

OpenDaylight assumes that you are building with Java 1.7. Make sure the output of <tt>java -version</tt> matches that. Something like this:

  $ java -version
  java version "1.7.0_17"
  Java(TM) SE Runtime Environment (build 1.7.0_17-b02)
  Java HotSpot(TM) 64-Bit Server VM (build 23.7-b01, mixed mode)

==== Maven Version ====

OpenDaylight assumes the use of Maven 3. Make sure the output of <tt>mvn -v</tt> matches that. Something like this:

  $ mvn -v
  Apache Maven 3.0.3 (r1075438; 2011-02-28 11:31:09-0600)
  Maven home: /usr/share/maven
  Java version: 1.7.0_17, vendor: Oracle Corporation
  Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_17.jdk/Contents/Home/jre
  Default locale: en_US, platform encoding: UTF-8
  OS name: "mac os x", version: "10.8.5", arch: "x86_64", family: "mac"

==== Errors fetching a pom or jar file ====

We're working on this, but for whatever reason, fetching artifacts and pom files from nexus seems to occasionally run into issues where it will either fail to download a necessary file, give you a version with zero size or otherwise hiccup.

Often merely running the build again will fix the issue.

Other times, merely deleting the ~/.m2/ directories contents and then rebuilding will fix the problem.

In rare cases, you may have to resort to actually finding the file that isn't being copied and manually copying it down as described in this [https://lists.opendaylight.org/pipermail/controller-dev/2013-October/001496.html mailing list post].

==== Out of memory error / PermGen space ====

If you run into an out of memory error while building either just a normal out of memory error or one complaining about PermGen space, the easiest way to fix this is to adjust your maven options as explained here.

Increase the amount of memory by changing the "MAVEN_OPTS" ENV variable.
An example for a Bash shell is as follows:

  export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=512m"
  syntax for setting varies on the OS used by the build machine. */

You can verify the variable is set with the following in a Bash shell.
  $ export | grep MAVEN_OPTS
  declare -x MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=512m"

An example on a Linux based machine or a Mac you simply put "export" before
the variable. e.g. export MAVEN_OPTS="-Xmx1024m -XX:MaxPermSize=512m"
(parentheses around the value after the equals sign). That ENV variable is not 
persistent unless you put it into a shell startup script. In Linux for example 
the ~/.bashrc file and Mac the ~/.bash_profile file.

==== Skipping Tests ====

While the various tests run during build are huge at helping to find bugs and they have to pass for a patch to be accepted, sometimes they get in the way of finding the root cause of a build error. You can disable them by adding <tt>-DskipTests</tt> to the end of your build command. So something like this:

  mvn clean install -DskipTests
