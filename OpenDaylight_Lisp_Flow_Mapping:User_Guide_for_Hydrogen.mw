==LISP FLow Mapping Project User Guide==

===Overview and Architecture===
==== LISP Overview ====
Locator ID Separation Protocol ([http://tools.ietf.org/search/rfc6830 LISP]) is a technology that provides a flexible map-and-encap framework that can be used for overlay network applications, such as data center network virtualization, and Network Function Virtualization (NFV). LISP introduces two name spaces: Endpoint Identifiers (EIDs), and Routing Locators (RLOCs). In a virtualization environment, EIDs can be viewed as virtual address space and RLOCs can be viewed as physical network address space.
The LISP framework decouples network control plane from the forwarding plane by providing: (1) a data plane that specifies how the virtualized network addresses are encapsulated in addresses from the underlying physical network, and (2) a control plane that stores the mapping of the virtual-to-physical address spaces and the associated forwarding policies, and serves this information to the data plane on demand. Network programmability is achieved by programming forwarding policies such as transparent mobility, service chaining, and traffic engineering in the mapping system, where the data plane elements can fetch these policies on demand as new flows arrive. In this presentation we explain how the LISP Flow Mapping project in ODL can be used to enable advanced SDN and NFV use cases.

LISP data plane Tunnel Routers are available at [http://lispmob.org LISPmob.org] in the open source community on the following platforms:
* Linux
* Android
* OpenWRT

For more detail and support for LISP data plane software please visit [http://lispmob.org LISPmob.org].

==== Architecture Overview ====
The Lisp Flow Mapping service provides [http://tools.ietf.org/search/rfc6830 LISP] Mapping System services. This includes LISP Map-Server and LISP Map-Resolver services, to store and serve the ''mapping data'' to data plane nodes as well as to OpenDaylight applications. Mapping data can include mapping of virtual addresses to physical network address where the virtual nodes are reachable/hosted at. Mapping data can also include a variety of routing policies including traffic engineering and load balancing. To leverage this service OpenDaylight applications and services can use the northbound REST API to define the mappings and policies in the LISP Mapping Service. Data plane devices capable of LISP control protocol can leverage this service through a southbound LISP plugin via the LISP control protocol (Map-Register, Map-Request, Map-Reply messages).

The following figure depicts the described components.

[[File:LISP-ODL-02.jpg|600px]]


=== Installation Guide ===
For installation from the Service Provider edition please follow instructions at:
* [[Release/Hydrogen/Service Provider/Installation Guide|Service Provider Edition Installation Guide]]
To install Lisp Flow Mapping project directly form the git repository please see below:
* [[OpenDaylight_Lisp_Flow_Mapping:Hacking_Code_From_CLI|Hacking the Code From CLI]]

===Tutorial / How-To===
This section provides instructions to set up a LISP network of two nodes using LISPmob as data plane LISP nodes and LISP Flow Mapping project in ODL as the LISP programmable mapping system.

* Step One: 3 Linux VMs are required for this scenario. VM_1 is used to install ODL Service Provider edition. Please follow the [[Release/Hydrogen/Service Provider/Installation Guide|Service Provider Edition Installation Guide]] to install and run ODL SP edition. We refer to VM_1 as VM_ODL. In this example VM_ODL has 10.33.12.33 as its IP address.

* Step Two: VM_2 and VM_3 are used as data plane LISP nodes. While LISPmob is used as the data plane LISP nodes in this scenario, the LISP data plane nodes can be any LISP-enabled HW or SW router (commercial/open source). Install LISPmob on each of VM_2 and VM_3 following the LISPmob Installation Instructions [http://lispmob.org/documentation#installation HERE].

* Step Three: Configure the LISPmob on VM_1 and VM_2 lispd.conf configuration files. Set the EID in each lispd.conf file from the IP address space selected for your virtual/LISP network. In this example VM_2 EID is set to 1.1.1.1/32 , and VM_3 EID is set to 1.1.1.2/32 . Change the priority_v4 parameter for each of the lispd.conf files to a number larger than 10. The RLOC in each lispd.conf is the IP address of the corresponding VM. In this example VM_2 RLOC is 10.33.12.37 and VM_3 RLOC is 10.33.12.44. Set the Map-Server and Map-Resolver addresses to the IP address of the VM_ODL. Modify the "key" parameter in each lispd.conf file to a key/password of your choice. In this example asdf1 and asdf2 respectively.  

* Step Four: Define the key and EID prefix associations in the ODL using the northbound API:
** Create a JSON file per each key. Here is one example for VM_2 with EID 1.1.1.1/32:
<pre>
key1.json
 
{ 
"key" : "asdf1", 
"maskLength" : 32, 
"address" : 
  { 
  "ipAddress" : "1.1.1.1", 
  "afi" : 1
  }
}
</pre>

** Add the key in ODL:
{|class = "wikitable"
|-
|curl --user "admin":"admin" -H "Content-type: application/json" -X PUT http://10.33.12.33:8080/lispflowmapping/nb/v2/default/key --data @key1.json
|}
** You can verify that the key is added properly by requesting the following URL:
<pre>
http://10.33.12.33:8080/lispflowmapping/nb/v2/default/key/0/1/1.1.1.1/32
</pre>
** Similarly create a key2.json and add that to ODL as well.
* Step Five: Run the lisp daemon on VM_2 and VM_3: 
<pre>
lispd -f /root/lispd.conf
</pre>
* Step Six: Now the LISP network is up. To verify, log into VM_2 and ping the EID of VM_3 from VM_2:
<pre>
ping 1.1.1.2
</pre>

* You can use these basic steps to build more complex LISP networks. For instance, you can set up a third LISPmob node VM_4 for instance with IP address/RLOC 10.33.12.47, with the same EID as VM_3 making 1.1.1.2/32 a multihomed EID. All other steps are same as for VM_2 and VM_3 above. You can now adjust the weight and priority of the two RLOCs for this EID via the ODL northbound API to divert the ping traffic from VM_3 to VM_4. To do this create a JSON file similar to the following:
<pre>
mapping.json

{ 
"key" : "asdf2", 
"mapregister" : 
  { 
  "proxyMapReply" : true, 
  "eidToLocatorRecords" : 
    [ 
      { 
      "authoritative" : true, 
      "prefixGeneric" : 
        { 
        "ipAddress" : "1.1.1.2", 
        "afi" : 1
        },
      "mapVersion" : 0, 
      "maskLength" : 32, 
      "action" : "NoAction", 
      "locators" : 
        [ 
          { 
          "locatorGeneric" : 
            { 
            "ipAddress" : "10.33.12.44", 
            "afi" : 1
            }, 
          "priority" : 10, 
          "weight" : 50, 
          "multicastPriority" : 1, 
          "routed" : true, 
          "multicastWeight" : 50, 
          "rlocProbed" : false, 
          "localLocator" : false 
          } ,
          {
          "locatorGeneric" :
            {
            "ipAddress" : "10.33.12.47",
            "afi" : 1
            },
          "priority" : 5,
          "weight" : 50,
          "multicastPriority" : 1,
          "routed" : true,
          "multicastWeight" : 50,
          "rlocProbed" : false,
          "localLocator" : false
          }
        ], 
      "recordTtl" : 5 
      } 
    ], 
  "keyId" : 0 
  } 
}
</pre>

Here the priority of the second RLOC (10.33.12.47) is set lower than 10 originally set in previous steps VM_3 (Note "priority" : 5 for 10.33.12.47). This policy is saying this RLOC is preferred to 10.33.12.44 for reaching EID 1.1.1.2/32. Note that lower priority has higher preference in LISP. You can add this policy to ODL by executing:
{|class = "wikitable"
|-
|curl --user "admin":"admin" -H "Content-type: application/json" -X PUT http://10.33.12.33:8080/lispflowmapping/nb/v2/default/mapping --data @mapping.json
|}

If you leave the ping on, and monitor the traffic using wireshark you can see that the ping traffic will be diverted from VM_3 to VM_4. Currently this may take some time as this version of the LISP Flow Mapping project does not support proactive SMR, meaning that it will wait for the LISPmob nodes to query the new policy on their periodic cycle. The proactive push of policy to the data plane nodes is scheduled to be supported in the next version of LISP Flow Mapping, to allow for immediate distribution and enforcement of policies defined via ODL northbound API.

=== Programmatic Interfaces ===
The LISP Flow Mapping service Java and REST APIs are documented below:

[[OpenDaylight_Lisp_Flow_Mapping:API|LISP Flow Mapping APIs]]

===Help===
For support please contact the lispflowmapping project at: 
* Lisp Flow Mapping users mailing list:
** lispflowmapping-users@lists.opendaylight.org
* Lisp Flow Mapping dev mailing list:
** lispflowmapping-dev@lists.opendaylight.org
