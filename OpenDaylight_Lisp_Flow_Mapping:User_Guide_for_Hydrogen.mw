==LISP FLow Mapping Project User Guide==

===Overview and Architecture===
==== LISP Overview ====
Locator ID Separation Protocol ([http://tools.ietf.org/search/rfc6830 LISP]) is a technology that provides a flexible map-and-encap framework that can be used for overlay network applications, such as data center network virtualization, and Network Function Virtualization (NFV). LISP introduces two name spaces: Endpoint Identifiers (EIDs), and Routing Locators (RLOCs). In a virtualization environment, EIDs can be viewed as virtual address space and RLOCs can be viewed as physical network address space.
The LISP framework decouples network control plane from the forwarding plane by providing: (1) a data plane that specifies how the virtualized network addresses are encapsulated in addresses from the underlying physical network, and (2) a control plane that stores the mapping of the virtual-to-physical address spaces and the associated forwarding policies, and serves this information to the data plane on demand. Network programmability is achieved by programming forwarding policies such as transparent mobility, service chaining, and traffic engineering in the mapping system, where the data plane elements can fetch these policies on demand as new flows arrive. In this presentation we explain how the LISP Flow Mapping project in ODL can be used to enable advanced SDN and NFV use cases.

LISP data plane Tunnel Routers are available at [http://lispmob.org LISPmob.org] in the open source community on the following platforms:
* Linux
* Android
* OpenWRT

For more detail and support for LISP data plane software please visit [http://lispmob.org LISPmob.org].

==== Architecture Overview ====
The Lisp Flow Mapping service provides [http://tools.ietf.org/search/rfc6830 LISP] Mapping System services. This includes LISP Map-Server and LISP Map-Resolver services, to store and serve the ''mapping data'' to data plane nodes as well as to OpenDaylight applications. Mapping data can include mapping of virtual addresses to physical network address where the virtual nodes are reachable/hosted at. Mapping data can also include a variety of routing policies including traffic engineering and load balancing. To leverage this service OpenDaylight applications and services can use the northbound REST API to define the mappings and policies in the LISP Mapping Service. Data plane devices capable of LISP control protocol can leverage this service through a southbound LISP plugin via the LISP control protocol (Map-Register, Map-Request, Map-Reply messages).

The following figure depicts the described components.

[[File:LISP-ODL-02.jpg|600px]]


=== Installation Guide ===
For installation from the Service Provider edition please follow instructions at:
* [[Release/Hydrogen/Service Provider/Installation Guide|Service Provider Edition Installation Guide]]
To install Lisp Flow Mapping project directly form the git repository please see below:
* [[OpenDaylight_Lisp_Flow_Mapping:Hacking_Code_From_CLI|Hacking the Code From CLI]]

===Tutorial / How-To===
Step-by-step instructions for doing some basic functionality with this project (ex: L2 Network Example using VTN)
** TO DO

=== Programmatic Interfaces ===
The LISP Flow Mapping service Java and REST APIs are documented below:

[[OpenDaylight_Lisp_Flow_Mapping:API|LISP Flow Mapping APIs]]

===Help===
For support please contact the lispflowmapping project at: 
* Lisp Flow Mapping users mailing list:
** lispflowmapping-users@lists.opendaylight.org
* Lisp Flow Mapping dev mailing list:
** lispflowmapping-dev@lists.opendaylight.org
