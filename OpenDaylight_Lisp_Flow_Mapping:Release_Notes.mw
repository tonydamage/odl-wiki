{| align="right" border="1"
|align="center"|'''Guide Contents'''
|-
|[[OpenDaylight_Lisp_Flow_Mapping:Architecture|Architecture Overview]]<br>[[OpenDaylight_Lisp_Flow_Mapping:Java_API|Java API]]<br>[[OpenDaylight_Lisp_Flow_Mapping:REST_API|REST API]]<br>[[OpenDaylight_Lisp_Flow_Mapping:SimultaneousReleasePlan2013|Release Plan]]<br>[[OpenDaylight_Lisp_Flow_Mapping:ReleasePlan2013_Detailed|Detailed Release Plan (2013)]]<br>[[OpenDaylight_Lisp_Flow_Mapping:Main|Back to LISP Flow Mapping Main]]
|}

==Release Notes==
===Major Features===

* First release of Lisp Flow Mapping
* LISP Map Server with flat key-value mappings
** Support for basic mappings including multiple RLOCs per EID, priority, and weight
** Support for storing IPv4, IPv6, MAC, Distinguished Name, Segment ID, Traffic Engineering with Path Specification, AS Number, Application Specific Data
** Support for Source/Destination 2-Tuple Lookups
* LISP Map Resolver 
* Northbound (application facing) REST API for Map Server  and Map Resolver to add/retrieve EID-RLOC (e.g. : virtual IP address to physical IP address) mappings 
* Southbound (device facing) LISP API for Map Server and Map Resolver to register/request EID-RLOC mappings via LISP protocol

===Target Environment===

====For Execution====

* Languages used: Java
* Required: JRE

====For Development====

* JDK
* Maven

===Known Issues and Limitations===

* SMR is not supported in this version. As a result the Map Server is not proactive. Devices must retrieve information from the Map Server to see the latest updates.
* LISP LCAFs are limited to only up to one level of recursion. For instance in the case of a traffic engineering policy every hop can only be a basic address (IPv4,  IPv6, MAC, Dist. Name, AS Number), and can not include combinations such as Segment ID, or list. 
* Mappings registered for the same EID (EID prefix) are appended to the records for that EID if the locator being registered is different that what is already registered. Mappings are expired after 4 minutes from registration. Later versions may provide support for overwriting or removing mappings as well as differentiating between registrations from northbound vs southbound with priority to allow for append/overwrite option.
* Testing methodology
** All modules have been unit tested. Integration tests have been performed for all major features. 
** Registering and retrieval of basic mappings have been tested more thoroughly. More complicated mapping policies have gone through less testing. Registering mappings via Northbound API with LCAF AFIs have not been tested.
