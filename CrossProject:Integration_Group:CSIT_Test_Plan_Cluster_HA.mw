
==Prerequisites==
* Make sure you meet the requirements documented [https://wiki.opendaylight.org/view/OpenDaylight_Controller:Clustering:HowTo here] before starting the cluster.
* Start a cluster of Opendaylight controllers with minimum 2 controllers:
** In the first controller machine do &nbsp;  ''./run.sh -Dsupernodes=Controller1_IP:Controller2_IP -start'' &nbsp;  with administrator priviledges
*** This will start Controller1 in a cluster as supernode
** In the second controller machine do &nbsp;  ''./run.sh -Dsupernodes=Controller1_IP:Controller2_IP -start'' &nbsp;   with administrator priviledges
*** This will start Controller2 in a cluster as supernode
* Start mininet (i.e. ''mininet> sudo mn --controller=remote,ip=Controller1_IP --topo tree,2'')
** This generates 3 nodes: s1 (*:01), s2 (*:02), s3 (*:03)
** At this point only the Controller1 get provisioned in OVS bridges (s1, s2, s3)
** s1 has 2 ports: 1,2 that connects to s2 and s3
** s2 has 3 ports: 1 to host1 (10.0.0.1), 2 to host2 (10.0.0.2) and 3 to s1
** s3 has 3 ports: 1 to host3 (10.0.0.3), 2 to host4 (10.0.0.4) and 3 to s1
* Now, puase the mininet (i.e. ''mininet> CTRL + Z'')
* In order to get Controller2 provisioned in OVS bridges do the following commands with administrator priviledges:
** ''$ ovs-vsctl set-controller s1 tcp:Controller1_IP:6633 tcp:Controller2_IP:6633''
** ''$ ovs-vsctl set-controller s2 tcp:Controller1_IP:6633 tcp:Controller2_IP:6633''
** ''$ ovs-vsctl set-controller s3 tcp:Controller1_IP:6633 tcp:Controller2_IP:6633''


* All the following test cases are written in Gherkin style (behavior-driven)
 
* For the details see [http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.8.3#different-test-case-styles here].

==Test Content==

=== Cluster Manager ===

* Two controllers running
:Given C1 a controller in cluster of two controllers
:And C2 a controller in cluster of two controllers
:And both controllers get provisioned on all OVS bridges
:When C1 is up and running
:And c2 is up and running
:Then the system is working with C1 and C2

* Controller1 fails
: Given C1 a controller in cluster of two controllers
: And C2 a controller in cluster of two controllers
: And both controllers get provisioned on all OVS bridge
: When C1 goes down
: Then C2 takes over
: And the system is working with C2

* Controller2 fails
: Given C1 a controller in cluster of two controllers
: And C2 a controller in cluster of two controllers
: And both controllers get provisioned on all OVS bridge
: When C2 goes down
: Then C1 takes over
: And the system is working with C1

* Controller1 recovers after failure
: Given C1 goses down
: And C2 takes over
: When C1 recovers
: Then the system is working with C1 and C2

=== Forwarding Rules Manager in a Cluster ===
* The installed flow can be seen in a cluster of two controllers
: Given C1 a controller in cluster of two controllers
: And C2 a controller in cluster of two controllers
: And
