==Overview==
This project aims at enabling inter-SDN controller communication by developing SDNi (Software Defined Networking interface) as an application (ODL-SDNi App).

==Architecture==

The following figure depicts the described components:
[[File:Architecture.PNG|500px |none]] 
<br />

* SDNi Aggregator: Northbound SDNi plugin acts as an aggregator for collecting network information such as topology, stats, host etc. This plugin can be evolving as per needs of network data requested to be shared across federated SDN controllers.
* SDNi RestAPI: SDNi REST APIs will be implemented to fetch the aggregated information from the northbound plugin â€“ SDNi aggregator. New SDNi RestAPI will be developed, specific to ODL for supporting SDNi application.
* SDNi Wrapper: SDNi BGP Wrapper will be responsible for the sharing and collecting information to/from federated controllers.

==Getting Started==
=== Prerequisite ===
* A recent Linux distribution - 64bit/4GB RAM
* Java Virtual Machine 1.7 or above
* Apache Maven 3.04 or above
* Mininet VM

=== Initiating ODL-SDNi App ===
Download the following from opendaylight gerrit links

* Opendaylight Controller
* ODL-SDNi Application
* Follow the installation steps of controller in https://wiki.opendaylight.org/view/OpenDaylight_Controller:Pulling,_Hacking,_and_Pushing_the_Code_from_the_CLI 
* Follow ODL-SDNi User guide([[ODL-SDNiApp:User_Guide|User Guide]])to integrate SDNi App in ODL
Note: To check the functionality of ODL-SDNi app, setup should be done in minimum of two machines.

=== How to start and run ===

* ODL-SDNi setup is ready, run the controller using ./run.sh with supernodes command.
Refer https://wiki.opendaylight.org/view/OpenDaylight_Controller:Clustering:HowTo to run the controllers in cluster mode.
<pre>
./run.sh -Dsupernodes=<supernodesIP1>[:<supernodesIP2>]..[:<supernodesIPN>]
</pre>

* Mininet script to be written for creating the topology of the clustered controllers.
<pre>
net=Mininet(controller = RemoteController, switch = OVSKernelSwitch , host=CPULimitedHost, link=TCLink)
c1 = net.addController('c1', controller=RemoteController, ip="IPaddress of controller1", port=6633)
c2 = net.addController('c2', controller=RemoteController, ip="IPaddress of controller2", port=6643)
</pre>

Note: See TroubleShooting of User Guide for any issue in running the mininet.
[[ODL-SDNiApp:User_Guide|User Guide]]

* Use the ping command to see the packet forwarded between the switches of clustered controllers.
