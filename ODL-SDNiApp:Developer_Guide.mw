==Overview==
This project aims at enabling inter-SDN controller communication by developing SDNi (Software Defined Networking interface) as an application (ODL-SDNi App).

==Architecture==

The following figure depicts the described components:
[[File:Architecture.PNG|500px |none]] 
<br />

* SDNi Aggregator: Northbound SDNi plugin acts as an aggregator for collecting network information such as topology, stats, host etc. This plugin can be evolving as per needs of network data requested to be shared across federated SDN controllers.
* SDNi RestAPI: SDNi REST APIs will be implemented to fetch the aggregated information from the northbound plugin – SDNi aggregator. New SDNi RestAPI will be developed, specific to ODL for supporting SDNi application.
* SDNi Wrapper: SDNi BGP Wrapper will be responsible for the sharing and collecting information to/from federated controllers.

==Getting Started==
=== Prerequisite ===
* A recent Linux distribution - 64bit/4GB RAM
* Java Virtual Machine 1.7 or above
* Apache Maven 3.04 or above
* Mininet VM

=== Initiating ODL-SDNi App ===
Download the following from opendaylight gerrit links

* Opendaylight Controller
* ODL-SDNi Application

Follow the installation steps of controller in https://wiki.opendaylight.org/view/OpenDaylight_Controller:Pulling,_Hacking,_and_Pushing_the_Code_from_the_CLI 

Follow ODL-SDNi User guide([[ODL-SDNiApp:User_Guide|User Guide]])to integrate SDNi App in ODL
Note: To check the functionality of ODL-SDNi app, setup should be done in minimum of two machines.

=== How to start and run ===

* ODL-SDNi setup is ready, run the controller using ./run.sh with supernodes command.
Refer https://wiki.opendaylight.org/view/OpenDaylight_Controller:Clustering:HowTo to run the controllers in cluster mode.
<pre>
./run.sh -Dsupernodes=<supernodesIP1>[:<supernodesIP2>]..[:<supernodesIPN>]
</pre>

* Mininet script to be written for creating the topology of the clustered controllers.
<pre>
net=Mininet(controller = RemoteController, switch = OVSKernelSwitch , host=CPULimitedHost, link=TCLink)
c1 = net.addController('c1', controller=RemoteController, ip="IPaddress of controller1", port=6633)
c2 = net.addController('c2', controller=RemoteController, ip="IPaddress of controller2", port=6643)
</pre>

Note: See TroubleShooting of User Guide for any issue in running the mininet.
[[ODL-SDNiApp:User_Guide|User Guide]]

* Use the ping command to see the packet forwarded between the switches of clustered controllers.

==Developer’s Guide for SDNiAggregator==

SDNiAggregator connects with the Base Network Service Functions of the controller. Currently it is querying topology manager, switch manager, host tracker and statistics manager for creating SDNi network capability.

SDNiAggregator is customized to retrieve the host controller’s details, while running the controller in cluster mode. Rest of the northbound APIs of controller will retrieve the entire topology information of all the connected controllers.

Diagrammatic Representation is as below:

[[File:SDNiRestAPI.png|500px |none]] 
<br />

The SDNiAggregator creates a topology structure.This structure is populated by the various network funtions as shown in the diagram above.

==Developer’s Guide for SDNiRestAPI==
There are three rest calls in ODL-SDNi App. All these calls, query SDNiAggregator to get the required information.
<pre>
http://localhost:8080/controller/nb/v2/sdni/<containername>/topology
http://localhost:8080/controller/nb/v2/sdni/default/property/<property-name>/<property-value>
http://localhost:8080/controller/nb/v2/sdni/default/property/linkbandwidth/linkname:0102,linkbandwidth:10&linkname:0103,linkbandwidth:5
</pre>

1) Topology Data:Controller IP Address,Links,Nodes,Link Bandwidths,MAC Address of switches,Latency,Host IP address
2) Update the same Bandwidth for the entire topology.
3) Update Bandwidth for the given link. Here bandwidth for link 0102 is updated to 10Gbps and for 0103 is 5Gbps.

==Developer’s Guide for SDNiWrapper==
The SDNiWrapper diagrammatic representation is as below

[[File:SDNiWrapper.png]] 

SDNiWrapper is an extension of ODL-BGPCEP where Topology data is exchanged along with the LinkState NLRI message. 
Refer http://tools.ietf.org/html/draft-ietf-idr-ls-distribution-04 for more information on LinkState NLRI

SDNiWrapper gets the controller’s network capabilities through SDNi REST API and serialize it  with LinkState NLRI message. This NLRI message will get exchange between the clustered controllers through BGP-UPDATE message. Similarly peer controller’s UPDATE message is received and unpacked then format to SDNi Network capability data, which will be stored for further purpose.

Please refer User Guide([[ODL-SDNiApp:User_Guide|User Guide]]) for running and integration.
