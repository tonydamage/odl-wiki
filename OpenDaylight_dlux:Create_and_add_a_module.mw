'''Page in progress'''  ''maximem''

This section describes how to create and add a module to OpenDaylight Dlux.

==Module structure==
<pre>
-- module_folder
----- <module_name>.module.js 
----- <module_name>.controller.js  
----- <module_name>.services.js  
----- <module_name>.directives.js  
----- <module_name>.filter.js
----- index.tpl.html
----- <a_stylesheet>.css
 </pre>

==Define the module==
First, create an empty file with the module name.
Next, we need to surround our module with a define function. This allows RequireJs to see our module.js files. The first argument is an array who contain all the module dependencies. The second is a callback function whose body contain the AngularJs code base. The function parameters correspond with the order of dependencies. Each dependences is injected into a parameter if it is provided.

For each new module, you must have at least those two dependencies :
* angularAMD : It's a wrapper arround angularjs to provide an AMD support('''A'''synchronous '''M'''odule '''D'''efinition). Which is used by RequireJs. For more information click [https://github.com/amdjs/amdjs-api/blob/master/AMD.md here].
* app/core/core.services : This one is mandatory if you want to add content in the navigation menu, the left bar or the top bar.

The following are not mandatory, but very often used.
* angular-ui-router : A library to provide url routing
* routingAccess : To set level access to a page

<pre>
define(['angularAMD','routingAccess', 'angular-ui-router','app/core/core.services'], function(ng) {
    var module = angular.module('app.a_module', ['ui.router.state', 'app.core']);
    
    // module configuration

   return module;
});
</pre>

===Set the register function===
If your module is only require by the main application, you will need register your angular components because the app will be already bootstraped. Otherwise, it won't see your component on the runtime.

'''Note :''' If your module is only use by an other module, you don't have to do this step.
<pre>
  module.config(function($compileProvider, $controllerProvider, $provide) {
    module.register = {
      controller : $controllerProvider.register,
      directive : $compileProvider.directive,
      factory : $provide.factory,
      service : $provide.service
      
    };
</pre>

===Set the route===
The next step is to set up the route for our module. This part is also done in the configuration method of the module. We have to add '''$stateProvider''' as a parameter.
<pre>
module.config(function($stateProvider) {
    var access = routingConfig.accessLevels;
    $stateProvider.state('main.module', {
      url: 'module',
      views : {
        'content' : {
          templateUrl: 'src/app/module/module.tpl.html',
          controller: 'ModuleCtrl'
        }
      }
    });
});
</pre>

===Adding element to the navigation menu===
To be able to add item to the navigation menu, the module requires the '''NavHelperProvider''' parameter in the configuration method. This helper has a method to easily append contain into the menu. The first parameter is an id who refer as the level of your menu and the second is a object. 
<pre>
var module = angular.module('app.a_module', ['app.core']);
module.config(function(NavMenuHelper) {
    NavMenuHelper.addToMenu('myFirstModule', {
        "link" : "index.html#/module/index",
        "active" : "module",
        "title" : "My First Module",
        "icon" : "icon-sitemap",
        "page" : {
            "title" : "My First Module",
            "description" : "My first module"
        }
    });
});
</pre>

The ID parameter support, for now, one level of depth. So if your ID look like 'rootNode.chilNode', the helper will look for a node named 'rootNode' and it will append the 'childNode' to it. If the root node doesn't exist, it will create it.

===Link the controller file===
To include the controller file, we will use the NavHelperProvider. It contain a method who will load the given file.
<pre>
    [...]
    NavHelperProvider.addControllerUrl('<path_to_module_folder>/<module_name>.controller');
</pre>

The module.js file is now complete

== Create the Controllers, factory, directive, etc==
Creating the controller and other components are similar to the module.
* First, add the define method 
* Second, add the relative path to the module definition
* Last, create your methods as you usually do it with angularJs  
<pre>
define(['<relative_path_to_module>/<module_name>.module'], function(module) {
    module.register.controller('ModuleCtrl', function($rootScope, $scope) {
    });
});
</pre>
'''Note :''' Don't forget, if your module only refer to an other module you don't need the register.

==Append to the main file (temporary)==
The last thing to do is to add the path of the module definition file and add the name of the angular module. 
So edit the file app.module.js as the follow
<pre>
//----Temporary-------\\
var module = [
   [...]
  '<relative_path_module>/<module_name>.js',
   [...]

var e = [
   [...]
  'a_module',
   [...]
//--------------------\\
</pre>
