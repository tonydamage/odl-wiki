{|  class="wikitable" style="color:#ff6600; background-color:#ffcc99;"  align="right" border="1"
|align="center"|'''OVSDB Integration Facts                                                           '''
|-
|'''Project Creation Date:''' July 18th, 2013
'''Lifecycle State:''' Incubation <br> 
'''Primary Contacts:''' <br> 
* Madhu Venugopal <mavenugo@gmail.com> <br>
* Brent Salisbury <brent.salisbury@gmail.com> <br>
'''Project Lead:''' N/A <br>
'''Committers:''' <br>
* Madhu Venugopal <mavenugo@gmail.com>
* Brent Salisbury <brent.salisbury@gmail.com>
* Evan Zeller <evanrzeller@gmail.com>
* Giovanni Meo <gmeo@cisco.com>
* Kyle Mestery <kmestery@cisco.com>
* Aswin Nair <aswinnair@gmail.com> <br>
'''IRC:'''  freenode.net #opendaylight-ovsdb <br>
'''Mailing List:''' ovsdb-dev@lists.opendaylight.org <br>
'''Meeting Info:''' <br>
* When: Tuesdays at 12 noon Pacific Time
* Where:
** [https://www.google.com/url?q=https%3A%2F%2Fmeetings.webex.com%2Fcollabs%2F%23%2Fmeetings%2Fdetail%3Fuuid%3DMBEJOM1CNOV3D3YXNTHITWGVNZ-9VIB&ust=1394558455728000&usg=AFQjCNFJgpkNrlTmjel3b_f1PWudSgZXxg Link To Webex]
** Webex Meeting number:              196 498 415
** 1-855-244-8681 Call-in toll-free number (US/Canada)
** 1-650-479-3207 Call-in toll number (US/Canada)
|}


==Introduction==

The OVSDB Plugin integration project is a project for OpenDaylight that will implement the Open vSwitch Database RFC 7047 management protocol, allowing southbound configuration of vSwitches. OVSDB was created by Ben Pfaff, Bruce Davie and Martin Casado at Nicira Networks. The project consists of a library, along with various plugin usages.

== Getting Started with OpenDaylight OVSDB ==

We are still in development and have needs from developers to network guys or anywhere in between. All contributions from upstream code to docs and tutorials. Take a look at the getting started links and jump on #opendaylight-ovsdb on irc.freenode.net and get started hacking!

* [[OVSDB:Installation_Guide|Installation Guide]]
* [[OVSDB:User_Guide|User Guide]]
* [[OVSDB:Developer_Guide|Developer Guide]]

== Weekly OVSDB Plugin Meeting (Open to All) ==

* Weekly on Tuesday's at 12:00-13:00 PST/PDT | 15:00-16:00 EST/EDT |  19:00-20:00 GMT
* IRC channel: #opendaylight-ovsdb

==High-Level Design==

* [[OVSDB_Integration:Design|High-Level architecture and design]]

* [[OVSDB Integration:Mininet OVSDB Tutorial|OVSDB Integration:Mininet and OVSDB Tutorial]]

* [http://www.youtube.com/channel/UCMYntfZ255XGgYFrxCNcAzA OVSDB Hangout Recording Weekly Calls and Informational]

* [[https://wiki.opendaylight.org/view/OVSDB_Integration:Design|OVSDB Integration Architecture]]

== Example Usage ==
OVSDB is a critical protocol for Network Virtualization with Open vSwitch forwarding elements.

[[File:Ovsdb-architecture.png|framed|center]]

== Clone The OVSDB repository ==

<pre>
git clone https://git.opendaylight.org/gerrit/p/ovsdb.git

OR

git clone ssh://<username>@git.opendaylight.org:29418/ovsdb.git
</pre>

==People==
* Brent Salisbury <brent.salisbury@gmail.com> networkstatic on irc.freenode.net
* Evan Zeller <evanrzeller@gmail.com>  evanz on irc.freenode.net
* Madhu Venugopal <mavenugo@gmail.com> Madhu on irc.freenode.net
* Giovanni Meo
* Kyle Mestery <kmestery@cisco.com>

==Issues== 
* jsonrpc4j does not provide the bidirectional capabilities that we need to create calls, and respond to echo as well. There are several options being investigated: 
:# integration of [http://deavid.github.io/bjsonrpc/ bjsonrpc] via Jython
:# Create our own json-rpc implementation.
:# Add the functionality needed to jsonrpc4j
* Continue working on fully integrating the full functionality of the protocol.

==Technical Overview==

===JSON-RPC Overview===

JSON-RPC is a remote procedure protocol which allows our ovsdb client to call methods that exist on the ovsdb server, allowing us to provision bridges, ports, interfaces, tunnels, and more in the database. Any rpc request is formatted as follows:

<syntaxhighlight lang="java">
{
    "method":<string>,
    "params":[<object>],
    "id":<string> or <integer>
}
</syntaxhighlight>

This will invoke the value given in "method" on the server, passing in the parameters specified in order. Parameters can be simple strings, or complicated json objects. RPC response messages also have a standard formatting:

<syntaxhighlight lang="java">
{
    "result":[<object>],
    "error":<error>,
    "id":<string> or <integer>
}
</syntaxhighlight>

The library [https://code.google.com/p/jsonrpc4j/ jsonrpc4j] will take care of serializing and deserializing these standard messages for us, but for most situations we will need to deserialize the "result" value ourselves as it is most likely a complicated json object. Also, for many methods the "params" array will contain json objects, we define these as actual java objects which then get deserialized into json strings on the server side. Using the jackson streaming API it is possible to call methods and process responses using only string manipulation, but it is less convenient and as of now we are not using this method. The [http://tools.ietf.org/html/draft-pfaff-ovsdb-proto-02#section-4.1 ovsdb protocol draft] describes the methods and their responses in detail.

====Example: add bridge and associated port and interface====
<syntaxhighlight lang="javascript">
{
    "method":"transact",
    "params":[
        "Open_vSwitch",
        {
            "row": {
                "bridges": [
                    "named-uuid",
                    "new_bridge"
                ]
            },
            "table": "Open_vSwitch",
            "uuid-name": "new_switch",
            "op": "insert"
        },
        {
            "row": {
                "name": "br1",
                "type": "internal"
            },
            "table": "Interface",
            "uuid-name": "new_interface",
            "op": "insert"
        },
        {
            "row": {
                "name": "br1",
                "interfaces": [
                    "named-uuid",
                    "new_interface"
                ]
            },
            "table": "Port",
            "uuid-name": "new_port",
            "op": "insert"
        },
        {
            "row": {
                "name": "br1",
                "ports": [
                    "named-uuid",
                    "new_port"
                ]
            },
            "table": "Bridge",
            "uuid-name": "new_bridge",
            "op": "insert"
        }
    ],
    "id":1234
}
</syntaxhighlight>

==See also==
[[Project Proposals:OVSDB-Integration|OVSDB Integration project proposal page]]

[http://tools.ietf.org/html/draft-pfaff-ovsdb-proto-02#section-4.1 OVSDB Protocol Draft]

[http://www.jsoneditoronline.org/ JSON Editor - Very useful]

[[OVSDB_Integration:Release_Plan|Release Plan]]
