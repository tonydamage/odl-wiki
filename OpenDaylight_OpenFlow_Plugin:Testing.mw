= OFPlugin testing =
== OpenFlow Plugin provides following features ==
# Connection handshake with switches supporting 1.3 and 1.0 using OF Library API's.
# Capability exchange with Switch.
# Handled multiple connections from switches.
# Handle multiple Auxiliary and Main connection from switches.
# Role request.
# Error handling.
# Support OF CRUD operation for Flow, group, meter, stats, etc.
# Packet processing.
# Support discovery service for topology.
# Handle and propagate switch events.


== OpenFlow Plugin Dependencies ==
# MD-SAL
# Hard-SAL
# OF Library.

So dependencies should be created in Jenkins as to run integration tests when any dependencies changes.


== Openflow Plugin needs to be integrated with following modules ==

# Integration with Library.
# Integration with MD-SAL.
# Integration with Hard-SAL.
# MD-SAL, Library and plugin integration.


== So each of the above integration scenario's will have different features to be tested ==

=== Integration with Library ===

:* Connection handshake with switch(Version bitmap and Hello message exchange.
:* Capability exchange.
:* Handle multiple connection.
:* Handle TCP/TLS/UDP connection.
:* Certificate Management though its Library functionality but still it would be good to do integration testing.
:* Error Handling.
:* Event Management.
:* Packet processing.

==== Easy way to setup osgi context with felix ====
For testing purposes OFPlugin and OFLibrary could be started together inside of OSGI context. 
'''Requirements:'''
* maven >= 3.0.4
* java JDK 1.7
* access to http://nexus.opendaylight.org
* [http://felix.apache.org felix-framework] (look for org.apache.felix.main.distribution)

'''Instructions:'''
* place this pom.xml in empty folder '''<OFPluginFelixEasy>''':
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>org.opendaylight.openflowplugin</groupId>
        <artifactId>openflowplugin-felix-easy</artifactId>
        <version>0.1-SNAPSHOT</version>
        <packaging>pom</packaging>
    <dependencies>
      <dependency>
        <groupId>org.opendaylight.openflowplugin</groupId>
        <artifactId>openflowplugin</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.opendaylight.openflowjava</groupId>
        <artifactId>openflow-protocol-impl</artifactId>
        <version>0.1-SNAPSHOT</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
 </project>
* in '''<OFPluginFelixEasy>''' run: <tt>mvn dependency:copy-dependencies -DoutputDirectory=deps</tt>
* copy jars from '''<OFPluginFelixEasy>/deps''' into '''<FELIX_FRAMEWORK_ROOT>/bundle/'''
* create log4j.xml file containing:
 <?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
 <log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
    <appender name="console" class="org.apache.log4j.ConsoleAppender">
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%-6p %d{HH:mm:ss.SSS} [%10.10t] %30.30c %x - %m%n" />
        </layout>
    </appender>
    <logger name="org.opendaylight.openflowplugin" additivity="false">
        <level value="DEBUG" />
        <appender-ref ref="console" />
    </logger>
    <logger name="org.opendaylight.openflowjava" additivity="false">
        <level value="INFO" />
        <appender-ref ref="console" />
    </logger>
    <root>
        <priority value="INFO" />
        <appender-ref ref="console" />
    </root>
 </log4j:configuration>
* in '''<FELIX_FRAMEWORK_ROOT>''' run: <tt>java -Dlog4j.configuration=file://<absolute path to log4j.xml> -jar bin/felix.jar</tt>

=== Integration with MD-SAL ===

:* Registration of RPC method with MD-SAL.
:* Routing the call to right RPC by MD-SAL.
:* Switch notification from plugin to SAL.
:* MD-SAL routing the notification to all registered modules.


=== Integration with Hard-SAL ===

Will be same as "Integration with MD-SAL.


=== MD-SAL, Library and plugin integration ===

All the above scenario 1 and 2 have to combined and tested.
