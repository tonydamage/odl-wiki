= Overview =
= YANG to JAVA mapping =
== Package name ==
The package name consists from following parts:
* <font color="red">opendaylight prefix</font color> - every package name starts with prefix <code>'''org.opendaylight.yang.gen.v'''</code> which is hardcoded in <code>'''BindingGeneratorUtil.moduleNamespaceToPackageName()'''</code>.
* <font color="green">YANG version</font color> - is specified through '''module''' substatement '''yang-version'''
* <font color="blue">namespace</font color> - equals to value of '''module''' subelement '''namespace''' argument value. The namespace characters ''': / : - @ $ # ' * + , ; = and character group:/''') are replaced with periods ('''.''').
*  <font color="violet">revision</font color> - concatenation of word <code>rev</code> and value of '''module''' subelement '''revision''' argument value without leading zeros before month and day (e.g. rev201379)

After the package name is generated then it is checked if it contains any JAVA key words or digits. If it is so then before this tokens is adden underscore ('''_''').
List of key words which are prefixed with underscore:<br />
<code>abstract, assert, boolean, break, byte, case, catch, char, class, const, continue, default, double, do, else, enum, extends, false, final, finally, float, for, goto, if, implements, import, instanceof, int, interface, long, native, new, null, package, private, protected, public, return, short, static, strictfp, super, switch, synchronized, this, throw, throws, transient, true, try, void, volatile, while</code>

As an example suppose following yang model:<br />
<source>
module module {
    
    namespace <font color="blue">"urn:2:case#module"</font color>
    prefix "sbd";

    organization "OPEN DAYLIGHT";
    contact "http://www.whatever.com/";

    revision <font color="violet">2013-07-09</font color> {        
    }
}
</source>
Package name will be 
<font color="red">org.opendaylight.yang.gen.v</font color><font color="green">1</font color><font color="blue">.urn:2:case#module</font color><font color="violet">.rev201379</font color><br /> 
and after replacing digits and JAVA keywords<br />
<font color="red">org.opendaylight.yang.gen.v</font color><font color="green">1</font color><font color="blue">.urn._2._case.module</font color><font color="violet">.rev201379</font color><br />

== Module ==
YANG module is converted to JAVA as two JAVA classes. Each of the class is in the separate JAVA file. The names of JAVA files are composed as follows:<br />
<font color="red"><YANG_module_name></font color><font color="green"><Sufix></font color>.java
where <sufix> can be '''Data''' or '''Service'''.<br />

<table border="1">
<tr>
<td>YANG</td>
<td>JAVA</td>
</tr>
<tr>
<td rowspan="2">
<source>
module module {
    
    namespace "urn:module";
    prefix "sbd";

    organization "OPEN DAYLIGHT";
    contact "http://www.whatever.com/";    

    revision 2013-07-09 {
    }
}
</source>
</td>
<td>
<font color="red">Module</font color><font color="green">Data</font color>.java
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.module.rev201379;
public interface ModuleData {
}
</source>
</td>
</tr>
<tr>
<td>
<font color="red">Module</font color><font color="green">Service</font color>.java
<source lang="java">
package org.opendaylight.yang.gen.v1.urn.module.rev201379;
public interface ModuleService {
}
</source>
</td>
</tr>
</table>

== Typedef ==
== Container ==
== Leaf ==
== Leaf-list ==
== List ==
== Choice ==
== Grouping and uses ==
== Rpc ==
== Notification ==
== Augment ==
== Identity ==
The purpose of the identity statement is “to define a new globally unique, abstract, and untyped identity “. YANG substatement base „takes as an argument a string that is the name of existing identity, from which the new identity is derived.1“ Therefore the identity statement is mapped to JAVA abstract class and base substatement is mapped as extends JAVA keyword.
