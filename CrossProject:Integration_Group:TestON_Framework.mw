== Maintainers ==

Chandan (chandan@paxterrasolutions.com)

Gopan Govindan (gopan.govindan@paxterrasolutions.com)

Raghu Varma (raghuvarma@paxterrasolutions.com )

Sudheer (sudheer@paxterrasolutions.com)

Swaraj Vinjapuri (swaraj@cisco.com)

== Introduction ==

TestON is an end to end automation framework for testing the Openflow/SDN components. Run
across various components in an OpenFlow topology. This solution aims to provide an
automation framework, that is not just exhaustive in coverage, but also makes it easy to
debug and author scripts. It allows for authoring scripts in OpenSpeak (plain English) format
and can be run standalone from the command line

Check[https://github.com/Paxterra/TestON/tree/TestON-2.0.0/Documentation] TestON documentation at Github for more information
TestON Documentation

==TestON Source Code==
Download TestON framework form github.To Download use below mentioned link.
[https://github.com/Paxterra/TestON/tree/TestON-2.0.0]

==TestON Driver Design==

Component drivers are the most important part of the TestON framework. they make the framework actually do some useful work. Essentially, a component driver is a class that has at least the following methods/APIs defined in it.

connect : This is the method that sets up the connection to the component and creates required log files, etc. For CLI components, this is a wrapper around the standard pexpect library. For API components, it is an empty class template. This class will be redefined to load required libraries in the actual API component. For UI components, it will be an empty class template that will be redefined to connect using the appropriate GUI library.

disconnect - Self explanatory

exec : This is the smallest possible action in the TestON framework on a component. It performs a specified action on the component and waits for a response. For CLI drivers, this is a command to be executed on the CLI shell and the response is the output of the command. For API components, it is an API to be called with specific arguments on a library and the response is the return value of the API. For GUI components, it will be a GUI action like click, double click, etc and the response is an expected change in the UI.

log : This is a simple log API that provides the ability to log a message to the component's session log file. It takes two arguments - ther level of the log message and the message.

Besides these basic methods, each driver can add APIs of its own that will be available in the test script. The idea is to use the exec API as a building block and build higher and higer wrapper APIs. E.g., A configure_ip_address API can internally use multiple exec APIs to configure an IP address on an interface, verify if the IP address is configured and ping that IP address to achieve its end goal.

==TestON Test Scripts==
In TestON frame work each test must be composed of 3 files as mentioned below (Name should be same for all files in the tests directory). 
*testname.ospk
*testname.params
*testname.topo
An automatic compiler gets called when a test is executed, and determines if the test script is in Python or OpenSpeak format. If the format is OpenSpeak, then a translation to Python must be done prior to execution. Therefore, OpenSpeak formated script is translated to python script in the course of test execution in TestON Framework. The basic Openspeak script for opendaylight test is as shown below
*Odl.ospk
CASE 1:
     NAME "Get list of containers"
     STEP "Getting list of containers"
     STORE ON ODL1 DO get USING URL AS CASE['get_url'] IN result
     ASSERT result EQUALS 200 ONPASS "Getting containers list" ONFAIL "Not getting any containers list"
CASE 2:
     NAME "Create a container"
     STEP "Creating a new container"
     STORE ON ODL1 DO put USING URL AS CASE['put_url'],BODY AS CASE['put_body'] IN result
     ASSERT result EQUALS 201 ONPASS "Container getting added" ONFAIL "Container not added"
CASE 3:
     NAME "Get topology"
     STEP "Getting topology"
     STORE ON ODL1 DO get USING CASE['get_url'] IN result 
     ASSERT result EQUALS 200 ONPASS "Topology getting successfully" ONFAIL "Topology not getting successfully"
CASE 4:
     NAME "Get flow statistics"
     STEP "Getting flow Statistics from topology"
     STORE ON ODL1 DO get USING CASE['get_url'] IN result 
     ASSERT result EQUALS 200 ONPASS "Getting all flow statistics" ONFAIL "Not getting flow statistics"

CASE 5:
    NAME "Remove static route"
    STEP "Removing static route"
    STORE ON ODL1 DO delete USING CASE['delete_url'] IN result
    ASSERT result EQUALS 204 ONPASS "User link removed" ONFAIL "User link not removed"

TestOn driver Script will access the python file (derived from the Test Description Language[OpenSpeak]) for execution of test. The drivers would call the functions specified in the python file.
The derived python script for the above ospk script is as follows:

*Odl.py
class Odl :

    def __init__(self) :
        self.default = ‘‘

    def CASE1(self,main) :
        main.case("Get list of containers")
        main.step("Getting list of containers")
        result = main.ODL1.get(URL=main.params['CASE1']['get_url'])
        utilities.assert_equals(expect=200,actual=result,onpass="Getting containers list",onfail="Not getting any containers list")
    

   def CASE2(self,main) :
        main.case("Create a container")
        main.step("Creating a new container")
        result = main.ODL1.put(URL=main.params['CASE2']['put_url'],BODY=main.params['CASE2']['put_body'])
        utilities.assert_equals(expect=201,actual=result,onpass="Container getting added",onfail="Container not added")

    def CASE3(self,main) :
        main.case("Get topology")
        main.step("Getting topology ")
        result  = main.ODL1.get(main.params['CASE3']['get_url'])
        utilities.assert_equals(expect=200,actual=result,onpass="Topology getting successfully",onfail="Topology not getting successfully")

    
    def CASE4(self,main) :
        main.case("Get flow statistics")
        main.step("Getting flow Statistics from topology")
        result  = main.ODL1.get(main.params['CASE4']['get_url'])
        utilities.assert_equals(expect=200,actual=result,onpass="Getting all flow statistics",onfail="Not getting flow statistics")
 


    def CASE5(self,main) :
        main.case("Remove static route")
        main.step("Removing static route")
        result = main.ODL1.delete(main.params['CASE5']['delete_url'])
        utilities.assert_equals(expect=204,actual=result,onpass="User link removed",onfail="User link not removed")

Topology file plays the key role by defining the components for a test in TestON framework. The basic topology file for Opendaylight test is as mentioned below: (Note that Mininet, or OpenDaylight controller can be run in a VM or in your host machine. Make sure there is IP connectivity between the two machine.)

*Odl.topo

<TOPOLOGY>
    <COMPONENT>
        <Mininet1>
            <host>"mininet machine IP address"</host>
            <user>"minine machine username"</user>
            <password>"minine machine password"</password>
            <type>MininetCliDriver</type>
            <COMPONENTS>
                # Specify the Option for mininet
                <topo>tree</topo>
                <topocount>3</topocount>
                <switch>ovsk</switch>
                <controller>remote</controller>
                <ip>"OpenDaylight controller machine IP address"</ip>
                <port>6633</port>
             </COMPONENTS>   
        </Mininet1>        
        <ODL1>
            <host>"OpenDaylight controller machine IP address"</host>
            <user>"OpenDaylight controller machine username"</user>
            <password>"Opendaylight controller machine password"</password>
            <type> OdlDriver </type>
            <test_target> 1 </test_target>
            <header>{'Content-type': 'application/json', 'Accept': 'application/json'}</header>
            <COMPONENTS>
               <topology_url>http://localhost:8080</topology_url>
               <hostname>OpenDaylight controller machine hostname</hostname>
               <username>admin</username>
               <password>admin</password> 
            </COMPONENTS>
        </ODL1>
    </COMPONENT>
</TOPOLOGY>

TestON framework makes use of params file to execute the custom test cases as per test requirement. In this file, determine which test cases should be executed. The basic params file for Opendaylight test is as mentioned below:

*Odl.params

<PARAMS>
    <testcases>[1,2,3,4,5]</testcases>
    <CASE1> 
        <get_url>http://localhost:8080/controller/nb/v2/containermanager/containers</get_url>   
    </CASE1>
    

    <CASE2>
        <put_url>http://localhost:8080/controller/nb/v2/containermanager/container/cont1</put_url> 
        <put_body>{ "container" : "cont1", "nodeConnectors" : ["OF|1@OF|00:00:00:00:00:00:00:02", "OF|1@OF|00:00:00:00:00:00:00:03"], "staticVlan" : "10" }
       </put_body>
    </CASE2>

    <CASE3> 
        <get_url>http://localhost:8080/controller/nb/v2/topology/default</get_url>
    </CASE3>
   

    <CASE4> 
        <get_url>http://localhost:8080/controller/nb/v2/statistics/default/flow</get_url>
    </CASE4> 
 

    <CASE5> 
        <delete_url>http://localhost:8080/controller/nb/v2/staticroute/cont1/route/route1</delete_url> 
    </CASE5>  
</PARAMS>


'''Note about the OdlDriver (odldirver.py script):'''
In case you are running Mininet in a VM and OpenDaylight controller in your host machine, in the OdlDriver comment the following lines:
 main.log.info("Clearing any residual state or processes")
            result = self.execute(cmd="sudo mn -c",timeout=30,prompt="password")
            pattern = '[sudo]'
            if utilities.assert_matches(expect=pattern,actual=result,onpass="password is being asked",onfail="password is not being asked"):
                self.execute(cmd=self.pwd,prompt="\$",timeout=30) 
            else :
                main.log.info("password is not being asked")
                pass
 
 [[Category:Integration Group]]
