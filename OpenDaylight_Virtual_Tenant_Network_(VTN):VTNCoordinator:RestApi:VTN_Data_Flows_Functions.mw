{| align="right" border="1"
|align="center"|'''Related Pages'''
|-
|
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi|Introduction]]<br>
* [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Coordinator:RestApi#VTNCoordinator_RestApi_Contents|VTN Coordinator RestApi Contents]]<br>
* [[OpenDaylight Virtual Tenant Network (VTN):VTN Coordinator:RestApi: VTN Functions|VTN functions]]<br>
|}


{| align="center" border="1" color="blue"
|align="center"|'''NOTE'''
|-
|This REST API is not supported in current release, its targeted for future release.
|}

=Show VTN Data Flows=
This operation is used to view a specific VTN data flows information.

==Request==
{|class = "wikitable"
|-
|Method || GET
|-
|Request URI || 
/vtns/{vtn_name}/dataflows
|-
|Query String ||
 ?vnode_name={vnode_name}
 &srcmacaddr={srcmacaddr}
 &vlan_id={vlan_id}
 &no_vlan_id={no_vlan_id}
|}

;Description of request URI elements
{|class = "wikitable"
|-
|Element || Description || Required
|-
|vtn_name || VTN name.
Valid value: Up to 31 characters including
alphanumeric characters and underscore (except at the
beginning).
||Yes
|}

;Description of query string elements
{|class = "wikitable"
|-
|Element || Description ||Required
|-
|vnode_name || Virtual node name.
Valid value: Up to 31 characters including
alphanumeric characters and underscore (except at the
beginning).
||Yes
|-
|srcmacaddr ||Source MAC address.
Valid value: Three groups of four hexadecimal digits
separated by dots (.).
Example: 0123.4567.89ab
||Yes
|-
|vlan_id || VLAN ID.
Valid value: Decimal number.
Valid range: 1 - 4095
||Yes
|-
|no_vlan_id || No VLAN ID.
Valid value: Always true.
Note: Either vlan_id or no_vlan_id can be
specified.
||Yes
|}

==Response==
;Response Body
{|class = "wikitable"
|-
|Response Body ||
* XML format
 <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
 <dataflows>
 <dataflow reason="{reason}">
 <controller_domain_dataflows>
 <controller_domain_dataflow
   controller_id="{controller_id}"
   controller_type="{controller_type}"
   flow_id="{flow_id}"
   createdtime="{createdtime}"
   idletimeout= "{idletimeout}"
   hardtimeout= "{hardtimeout}"
   ingress_vnode_name= "{ingress_vnode_name}"
   ingress_if_name= "{ingress_if_name}"
   ingress_switch_id= "{ingress_switch_id}"
   ingress_port_name= "{ingress_port_name}"
   ingress_logical_port_id= "{ingress_logical_port_id}"
   ingress_domain_id= "{ingress_domain_id}"
   egress_vnode_name= "{egress_vnode_name}"
   egress_if_name= "{egress_if_name}"
   egress_switch_id= "{egress_switch_id}"
   egress_port_name="{egress_domain_id}"
   egress_logical_port_id= "{egress_logical_port_id}"
   egress_domain_id= "{egress_domain_id}">
  <match inport="[{inport}]"
   macdstaddr="[{macdstaddr}]"
   macdstaddr_mask="[{macdstaddr_mask}]"
   macsrcaddr="[{macsrcaddr}]"
   macsrcaddr_mask="[{macsrcaddr_mask}]"
   macethertype="[{macethertype}]"
   vlan_id="[{vlan_id}]"
   vlan_priority="[{vlan_priority}]"
   iptos="[{iptos}]"
   ipproto="[{ipproto}]"
   ipdstaddr="[{ipdstaddr}]"
   ipdstaddr_mask="[{ipdstaddr_mask}]"
   ipsrcaddr="[{ipsrcaddr}]"
   ipsrcaddr_mask="[{ipsrcaddr_mask}]"
   l4dstport_icmptype="[{l4dstport_icmptype}]"
   l4dstport_icmptype_mask
   ="[{l4dstport_icmptype_mask}]"
   l4srcport_icmptype="[{l4srcport_icmptype}]"
   l4srcport_icmptype_mask
   ="[{l4srcport_icmptype_mask}]"
   ipv6dstaddr="[{ipv6dstaddr}]"
   ipv6dstaddr_mask="[{ipv6dstaddr_mask}]"
   ipv6srcaddr="[{ipv6srcaddr}]"
   ipv6srcaddr_mask="[{ipv6srcaddr_mask}]"/>
   <action outputport="[{outputport}]"
   enqueueport="[{enqueueport}]"
   queue_id="[{queue_id}]"
  setmacdstaddr="[{setmacdstaddr}]" 
  setmacsrcaddr="[{setmacsrcaddr}]"
  setvlan_id="[{setvlan_id}]"
  setvlan_priority="[{setvlan_priority}]"
  setipdstaddr="[{setipdstaddr}]"
  setipsrcaddr="[{setipsrcaddr}]"
  setiptos="[{setiptos}]"
  setl4dstport_icmptype
  "[{setl4dstport_icmptype}]"
  setl4srcport_icmptype
  ="[{setl4srcport_icmptype}]"
  setipv6dstaddr="[{setipv6dstaddr}]"
  setipv6srcaddr="[{setipv6srcaddr}]"
  stripvlan="{stripvlan}"/>
 <pathinfos>
 <pathinfo in_vnode_name="{in_vnode_name}"
  in_if_name="{in_if_name}"
  out_vnode_name="{out_vnode_name}"
  out_if_name="{out_if_name}"
  status="{status}"/>
 </pathinfos>
 </controller_domain_dataflow>
 </controller_domain_dataflows>
 </dataflow>
 </dataflows>

*Important
 Square brackets ([]) indicate that multiple data elements of the same type appear.
 The multiple elements are separated by comma (,).

* JSON format
 {
 "dataflows": [
   {
   "reason": "{reason}",
   "controller_domain_dataflows": [
    {
     "controller_id": "{controller_id}",
     "controller_type": "{controller_type}",
     "flow_id": "{flow_id}",
     "createdtime": "{createdtime}",
     "idletimeout": "{idletimeout}",
     "hardtimeout": "{hardtimeout}",
     "ingress_vnode_name": "{ingress_vnode_name}",
     "ingress_if_name": "{ingress_if_name}",
     "ingress_switch_id": "{ingress_switch_id}",
     "ingress_port_name": "{ingress_port_name}",
     "ingress_logical_port_id": "{ingress_logical_por
     t_id}",
     "ingress_domain_id": "{ingress_domain_id}",
     "egress_vnode_name": "{egress_vnode_name}",
     "egress_if_name": "{egress_if_name}",
     "egress_switch_id": "{egress_switch_id}",
     "egress_port_name: ": "{egress_domain_id}",
     "egress_logical_port_id": "{egress_logical_port_
      id}",
     "egress_domain_id": "{egress_domain_id}",
     "match": {
       "inport":[
          "{inport}"
       ],
      "macdstaddr": [
          "{macdstaddr}"
       ],
      "macdstaddr_mask": [
          "{macdstaddr_mask}"
       ],
      "macsrcaddr": [
          "{macsrcaddr}"
       ],
      "macsrcaddr_mask": [
          "{macsrcaddr_mask}"
       ],
      "macethertype": [
          "{macethertype}"
       ],
      "vlan_id": [
          "{vlan_id}"
       ],
      "vlan_priority": [
          "{vlan_priority}"
       ],
      "iptos": [
          "{iptos}"
       ],
      "ipproto": [
         "{ipproto}"
       ],
      "ipdstaddr": [
         "{ipdstaddr}"
       ],
      "ipdstaddr_mask": [
         "{ipdstaddr_mask}"
       ],
      "ipsrcaddr": [
         "{ipsrcaddr}"
       ],
      "ipsrcaddr_mask": [
         "{ipsrcaddr_mask}"
       ],
      "l4dstport_icmptype": [
         "{l4dstport_icmptype}"
       ],
      "l4dstport_icmptype_mask": [
         "{l4dstport_icmptype_mask}"
       ],
      "l4srcport_icmptype": [
         "{l4srcport_icmptype}"
       ],
      "l4srcport_icmptype_mask": [
         "{l4srcport_icmptype_mask}"
       ],
      "ipv6dstaddr": [
         "{ipv6dstaddr}"
       ],
      "ipv6dstaddr_mask": [
         "{ipv6dstaddr_mask}"
       ],
      "ipv6srcaddr": [
         "{ipv6srcaddr}"
       ],
      "ipv6srcaddr_mask": [
         "{ipv6srcaddr_mask}"
       ]
     },
    "action": {
      "outputport": [
          "{outputport}"
       ],
      "enqueueport": [
          "{enqueueport}"
       ],
      "queue_id": [
          "{queue_id}"
       ],
      "setmacdstaddr": [
          "{setmacdstaddr}"
       ],
      "setmacsrcaddr": [
          "{setmacsrcaddr}"
       ],
      "setvlan_id": [
          "{setvlan_id}"
       ],
      "setvlan_priority": [
          "{setvlan_priority}"
       ],
      "setipdstaddr": [
          "{setipdstaddr}"
       ],
      "setipsrcaddr": [
          "{setipsrcaddr}"
       ],
      "setiptos": [
          "{setiptos}"
       ],
      "setl4dstport_icmptype": [
          "{setl4dstport_icmptype}"
       ],
      "setl4srcport_icmptype": [
          "{setl4srcport_icmptype}"
       ],
      "setipv6dstaddr": [
          "{setipv6dstaddr}"
       ],
      "setipv6srcaddr": [
          "{setipv6srcaddr}"
       ],
      "stripvlan": "{stripvlan}"
    },
    "pathinfos": [
     { 
      "in_vnode_name": "{in_vnode_name}",
      "in_if_name": "{in_if_name}",
      "out_vnode_name": "{out_vnode_name}",
      "out_if_name": "{out_if_name}",
      "vlink_flag": "{vlink_flag}",
      "status": "{status}"
      }
     ]
    }
   ]
  }
 ]
 }

|}

;Description of response elements (dataflows)
{|class = "wikitable"
|Element || Description
|-
|reason || Data flow traversal status.
Valid value:
• success
• exceeds_flow_limit
• exceeds_hop_limit
• dst_not_reached
• controller_disconnected
• operation_not_supported
• flow_not_found
• system_error 
|-
|controller_domain_dataflows || Controller domains data flow information.
|}

;Description of response elements (controller_domain_dataflows)
{|class = "wikitable"
|-
|Element || Description
|-
|controller_id || Controller ID.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|controller_type || Controller type.
Valid value: bypass, pfc
|-
|flow_id || Flow ID.
Valid value: Decimal number.
Valid range: 0 - UINT64_MAX
|-
|createdtime || Number of the seconds that have passed since last create.
Valid value: UNIX time (The elapsed time in seconds since
00:00:00 UTC, 1 January, 1970).
|-
|idletimeout || Idle timeout.
Valid value: Decimal number.
Valid range: 0 - UINT64_MAX
|-
|hardtimeout || Hard timeout.
Valid value: Decimal number.
Valid range: 0 - UINT64_MAX
|-
|ingress_vnode_name || Ingress virtual node name.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|ingress_if_name || Ingress virtual node Interface name.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|ingress_switch_id || Ingress Switch ID.
Valid value: Up to 255 characters.
|-
|ingress_port_name || Ingress Port name.
Valid value: Up to 31 characters.
|-
|ingress_logical_port _id || Ingress Logical Port ID.
Valid value: Up to 319 characters.
|-
|ingress_domain_id || Ingress Domain ID.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning), and the
string "(DEFAULT)".
Note: "(DEFAULT)" indicates default domain.
|-
|egress_vnode_name || Egress virtual node name.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|egress_if_name || Egress virtual node Interface name.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|egress_switch_id || Egress Switch ID.
Valid value: Up to 255 characters.
|-
|egress_port_name || Egress Port name.
Valid value: Up to 31 characters.
|-
|egress_logical_port _id || Egress Logical Port ID.
Valid value: Up to 319 characters.
|-
|egress_domain_id || Egress Domain ID.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning), and the
string "(DEFAULT)".
Note: "(DEFAULT)" indicates default domain.
|-
|match || Match conditions.
|-
|action ||Actions.
|-
|pathinfos || Path Information
|}

;Description of response elements (match)
{|class = "wikitable"
|-
|Element || Description
|-
|inport ||In port.
Valid value: Decimal number.
Valid range: 0 - UINT32_MAX
|-
|macdstaddr ||Destination
MAC address.
Valid value: Three groups of four hexadecimal digits separated
by dots (.).
Example: 0123.4567.89ab
|-
|macdstaddr_mask ||Destination MAC address mask.
Valid value: Three groups of four hexadecimal digits separated
by dots (.).
Example: 0123.4567.89ab
|-
|macsrcaddr ||Source MAC address.
Valid value: Three groups of four hexadecimal digits separated
by dots (.).
Example: 0123.4567.89ab
|-
|macsrcaddr_mask || Source MAC address mask.
Valid value: Three groups of four hexadecimal digits separated
by dots (.).
Example: 0123.4567.89ab
|-
|macethertype || Ethernet type.
Valid value: Hexadecimal number.
Valid range: 0x0000 - 0xffff
|-
|vlan_id || VLAN ID.
Valid value: Decimal number.
Valid range: 1 - 4095
|-
|vlan_priority || VLAN priority.
Valid value: Decimal number.
Valid range: 0 - 7
|-
|iptos || Type of Service field in IPv4 header or Traffci Class field in
IPv6 header.
Valid value: Hexadecimal number.
Valid range: 0x00 - 0xff
|-
|ipproto || Protocol field in the IPv4 header or Next Header field in the
IPv6 header.
Valid value: Decimal number.
Valid range: 1 - 255
|-
|ipdstaddr || Destination IP address.
Valid value: IPv4 dot-separated format.
Example: 192.168.1.1
|-
|ipdstaddr_mask || Destination IP address mask.
Valid value: IPv4 dot-separated format.
Example: 192.168.1.1
|-
|ipsrcaddr || Source IP address.
Valid value: IPv4 dot-separated format.
Example: 192.168.1.1
|-
|ipsrcaddr_mask || Source IP address mask.
Valid value: IPv4 dot-separated format.
Example: 192.168.1.1
|-
|l4dstport_icmptype || Destination Port field in TCP/UDP header or Type field in
ICMP header.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|l4dstport_icmptype _mask || Mask of the Destination Port field or Type field.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|l4srcport_icmptype ||Source port in TCP/UDP header or Type field in ICMP header.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|l4srcport_icmptype _mask ||Mask of the Source Port field or Type field.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|ipv6dstaddr || Destination IPv6 address.
Valid value: IPv6 address in RFC 2373 format.
|-
|ipv6dstaddr_mask ||Destination IPv6 address mask.
Valid value: IPv6 address in RFC 2373 format.
|-
|ipv6srcaddr ||Source IPv6 address.
Valid value: IPv6 address in RFC 2373 format.
|-
|ipv6srcaddr_mask || Source IPv6 address mask.
Valid value: IPv6 address in RFC 2373 format.
|}

;Description of response elements (action)
{|class = "wikitable"
|-
|Element || Description
|-
|outputport || Output Port.
Valid value: Decimal number.
Valid range: 0 - UINT32_MAX
|-
|enqueueport ||Enque port.
Valid value: Decimal number.
Valid range: 0 - UINT32_MAX
|-
|queue_id || Queue port.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|setmacdstaddr ||Destination MAC address.
Valid value: Three groups of four hexadecimal digits separated
by dots (.).
Example: 0123.4567.89ab
|-
|setmacsrcaddr ||Source MAC address.
Valid value: Three groups of four hexadecimal digits separated
by dots (.).
Example: 0123.4567.89ab
|-
|setvlan_id ||VLAN ID.
Valid value: Decimal number.
Valid range: 1 - 4095
|-
|setvlan_priority || VLAN priority.
Valid value: Decimal number.
Valid range: 0 - 7
|-
|setipdstaddr ||Destination IP address.
Valid value: IPv4 dot-separated format.
Example: 192.168.1.1
|-
|setipsrcaddr || Source IP address.
Valid value: IPv4 dot-separated format.
Example: 192.168.1.1
|-
|setiptos || Set Type of Service field in IPv4 header or Traffci Class field in
IPv6 header.
Valid value: Hexadecimal number.
Valid range: 0x00 - 0xff
|-
|setl4dstport_icmptype || L4 destination port.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|setl4srcport_icmptype ||L4 source port.
Valid value: Decimal number.
Valid range: 0 - 65535
|-
|setipv6dstaddr ||Destination IPv6 address.
Valid value: IPv6 address in RFC 2373 format.
|-
|setipv6srcaddr ||Source IPv6 address.
Valid value: IPv6 address in RFC 2373 format.
|-
|stripvlan ||Remove VLAN tag from the packet.
Valid value: true
|}

;Description of response elements (pathinfos)
{|class = "wikitable"
|-
|Element || Description
|-
|in_vnode_name ||In VTN node.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|in_if_name || In VTN interface.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|out_vnode_name || Out VTN node.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|out_if_name || Out VTN interface.
Valid value: Up to 31 characters including alphanumeric
characters and underscore (except at the beginning).
|-
|vlink_flag || vLink flag.
Valid value: not_exists, exists
|-
|status ||Status
Valid value: normal, drop
|}

[[Category:OpenDaylight Virtual Tenant Network]]
