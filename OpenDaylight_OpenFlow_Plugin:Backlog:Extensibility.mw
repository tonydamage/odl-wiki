= First vision =
Based on chat with Ed:

 (2014-06-04 14:32:35) eaw@cisco.com: 1)  The way I suggested with augmentations to the flowcapablemodel, OFproto model, register translator factory in OFplugin, and serializer/deserializer in OFproto
 (2014-06-04 14:32:49) eaw@cisco.com: 2)  The way you suggested, with relatively simple passthrough
 (2014-06-04 14:33:05) eaw@cisco.com: 3)  The way Brent did it, patching existing models

= Transparent pass through  =
 (2014-06-04 14:21:34) mirehak@cisco.com: example
 (2014-06-04 14:21:39) mirehak@cisco.com: custom match field
 (2014-06-04 14:22:18) mirehak@cisco.com: vendor delivers application and of-extension-bundle
 (2014-06-04 14:22:28) mirehak@cisco.com: those might be actually in one bundle
 (2014-06-04 14:22:58) mirehak@cisco.com: so app creates special match field, modeled by yang in custom bundle
 (2014-06-04 14:23:15) mirehak@cisco.com: noone understand this match except vendor code
 (2014-06-04 14:23:56) mirehak@cisco.com: now this special match goes into augmentation, again modeled by yang in this custom bundle

== Way MD-SAL -- OFJAva ==
# So we have MD-SAL model augmented by custom augmentation containing vendor message going through MD-SAL towards OFPlugin.
# Now OFPlugin need to know this augmentation in order to get to content and place it into OFJava-API model (as augmentation).
# Now the OFJAva-API model with another augmentation containing the vendor data arrives to OFJava and there corresponding serializer will be looked up and invoked. Result is binary data sent in next step by netty onto device.

== Way OFJAva -- MD-SAL ==
The way back is similar:
# OFJava invokes corresponsing vendor decoder in order to have the vendor data packed as augmentation under OFJAva-API model.
# Augmented model is delivered to OFPlugin (as notification or rpc response) and vendor data are forwarded as augmentation on MD-SAL model to MD-SAL
# MD-SAL deliveres the model to vendor app and app reads the exact data object which was created by decoder.

== Transparent forwarding model layout ==
[[File:OFPlugin_ExtensibilitySupportInOFPlugin.png|basic strategy of transparent forwarding of vendor data]]

= Dependencies =
Current MD-SAL and current OFJava wont change. All changes regarding vendor data forwarding affect OFPlugin:

*New bundles*
* of-general-extensible bundle
* vendor bundle(s): app, extensions (codecs to be registered by OFJava)

*New depencies*
* OFPlugin depends on of-general-extensible
* of-general-extensible depends on md-sal models, OFJava-API models
* vendor bundle depends on of-general-extensible (+ md-sal models, OFJava-API models) + other dependencies if required
