
= VTN Manager Implementation =

VTN Manager consists of OSGi bundles in an OpenDaylight Controller.
It provides virtual network functions for VTN Coordinator via REST API.


Any source code of VTN Manager does not exist yet, so we will develop it follwoing Simultaneous Release 2013.

== Development for the milestone 2 ==

We will develop the following features in VTN Manager by the milestone 2.

* VTN multi tenancy
* vBridge function

With the above feature, OpenDaylight Controller will have the capability to create virutal L2 network, install flow entires into OpenFlow switches, and forward packets based on OpenFlow 1.0.

=== Planned REST API ===

* VTN GET/POST/DELETE
* vBridge GET/POST/DELETE
* Interface GET/POST/DELETE
* Port map GET/POST/DELETE
** Specify a physical port associated with a vBridge interface
* Vlan map GET/POST/DELETE

=== VTN Manager behavior for vBridge ===
To realize virtual L2 netowrk, VTN Manger runs as follows.

* Create MAC Address tables for each vBridge
* Handle PacketIn events, and forward packets according to the destination MAC address
** Send PacketOut, and install flow entries into switches
* Drop packets from a port which is not provisioned to any VTN

To do so, VTN Manager uses services provided by the following OSGi bundles in OpenDaylight Controller.

In the case that existing services are not enough to VTN Manager, we may add some services to them.

* Forwarding Rule Manager
* Routing
* Container
* HostTracker
* ArpHandler
** We will add a service which change behavior of ArpHandler as follows:
*** Stop ARP Proxy
**** To keep isolation of vBridges, ARP Request pakcets form a host mapped to a vBridge must not been forwarded to hosts mapped to other vBridges
**** Therefore, VTN Manager must stop ARP Proxy of ArpHandler
*** Stop host detection
**** VTN Manager itself detects hosts
** If at least one VTN exists in a container, VTN Manager change the behavior of ArpHandler in the container using this service
