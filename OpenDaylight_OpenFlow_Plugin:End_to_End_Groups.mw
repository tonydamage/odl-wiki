
= NOTE =
Groups are NOT SUPPORTED in current (2.0.0) version of [http://www.openvswitch.org/download openvswitch]. See 
* http://openvswitch.org/releases/NEWS-2.0.0
* http://comments.gmane.org/gmane.linux.network.openvswitch.general/3251

For testing group feature please use for example [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory#Setup_CPqD_Openflow_1.3_Soft_Switch | CPQD]] virtual switch.

= Instructions =
== Learn End to End for Inventory ==
* [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]

== Build the  openflowplugin plugin distribution ==
<pre>cd openflowplugin
mvn clean install </pre>

== Run the openflow plugin distribution of controller ==
* Run the local openflowplugin distribution
<pre>cd distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh</pre>
* Give it a few seconds to come up :)

== Check inventory ==
* Run mininet with support for OF 1.3 as described in [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]
* Make sure you see the openflow:1 node come up as described in [[OpenDaylight_OpenFlow_Plugin::End_to_End_Inventory|End to End Inventory]]

== Meter Strategy ==
Current way to flush a meter to switch looks like this:
# create MD-SAL modeled flow and commit it into dataStore using two phase commit 
# FRM gets notified and invokes corresponding rpc (addMeter) on particular service provider (if suitable provider for given node registered)
# the provider (plugin in this case) transforms MD-SAL modeled meter into OF-API modeled meter
# OF-API modeled meter is then flushed into OFLibrary
# OFLibrary encodes meter into particular version of wire protocol and sends it to particular switch
# check on mininet side if meter is installed

== Push your Meter == 
* With PostMan:
** Set 
*** Content-Type: application/xml
*** Accept: application/xml
** Use URL: http://<ip-address>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/1
** PUT
** Use Body:
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<meter xmlns="urn:opendaylight:flow:inventory">
    <container-name>abcd</container-name>
    <flags>meter-burst</flags>
    <meter-band-headers>
        <meter-band-header>
            <band-burst-size>444</band-burst-size>
            <band-id>0</band-id>
            <band-rate>234</band-rate>
            <dscp-remark-burst-size>5</dscp-remark-burst-size>
            <dscp-remark-rate>12</dscp-remark-rate>
            <perc_level>1</perc_level>
            <meter-band-types>
                <flags>ofpmbt-dscp-remark</flags>
            </meter-band-types>
        </meter-band-header>
    </meter-band-headers>
    <meter-id>1</meter-id>
    <meter-name>Foo</meter-name>
</meter>
</pre>
** Note: If you want to try a different meter id, make sure the URL and the body stay in sync.  For example, if you wanted to try: meter-id 20 you'd change the URL to

http://<ip-address>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/20

but you would also need to update the  <meter-id>20</meter-id> in the body to match.

** Note: <ip-address> :Provide the IP Address of the machine on which the controller is running.


== Check for your meter on the switch ==
* See your meter on your cpqd switch:
<pre>
COMMAND: sudo dpctl tcp:127.0.0.1:6000 meter-config

SENDING:
stat_req{type="mconf", flags="0x0"{meter_id= ffffffff"}


RECEIVED:
stat_repl{type="mconf", flags="0x0", stats=[{meter= c"", flags="4", bands=[{type = dscp_remark, rate="12", burst_size="5", prec_level="1"}]}]}
</pre>


== Check for your meter in the controller config via RESTCONF ==
* See your configured flow in POSTMAN with
** URL http://<ip-address>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/1
** GET
** You should no longer need to set Accept
** Note: <ip-address> :Provide the IP Address of the machine on which the controller is running.

== Look for your meter stats in the controller operational data via RESTCONF ==
* See your operational meter stats in POSTMAN with
** URL http://<ip-address>:8080/restconfig/operational/opendaylight-inventory:nodes/node/openflow:1/meter/1
** GET
** Note: <ip-address> :Provide the IP Address of the machine on which the controller is running.

= Discovering and testing Meter Types =

Currently, the openflowplugin has a test-provider that allows you to push various meters through the system from the OSGI command line.  Once those meters have been pushed through, you can see them as examples
and then use them to see in the config what a particular meter example looks like.

== Using addMeter ==

From the
<pre>
cd openflowplugin/distribution/base/target/distributions-openflowplugin-base-0.0.1-SNAPSHOT-osgipackage/opendaylight
./run.sh
</pre>

Point your mininet at the controller as described above.

once you can see your node (probably openflow:1 if you've been following along) in the inventory, at the OSGI command line try running:
<pre>
addMeter openflow:1
</pre>
This will install a meter in the switch. You can check whether the meter is installed or not.

Once you've done that, use 
* GET
* Accept: application/xml
* URL: http://<ip-address>:8080/restconf/config/opendaylight-inventory:nodes/node/openflow:1/meter/12
** Note: <ip-address> :Provide the IP Address of the machine on which the controller is running.

Note: Before attempting to PUT a meter you have created via addMeter, please change its URL and body to, for example, use meter 1 instead of meter 2 or another Meter Id, so you don't collide.

Note: There are several test command providers and the one handling flows is '''OpenflowpluginTestCommandProvider'''. Methods, which can be use as '''commands in OSGI-console''' have prefix '_'.


= Example Meter =

Examples for XML for various Meter Types can be found  in the test-scripts bundle of the plugin code with names m1.xml, m2.xml and m3.xml.
