==Affinity endpoint==

This identifies an application endpoint, and may be one of the following. This is a location within the combined physical + virtual
network and may be a stationary location referring to a switch/port or a virtual endpoint that may move within the network as the corresponding virtual machine is moved. The endpoint is identified by an individual IP address or a set of IP addresses specified by a subnet and mask. All endpoints within a given affinity configuration are assumed to be within a single layer 2 domain.

==Affinity Address Domain==

NOTE: This functionality has not yet been implemented.

This represents a domain (i.e, set) of one or more addresses. An affinity address may not have a corresponding endpoint on the network, for example, for traffic from a set of external addresses (north-south traffic in a data center), the source IP address domain is not required to map exactly to endpoints or node connectors on the network.

Affinity address specifies one or more of the following: 

* VLAN + MAC address, or range of MAC addresses.
* Network layer address, IP address, or range of addresses, or prefix/mask representing multiple sources. 
* Transport layer address, which is the transport protocol type and port number.

==Affinity Group==

Affinity group which is an enumeration of one or more items where each item is an affinity endpoint or affinity address domain. An affinity
group may also contain other affinity groups in addition to endpoints and address domains.

==Affinity Link==

Affinity link connects one group (from group) to another (to group). It represents a set of flows that start from the source group and end in the destination group.  An affinity link has attributes (policies) attached to it that represent how these flows must be handled. An affinity link also has directionality associated with it. A bidirectional affinity link is equivalent to two unidirectional affinity links, one in each direction.

==Affinity Attribute==

An affinity attribute is assigned to an affinity link. An attribute is one of the following:
 
* '''Path affinity.''' Path affinities define the type of path required by the application. It may be one of the following types -- latency sensitive for applications that require low latency between their components. Examples include access to block storage and network connections between the application and database tier. Bandwidth sensitive applications include video or audio streaming or bulk data operations desiring high throughput. Isolated paths may be required for applications requiring dedicated paths without sharing or interference from other applications.

:* Isolation. This is an attribute that specifies that the application flow must be assigned an isolated path on the network from flows from other affinity links. While flows within the same affinity link may share one or more network links of the path, flows from different affinity links will be allocated to non-overlapping paths.

    // Isolate flows according to certain constraints. No sharing with any other traffic. 
    grouping isolate-path {
        // Average bandwidth requirement for each flow is estimated in Mbps. 
        leaf average-bandwidth-per-flow {
            type uint16;
        }
        // Peak burst bandwidth, total per affinity link.
        leaf burst-bandwidth {
            type uint16;
        }       
    }

:* Low latency path. This is an attribute that specifies that the flow is allocated lowest hopcount paths between source and destination.

    // Route through low latency path. May share with other types of traffic. 
    grouping low-latency-path {
        // Average bandwidth estimated per flow, in Mbps. 
        leaf average-bandwidth-per-flow {
            type uint16;
        }
        // Peak burst bandwidth, total per affinity link. 
        leaf burst-bandwidth {
            type uint16;
        }
    }

:* Bandwidth Optimized. Allocate a path of specified bandwidth to this application.
   
    // Optimize this path such that specified bandwidth is available to it. May share 
    // with other types of traffic. 
    grouping bandwidth-optimized-path {
        // Average bandwidth estimated per flow, in Mbps. 
        leaf average-bandwidth-per-flow {
            type uint16;
        }
        // Peak burst bandwidth, total per affinity link. 
        leaf burst-bandwidth {
            type uint16;
        }
    }

Flows from affinity links are interpreted as unicast (point to point) flows by an implementation of this API. 

The following types of affinity dictate a strict action or rule. 

* '''Access control affinity.''' This is an attribute that specifies that the application flow must either be permitted (PERMIT) or denied (DENY). 

* '''Path redirect affinity.''' This affinity link must traverse specified chain of waypoint locations, each specified by an IP address or Mac address. 

* '''Tap affinity.''' All traffic belonging to this affinity link must be mirrored to specified endpoint location. The endpoint location is carried in the affinity attribute configuration.

* '''Priority forwarding.''' All traffic belonging to this affinity link must be assigned a priority level. Setting this priority level provides differential treatment for this traffic relative to other flows on the network. One of five levels of priority must be specified (very low=0, low, normal, high, very high=5).

==Strict vs. Sensitive==

Note that the attribute may be a goal (not strict) -- latency or bandwidth sensitive, or an action (strict) -- forward to this port, tunnel to this endpoint.
