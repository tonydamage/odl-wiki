== Network Configuration ==

The goal of Network Configuration umbrella of Services is to provide complete Management Plane solutions needed in order to 
successfully install, configure and deploy various SDN based Network Services. These are generic services which
can be implemented in part or full by any South-Bound Protocol Plugin. The South-Bound plugins can be those
new network virtualization protocol plugins such as OVSDB JSON-RPC or Traditional management protocols such as SNMP
or any others in the middle. 

Due to the length and breath of deployment needs, network services and configuration requirements, the Network Configuration
SAL services are sub-divided into various logical modules which serves some specific set of configurations.

=== Bridge Domain Services ===
One of the first such sub-module is the '''sal.networkconfig.bridgedomain''' which provides Bridge Domain configuration
services. Please refer to '''IPluginInBridgeDomainConfigService''' for the supported Bridge Domain configurations
which applications can make use of without needing to worry about the actual south-bound protocol
plugin under use. A given network device can (and most likely) provide multiple south-bound protocol channels 
which will be served by the corresponding protocol-plugins such as Openflow (for Forwarding plane), 
OVSDB or SNMP or proprietary APIs such as OnePK (for management plane).

Unlike OpenFlow, most of the south-bound management protocols expect the Controller to connect to the
management channel of the Device/Node with various specific requirements (such as AAA, etcâ€¦). These connectivity
requirements are addressed by a different service named '''IConnectionManager''' which provides generic connect and
disconnect APIs to login to a device's management session.

These SAL Network Configuration services are mandatory to be designed using generic APIs in order to make sure it 
plays well with all the management related south-bound plugins. With that in mind, following are the currently 
supported Bridge Domain APIs :

# Create Bridge Domain : '''createBridgeDomain'''(Node node, String bridgeIdentifier, Map<ConfigConstants, Object> params)
# Delete Bridge Domain : '''deleteBridgeDomain'''(Node node, String bridgeIdentifier)
# Add configurations to a Bridge Domain : '''addBridgeDomainConfig'''(Node node, String bridgeIdentifier, Map<ConfigConstants, Object> params)
# Delete Bridge Domain Configuration : '''removeBridgeDomainConfig'''(Node node, String bridgeIdentifier, Map<ConfigConstants, Object> params)
# Associate a port to a Bridge Domain : '''addPort'''(Node node, String bridgeIdentifier, String portIdentifier, Map<ConfigConstants, Object> params);
# Disassociate a port from a Bridge Domain : '''deletePort'''(Node node, String bridgeIdentifier, String portIdentifier)
# Add configurations to a Node Connector / Port : '''addPortConfig'''(Node node, String bridgeIdentifier, String portIdentifier, Map<ConfigConstants, Object> params)
# Remove configurations from a Node Connector : '''removePortConfig'''(Node node, String bridgeIdentifier, String portIdentifier, Map<ConfigConstants, Object> params)

These APIs are so generic in nature that any southbound protocol that has a management plane that supports L2 configurations can make use of it.
The usage of these APIs can be found in '''networkconfig.bridgedomain.northbound''' bundle where the NorthBound APIs are used to configure Bridge Domain.
As an example, the following piece of code from '''BridgeDomainNorthbound.java''', associates a Node Connector / Port with a Bridge Domain.
It also takes in additional parameters to be configured on the port / node connector (VLAN).

       Node node = Node.fromString(nodeType, nodeId);
       Map<ConfigConstants, Object> configs = new HashMap<ConfigConstants, Object>();
       configs.put(ConfigConstants.TYPE, ConfigConstants.VLAN.name());
       configs.put(ConfigConstants.VLAN, vlan);
       Status status = null;
       try {
       status = configurationService.addPort(node, bridge, port, configs);
       if (status.getCode().equals(StatusCode.SUCCESS)) {
           return Response.status(Response.Status.CREATED).build();
       }

This addPort SAL call is directed to appropriate South-Bound protocol Plugin with the help for the Node parameter (which Identifies the most suited southbound protocol).

Example : '''OVSDB''' is a southbound protocol plugin that implements Bridge Domain configuration services & following is a sample piece of code from '''ConfigurationService.java addPort()''' function :

       InsertRequest addIntfRequest = new InsertRequest("insert", "Interface", newInterface, interfaceRow);
       Object[] params = {"Open_vSwitch", mutateBridgeRequest, addIntfRequest, addPortRequest};
       OvsdbMessage msg = new OvsdbMessage("transact", params);
       connection.sendMessage(msg);

The above code forms OVSDB message and sends a JSON RPC message towards the OVSDB-Server to associate a Port to a Bridge.
Essentially, this translates to : ovs-vsctl add-port <bridge_name> <port_name> tag=<vlan_id>.

=== More Network Configuration Services to follow ===
The Network Configuration Services can be easily extended to provide various set of Network Management Plane Services and this document
will be live and updated as an when new Services are created.
