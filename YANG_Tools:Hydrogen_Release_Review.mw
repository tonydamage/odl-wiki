==YANG Tools==
==Features==
* Parser of [http://tools.ietf.org/html/rfc6020 RFC6020]-compliant files along with a set of regression tests
* YANG Binding Specification for Java for representing YANG-modeled data, RPCs and notifications
* Revision-aware model-independent data representation of YANG-modeled data
* Maven plugin for compile-time generation of:
** interface and implementation of YANG Binding Specification for Java
** RESTCONF documentation
** WADL interface descriptions (with YANG as the DDL)
* Run-time component for mapping Java Binding Specification objects from/to the model-independent representation
* Run-time component for mapping XML documents objects from/to the model-independent representation
* Java meta-model of YANG model language
* A set of YANG extensions for improving naming of generated code
* A set of YANG models extracted from [https://tools.ietf.org/html/rfc6021 RFC6021] and [https://tools.ietf.org/html/draft-clemm-netmod-yang-network-topo-01 draft-clemm-netmod-yang-network-topo-01]

==Non-Code Aspects (user docs, examples, tutorials, articles)==
* [[YANG_Tools:Installation_Guide|Installation Guide]]
* [[YANG_Tools:User_Guide|User Guide]]
* [[YANG_Tools:Developer_Guide|Developer Guide]]
* [[YANG_Tools:YANG_to_Java_Mapping|YANG Binding for Java specification]]

==Architectural Issues==
The project provides a set of utilities and in itself does not have major architectural gaps. The binding code generator plugin is needlessly stateless which results in unnecessary burden on maintainership. Rewriting it as a three stage parse/analyze/emit compiler would reduce its complexity and improve reliability. The concepts artifact should be split into general concepts (Immutable, ListenerRegistration and similar) and YANG-specific concepts (QName et al.).

==Security Considerations==
The project does not deal with sensitive data but rather provides infrastructure pieces. It contains a component which generates executable code at runtime, so a bug in its generation could potentially be exploited to inject Java bytecode into the JVM.

==Quality Assurance (test coverage, etc)==
Unit test coverage is tracked in [https://sonar.opendaylight.org/dashboard/index/4212 Sonar]. The project is used extensively by the Controller project (MD-SAL and Configuration subsystem), BGPCEP, openflowjava and others.

==End-of-life (API/Features EOLed in Release)==

No features EOLed as it is the first release.

==Bugzilla (summary of bug situation)==
Bugzilla lists a total of 13 issues, with the following break-down:
* binding specification deficiencies: #138, #157, #169, #210
* run-time codec bugs: #274, #350, #364, #376
* compile-time codegen bugs: #183, #295
* maven plugin improvements: #114, #175
* diagnostics improvements: #274

==Standards (summary of standard compliance)==
The delivered parser implements [http://tools.ietf.org/html/rfc6020 RFC6020]

==Schedule (initial schedule and changes over the release cycle)==
The project roughly followed its release plan, but failed to deliver one of its deliverables, the RFC6110 YANG->RelaxNG generator and its runtime validator.
