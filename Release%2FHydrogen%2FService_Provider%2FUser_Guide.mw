==Hydrogen Service Provider Edition User Guide==

The user guide should be the home for documentation on: Overview and Architecture, Configuration, Tutorial / How-To, Web/GUI, CLI, and Console.  It should link out to: Installation, APIs, and Release Notes

===Overview and Architecture===
The Service Provider edition of OpenDaylight is designed for network operator use. It does not include OVSDB, VTN or DOVE, but does include SNMP, BGP-LS, PCEP, and LISP southbound and the Affinity Service and the LISP Service northbound. The following diagram shows OpenDaylight Service Provider edition architecture in details:

[[Image:serv-arch.png|951px]]

===Installation Guide (link)===
The installation instructions for Service Provider Edition can be found [https://wiki.opendaylight.org/view/Release/Hydrogen/Service_Provider/Installation_Guide here].

===Installation Troubleshooting (link)===

===Configuration===
* In order to configure OpenDaylight Virtualization edition using OpenFlow 1.3 plugin, start Opendaylight Controller with ''-of13'' option. Otherwise, it will use the OpenFlow 1.0. 

* To start mininet for OF13 simulation for example do: ''mininet> sudo mn --controller=remote,ip=a.b.c.d --topo tree,2 --switch ovsk,protocols=OpenFlow13'' 

* To start mininet for OF10 simulation for example do:  ''mininet> sudo mn --controller=remote,ip=10.125.136.52 --topo tree,2''

===Tutorial / How-To===

===Web / Graphical Interface===

===Command Line Interface===

===Console Interface===

===Programmatic Interface(s) (link)===

===Release Notes (link)===
The release notes for the Service Provider Edition can be found [https://wiki.opendaylight.org/view/Release/Hydrogen/Service_Provider/Release_Notes here].

==SNMP4SDN==

===Overview and Architecture===
* Current SDN technology is usually assumed to be based on network infrastructures using OpenFlow switches. Actually, SDN is not limited to OpenFlow, for example OpenDaylight SAL can support multiple southbound protocols. To fulfill the scope of underlying switches supported in OpenDaylight, Ethernet switches should also be considered. 

* Commodity Ethernet switches have the advantage of low price and is programmable to some extent (i.e. using CLI and SNMP to modify the ACL, MAC table, forwarding table, etc). In an SDN built on commodity Ethernet switches, the upper layer applications could be responsible for making all the forwarding decisions for each switch, and the switches execute data plane forwarding as assigned. Therefore, we believe that commodity Ethernet switch has its advantage and warrants a position in SDN technology development. 

* Off-the-shelf commodity Ethernet switches are commonly allowed to be configured by SNMP, and the Ethernet switch can actively report its status to the administrative computer (i.e. OpenDaylight controller) using SNMP trap. Therefore, we propose an SNMP southbound plugin to control underlying devices supporting SNMP using off-the-shelf commodity Ethernet switch. In addition to SNMP support, this plugin will provide capabilities to manage configurations that can only be accessed via CLI, e.g. ACL, disabling flooding, etc., since such configurations are necessary for using Ethernet switches for SDN. Therefore, there will be three phases in this project, as follows. (1) Creating an SNMP SouthBound Plugin: to configure Ethernet switches via SNMP. (2) The plugin configures Ethernet switches via CLI, for settings that SNMP cannot access. (3) SAL extension: for (1) and (2) we will contribute extensions to the SAL configuration APIs to provide additional API to support SNMP and CLI usage as specified above.

* The below diagram shows the described components:

<br>
[[Image:SNMP4SDN_Architecture.jpg|800px]]
<br>
<br>

* An overview of the project can be found [https://wiki.opendaylight.org/view/SNMP4SDN:Architecture_and_Design here].

===Installation Guide (link)===
Guide to installation and testing can be found [https://wiki.opendaylight.org/view/SNMP4SDN:Installation_guide here].

===Installation Troubleshooting (link)===


===Configuration===


===Tutorial / How-To===

===Web / Graphical Interface===


===Command Line Interface===


===Console Interface===


===Programmatic Interface(s) (link)===
Proposed SAL API for the SNMP SouthBound Plugin can be found [https://wiki.opendaylight.org/view/File:SAL_API_for_SNMP_SouthBound_Plugin.pdf here].

===Help===
Sign up for [https://lists.opendaylight.org/mailman/listinfo/snmp4sdn-dev snmp4sdn-dev] mailing list.

==BGP-LS PCEP==

===Overview and Architecture===
* BGP/PCEP protocol library is a project aiming to provide Java-based implementation of [https://tools.ietf.org/html/rfc4271 Border Gateway Protocol] and [https://tools.ietf.org/html/rfc5440 Path Computation Element Protocol].

* By enabling the the Controller to utilize more standardized ways of talking to the underlying network, it can be deployed in a wider variety of scenarios.

* BGP is the core protocol holding together the Internet in its current shape and form, which is extensible enough to provide functions well outside of its original purpose. With the advent of [https://tools.ietf.org/html/draft-ietf-idr-ls-distribution-03 Link State and TE Information draft], BGP can be used to safely distribute IGP information to entities outside of usual IGP peering. The Controller is a prime example of a network entity which can benefit from this information, as it can directly use it as a source of topology information.

* PCEP is a protocol originally designed for offloading optimal path computation in MPLS-TE networks from the head-end router to a dedicated accelerator (called Path Computation Element, or PCE) residing on the control plane. While the original specification called for a router-driven operation, the recently adopted [https://tools.ietf.org/html/draft-ietf-pce-stateful-pce-04 Stateful PCE extension] aligns the protocol for use by the Controller.

* The overview of the project can be found [https://wiki.opendaylight.org/view/BGP_LS_PCEP:Main here].

===Installation Guide (link)===

===Installation Troubleshooting (link)===


===Configuration===
Information for some configuration can be found [https://wiki.opendaylight.org/view/BGP_LS_PCEP:User_Guide here].

===Tutorial / How-To===
* The developer guide for the project can be found [https://wiki.opendaylight.org/view/BGP_LS_PCEP:Developer_Guide here].

===Web / Graphical Interface===


===Command Line Interface===


===Console Interface===


===Programmatic Interface(s) (link)===


===Help===
Sign up for [https://lists.opendaylight.org/mailman/listinfo/bgpcep-dev bgpcep-dev] mailing list.

==Lisp Flow Mapping==

===Overview and Architecture===
* Locator ID Separation Protocol ([http://tools.ietf.org/search/rfc6830 LISP]) is a technology that provides a flexible map-and-encap framework that can be used for overlay network applications, such as data center network virtualization, and Network Function Virtualization (NFV). LISP introduces two name spaces: Endpoint Identifiers (EIDs), and Routing Locators (RLOCs). In a virtualization environment, EIDs can be viewed as virtual address space and RLOCs can be viewed as physical network address space.

* The LISP framework decouples network control plane from the forwarding plane by providing: (1) a data plane that specifies how the virtualized network addresses are encapsulated in addresses from the underlying physical network, and (2) a control plane that stores the mapping of the virtual-to-physical address spaces and the associated forwarding policies, and serves this information to the data plane on demand. Network programmability is achieved by programming forwarding policies such as transparent mobility, service chaining, and traffic engineering in the mapping system, where the data plane elements can fetch these policies on demand as new flows arrive. In this presentation we explain how the LISP Flow Mapping project in ODL can be used to enable advanced SDN and NFV use cases.

* The Lisp Flow Mapping service provides [http://tools.ietf.org/search/rfc6830 LISP] Mapping System services. This includes LISP Map-Server and LISP Map-Resolver services, to store and serve the ''mapping data'' to data plane nodes as well as to OpenDaylight applications. Mapping data can include mapping of virtual addresses to physical network address where the virtual nodes are reachable/hosted at. Mapping data can also include a variety of routing policies including traffic engineering and load balancing. To leverage this service, a northbound API allows OpenDaylight applications and services to define the mappings and policies in the LISP Mapping Service. This project also includes a southbound LISP plugin that enables LISP dataplane devices to interact with the OpenDaylight via the LISP protocol.

* The below diagram shows the described components:

<br>
[[Image:LISP-ODL-02.jpg|800px]]
<br>
<br>

* An overview of the project can be found [https://wiki.opendaylight.org/view/Project_Proposals:LispMappingService here].

===Installation Guide (link)===


===Installation Troubleshooting (link)===


===Configuration===


===Tutorial / How-To===

===Web / Graphical Interface===


===Command Line Interface===


===Console Interface===


===Programmatic Interface(s) (link)===
* Lisp Flow Mapping API can be found [https://wiki.opendaylight.org/view/OpenDaylight_Lisp_Flow_Mapping:API here].

===Help===
Sign up for [https://lists.opendaylight.org/mailman/listinfo/lispflowmapping-dev lispflowmapping-dev] mailing list.
