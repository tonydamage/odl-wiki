This user guide contains examples of controller configuration using yuma toolkit.

=Configuring thread pools with yangcli-pro=
==Requirements:==
yangcli-pro version 13.04-9.2 or later

==Connecting to plaintext TCP socket and ssh==
Currently TCP and SSH is exposed by the controller. The network interface and port are configured in configuration/config.ini . Current configuration of netconf is:

<source>
# Netconf startup configuration
netconf.tcp.address=0.0.0.0
netconf.tcp.port=8383

netconf.ssh.address=0.0.0.0
netconf.ssh.port=1830
</source>

To connect the yangcli-pro client, use following syntax:
<source>
yangcli-pro --user=a --password=a --transport=tcp --ncport=8383 --server=localhost
</source>
Authentication in this case is ignored. 

Alternatively, if you wish to use ssh use syntax : 

<source>
yangcli-pro --user=netconf --password=netconf --transport=ssh --ncport=1830 --server=localhost
</source>

For better debugging please include following arguments:

<source>
 --log=/tmp/yuma.log --log-level=debug4
</source>
Note that when log file is set, output will not appear on stdout.

==Configuring threadfactory==
'''threadfactory''' is a service interface that can be plugged into threadpools, defined in config-threadpool-api 
(see yang file [https://git.opendaylight.org/gerrit/gitweb?p=controller.git;a=blob;f=opendaylight/config/threadpool-config-api/src/main/yang/threadpool.yang;h=8f3064822be319dfee6fd7c7061c8bee14db268f;hb=refs/heads/master here]). 

The implementation we are going to use is called '''threadfactory-naming'''. This implementation will set a name for each thread created using configurable prefix and auto incremented index. Yang file can be found [https://git.opendaylight.org/gerrit/gitweb?p=controller.git;a=blob;f=opendaylight/config/threadpool-config-impl/src/main/yang/threadpool-impl.yang;h=a2366f285a0c0b8682b1093f18fb5ee184c9cde3;hb=refs/heads/master here].

* Launch yangcli-pro and connect to the server. 
* enter '''get-config source=running''' to see current configuration. Example output:
<source>
rpc-reply {
  data {
    modules {
      module  binding-broker-singleton {
        type binding-impl:binding-broker-impl-singleton
        name binding-broker-singleton
      }
    }
    services {
      service  md-sal-binding:binding-broker-osgi-registry {
        type md-sal-binding:binding-broker-osgi-registry
        instance  ref_binding-broker-singleton {
          name ref_binding-broker-singleton
          provider /modules/module[type='binding-broker-impl-singleton'][name='binding-broker-singleton']
        }
      }
    }
  }
}
</source>
* enter '''merge /modules/module'''
* you will be asked to enter string value for leaf <name>. This is name of the config module. Enter '''threadfactory-bgp'''
* next set identityref for leaf <type>. You can press Tab to see a list of available module names. Enter '''threadfactory-naming'''
* you will be then asked to choose case statement. Example output:
<source>
  1: case netty-threadgroup-fixed:
       leaf thread-count
  2: case netty-hashed-wheel-timer:
       leaf tick-duration
       leaf ticks-per-wheel
       container thread-factory
  3: case async-eventbus:
       container threadpool
  4: case threadfactory-naming:
       leaf name-prefix
  5: case threadpool-fixed:
       leaf max-thread-count
       container threadFactory
  6: case threadpool-flexible:
       leaf max-thread-count
       leaf minThreadCount
       leaf keepAliveMillis
       container threadFactory
  7: case threadpool-scheduled:
       leaf max-thread-count
       container threadFactory
  8: case logback:
       list file-appenders
       list rolling-appenders
       list console-appenders
       list loggers
</source>
In this case, we choose 4.
* Next fill string value for leaf <name-prefix>. Enter '''bgp'''
You should get an OK response from the server.
* Optionally issue '''get-config source=candidate''' to verify the change.
* Issue '''commit'''
* Issue '''get-config source=running'''. Example output:
<source>
rpc-reply {
  data {
    modules {
      module  binding-broker-singleton {
        type binding-impl:binding-broker-impl-singleton
        name binding-broker-singleton
      }
      module  threadfactory-bgp {
        type th-java:threadfactory-naming
        name threadfactory-bgp
        name-prefix bgp
      }
    }
    services {
      service  th:threadfactory {
        type th:threadfactory
        instance  ref_threadfactory-bgp {
          name ref_threadfactory-bgp
          provider /modules/module[type='threadfactory-naming'][name='threadfactory-bgp']
        }
      }
      service  md-sal-binding:binding-broker-osgi-registry {
        type md-sal-binding:binding-broker-osgi-registry
        instance  ref_binding-broker-singleton {
          name ref_binding-broker-singleton
          provider /modules/module[type='binding-broker-impl-singleton'][name='binding-broker-singleton']
        }
      }
    }
  }
}
</source>
==Configuring fixed threadpool==
Service interface '''threadpool''' is defined in config-threadpool-api. Implementation we will use is called '''threadpool-fixed''' that is defined in config-threadpool-impl (see previous chapter). This implementation creates a threadpool of fixed size. There are two mandatory attributes: size and dependency on a threadfactory.
* Issue '''get-config source=running'''. As you can see in last step of configuring threadfactory, /services/service node associated with it has instance name '''ref_threadfactory-bgp'''.
* Issue '''merge /modules/module'''
* Enter name '''bgp-threadpool'''
* Enter type '''threadpool-fixed'''
* Select appropriate case statement
* Enter value for leaf <max-thread-count>: '''100'''
* Enter '''threadfactory''' for attribute threadfactory/type. This is reference to /services/service/type, in other words, service interface.
* Enter '''ref_threadfactory-bgp'''
Server should reply with OK message.
* Issue commit
* Issue '''get-config source=running'''
Example output:
<source>
rpc-reply {
  data {
    modules {
      module  binding-broker-singleton {
        type binding-impl:binding-broker-impl-singleton
        name binding-broker-singleton
      }
      module  bgp-threadpool {
        type th-java:threadpool-fixed
        name bgp-threadpool
        threadFactory {
          type th:threadfactory
          name ref_threadfactory-bgp
        }
        max-thread-count 100
      }
      module  threadfactory-bgp {
        type th-java:threadfactory-naming
        name threadfactory-bgp
        name-prefix bgp
      }
    }
    services {
      service  th:threadpool {
        type th:threadpool
        instance  ref_bgp-threadpool {
          name ref_bgp-threadpool
          provider /modules/module[type='threadpool-fixed'][name='bgp-threadpool']
        }
      }
      service  th:threadfactory {
        type th:threadfactory
        instance  ref_threadfactory-bgp {
          name ref_threadfactory-bgp
          provider /modules/module[type='threadfactory-naming'][name='threadfactory-bgp']
        }
      }
      service  md-sal-binding:binding-broker-osgi-registry {
        type md-sal-binding:binding-broker-osgi-registry
        instance  ref_binding-broker-singleton {
          name ref_binding-broker-singleton
          provider /modules/module[type='binding-broker-impl-singleton'][name='binding-broker-singleton']
        }
      }
    }
  }
}
</source>

To see actual netconf messages, use the logging arguments described at top of this page.
To validate that a threadpool has been created, tool like VisualVM can be used.

[[File:Configure-threadpools-visualvm.png]]
