=Overview and Usecases=
1. Switches can be connected to 1 or more controllers.

2. From the plugin side, for a given switch only one controller should act as a Master and other cluster members should be the Slave

3. The changes should work for a single controller setup as well.

4. Consensus should be maintained between the cluster members and failover should be supported

5. State, if any, should get replicated across the cluster members, for a switch

6. Role change should be supported via REST and Command line

7. Support for a Slave controller to receive Async messages from switch should be implemented

8. Controller connected by the switch should be able to join the existing cluster.

=Design=



In a multicontroller scenario, the clustering of openflowplugin can behave as follows:

1. Each controller will have an Arbiter component which would ensure that one of the controllers 
serves as the Master for a switch

2. Arbiter component will be built over Akka framework.  Each switch will have an Akka Arbiter actor

3. Actors within the Akka cluster will maintain consensus using Raft algorithm and one of the actors will become a leader for a switch

4. The Actor's state (primarily generationId, master/slave info) will be replicated using Gossip, as eventual consistency is acceptable

5. Serialization between the Akka actors will be done using Protocol Buffers.

6. When a switch connects to a controller, on notification, an actor will be created for that switch.
The Peer map (controller to switches) will get replicated between the controller nodes using Gossip.
The Arbiter actor for that switch will initiate a role change on the switch with the role=SLAVE. 
Rpcs, that are initially registered on handshake, will be deregistered on all controller nodes for that switch.

7. The Akka Arbiter actors (based on peer map) would initiate election using Raft and then the arbiter(or rather actor) which gets elected as Leader will initiate a role change RPC with role=MASTER. Rpcs will get registered again for that switch.

8. Role change notifications can be raised on master/slave role changes for other clustering services to act upon.
