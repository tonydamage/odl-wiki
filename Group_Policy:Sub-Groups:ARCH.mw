== Architecture Sub-Group ==

'''Leader:'''
* Daljeet Singh <singhda@us.ibm.com>
* Mickey Spiegel <emspiege@us.ibm.com>


'''Members:'''

* Mike Dvorkin <dvorkin@noironetworks.com>
* Keith Burns <alagalah@noironetworks.com>
* Dan Conde <dconde@midokura.com>
* Ryan Moats <rmoats@us.ibm.com>
* Uyen Chau <uyen.chau@hp.com>
* Rob Adams <adams@noironetworks.com>
* Allyn Romanow <allyn@cisco.com>
* Jan Medved <jmedved@cisco.com>
* Rex Pugh <rex.pugh@hp.com>
* Chris Price <christopher.price@ericsson.com>

== Charter/Purpose ==

== Team Meeting ==
'''Time and Location:'''

* 11am Pacific, Friday.
* IRC: #opendaylight-group-policy
* Join and email [mailto:groupbasedpolicy-dev@lists.opendaylight.org Group Policy Dev] for a Calendar invite.
* Hangout: [https://plus.google.com/hangouts/_/calendar/ZHZvcmtpbkBub2lyb25ldHdvcmtzLmNvbQ.bps9id27mhd0pnqqljgjkckoqk?authuser=1 hangout]

'''Agenda: Fri May 30'''

* Open discussion

== Information From Past Meetings ==

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Fri June 13'''
<div class="mw-collapsible-content">

https://meetings.opendaylight.org/opendaylight-group-policy/2014/odl_gbp_arch/opendaylight-group-policy-odl_gbp_arch.2014-06-13-17.59.html
</div>
</div>
<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Fri May 23'''
<div class="mw-collapsible-content">

Agenda

* Tenant discussion from opendaylight mailing lists: Any specific implications or requirements with regard to group-based policy?
* NB API discussion: REST vs RESTConf, Neutron Group Policy plugin, any other language bindings required?
* Subscription: Does MD-SAL support subscription based on match of child object or grandchild object? For example, all contracts with quality foo directly or quality foo under some target.

* Action items

** Mickey/Rob by May23 to build up a list of specific parts of the UML model that the MD-SAL has to support subscription services for

[http://meetings.opendaylight.org/opendaylight-group-policy/2014/odl_gbp_arch/opendaylight-group-policy-odl_gbp_arch.2014-05-23-18.06.html Minutes]

</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Fri May 9'''
<div class="mw-collapsible-content">

Agenda

* Policy repository/subscription responsibilities versus renderer responsibilities
* Continue discussion of subscription use cases and flows


* Action items

** we need to handoff to DATASTORE subgroup to have more detailed requirements. jmedved
** to modeling group to deal with directionality.
** is for readams and dvorkinista

* [http://meetings.opendaylight.org/opendaylight-group-policy/2014/gbp_arch_may9/opendaylight-group-policy-gbp_arch_may9.2014-05-09-18.22.html Minutes]
* [https://cisco.webex.com/ciscosales/lsr.php?RCID=f6d15e83382b4fc291f5f52c04370888 WebEx recording]

</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Friday May 2'''
<div class="mw-collapsible-content">
Agenda: 
<div class="mw-collapsible-content">

* Subscription: impact of policy models and renderers, leading to definition of renderer common code (further material to be provided on the morning of May 2)
* Purpose of Data Services Engine (DSE) (note: just discussing what in this meeting, how will be discussed later)

'''Impact of Policy Models on Subscription'''<br />
The intent is that most of the discussion at this meeting will be about subscription, in particular the impact of the proposed policy models.
This should help determine the content of the Renderer Common block from the [https://docs.google.com/drawings/d/1S0TJ_roOijBaWwFiIlvr7s7IAdshA4xznKtRHpHs-CU/edit?usp=sharing architecture diagram] introduced at yesterday's status meeting.

Many relationships in the policy model are parent-child. MD-SAL subscription directly addresses these relationships through the notion of subscription to a subtree.
Two examples:
# Subscription to the subtree under a particular contract will return all of the clauses, subjects, rules, classifier scopes, actions, targets, and qualities under that contract.
# Subscription to the subtree under a particular endpoint group will return all of the selection relators, quality matchers, capabilities, conditions, and roles under that endpoint group.

Many relationships in the policy model are not parent-child, primarily direct and indirect references. This includes the relationships between:
# endpoint group and contract through selection relators
# clause and subject
# classifier scope and classifier
# endpoint group or endpoint and score
# endpoint group or endpoint and circumstance
# The relationship between endpoint group and network domain
# The relationship between subnet and forwarding context
# The relationship between L2 flooding domain context and L2 broadcast domain context
# The relationship between L2 context and L3 context

Which of these relationships do renderers need to follow from the point of view of subscription?<br />
Are the mechanisms to follow these relationships and subscribe to corresponding subtrees the responsibility of the Renderer Common block?<br />
What do you subscribe to in order to catch new subtrees coming into scope? For example, a new contract is defined which comes into the scope of a selection relator for a particular endpoint group.<br />

The impact of inheritance on subscription also needs to be investigated.

'''Subscription Requirements of Renderers'''<br />
In terms of what kinds of subscription renderers require, there seem to be two extreme cases:
* If there is a centralized, stateful, all knowing renderer that keeps its own models of all policy-related things, then it just needs to subscribe to all policy-related subtrees. Any time a new or modified policy object comes down, the impact on relationships to other policy objects is captured through that renderer's specific models.
* A relatively stateless renderer that simply provides model transformations between policy models and the models for southbound protocol plugins, for example a native renderer to OpFlex. The renderer subscribes to policy objects and classes on behalf of devices below, only keeping track of which subscriptions are on behalf of which devices. The renderer relies on MD-SAL subscription to drive down new and modified policy objects according to its subscriptions. Any subscription chain of interest to any device below must be supported through the combination of the renderer and MD-SAL subscription / policy repository.

In reality there will probably need to be some mix of behaviors between these two extreme cases.

Somewhat related to this is the distinction between proactive and reactive subscription to policy objects. Proactive and reactive are not overarching concepts, but need to be considered in the context of particular relationships in the policy model. Each renderer can implement its own combination of proactive and reactive behaviors, requiring subscription chains following different relationships between policy objects as listed above. Some examples:
# A virtual switch on a server is likely to pull policies relating to endpoint groups in a reactive manner, when the first endpoint appears on that virtual switch belonging to a particular endpoint group. Otherwise all virtual switches pull down all endpoint groups, which is not scalable.
# Should that virtual switch pull down all contracts provided by that endpoint group, before it knows who that endpoint communicates with?
# Should that virtual switch pull down all contracts consumed by that endpoint group, before it knows who that endpoint communicates with?
# Should that virtual switch pull down all endpoint groups consuming the contracts that this endpoint group provides, in order to resolve clauses, before it knows who that endpoint communicates with?
# Should that virtual switch pull down all endpoints in the endpoint groups consuming the contracts that this endpoint group provides? According to the current model, the relationship between endpoint and endpoint group is unidirectional, so this is not supported.

Note that even with reactive behavior, subscription is necessary. New policy objects can come into scope long after subscription is triggered.
</div>
[https://meetings.opendaylight.org/opendaylight-group-policy/2014/arch/opendaylight-group-policy-arch.2014-05-02-18.02.html Minutes]

</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Friday April 25'''
<div class="mw-collapsible-content">

Agenda

Primary Goals
* Provide a clear picture of the Group-Based Policy Components where MD-SAL plays a significant role, from the point of view of messaging/routing. The conversation will probably touch on the data store aspects to some extent since this is related to messaging/routing, but we should attempt to focus primarily on messaging/routing.
* Describe the high-level flow between these Group-Based Policy Components.

There is likely to be a fair amount of whiteboarding going on, so for those in the South Bay area, you might prefer to attend the meeting in person at the Noiro Networks Sunnyvale office.

'''Current Architecture (Pre-MD-SAL) Configuration Flow'''
* OpenStack Group-Based Policy Plugin
* RESTCONF NB API
* Contract Composer/Policy Repository Endpoint Registry
* Subscription Interface
* Renderer (one of Native/OpFlex, ACI, OpenDOVE, OVSDB Network Virtualization, OpenFlow, etc)

'''Current Architecture (Pre-MD-SAL) Operational Flow'''

Events and status flow back up from the Renderer to the Enforcement Exception Database and Operational State components, which will then have northbound interactions with users

'''High-Level Flow Steps'''
# NB API to Policy Repository and Endpoint Registry
# Subscription Interface between Renderers and Policy Repository
# Events and status from Renderers back up to Enforcement Exception Database and Operational State
# Enforcement Exception Database and Operational State up to users

For each of these steps, we need to begin to gather requirements on MD-SAL messaging/routing.

For example, for step 2, in case of a native renderer, there are likely to be devices below that need everything related to a particular endpoint group.
How does subscription grab all the contracts provided by that endpoint group, all the contracts consumed by that endpoint group, and everything underneath?
If some contract is added and that endpoint group provides that contract, anything that subscribed to that endpoint group needs to get that contract in an event-driven manner.
Whether that happens directly, or something notifies it that a contract came into scope and then it subscribes to that contract, we need to figure that out.

* From Dave Lenrow:
* Service chaining for NFV and similar using policy (previously presented proposals to ODL TWS for doing this with Affinity) and wanted to discuss how we plan to support this in GBP

Minutes

* [https://meetings.opendaylight.org/opendaylight-group-policy/2014/policyarch_mickey_s_notes/opendaylight-group-policy-policyarch_mickey_s_notes.2014-04-26-14.49.html Fri Apr25]
</div>
</div>

<div class="toccolours mw-collapsible mw-collapsed" style="width:800px">
'''Friday April 18'''
<div class="mw-collapsible-content">
[http://meetings.opendaylight.org/opendaylight-group-policy/2014/opendaylight-group-policy.2014-04-18-18.02.html Minutes]
</div>
</div>
