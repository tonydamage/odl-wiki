= Introduction =

'''git-review''' is a command-line tool for Git / Gerrit. It makes it easier to configure your git clone, to submit a change or to fetch an existing one.

The upstream project is led by Openstack. Not to be confused with the unrelated Facebook project.

= Installation = 

To install git review, please see the instructions [http://www.mediawiki.org/wiki/Gerrit/git-review#Installation here]

= Workflow =

== Initial Setup ==

Clone your git repository, and in the root directory enter the following

 git review -s

This will set up your connection to Gerrit

== Submitting Patches ==

Once you've added and committed your changes, you can use git-review to publish to Gerrit

 git review

Git-review will rebase your changes against the master branch in Gerrit before pushing. It will also notify you of merge conflicts so you can manually resolve them. You can disable the rebase by using the ''-R'' or ''--no-rebase'' flags.

=== Adding a topic ===

By default, the Gerrit topic will be the name of your local branch. You can change this using the ''-t'' or ''--topic'' flags.

 git review -t topic

=== Pushing to a feature branch ===

To push to a branch other than master, just add the branch name.

 git review topic/schema
 git review stable/hydrogen

=== Pushing a draft ===

Pushing to drafts is easy:

 git review -D

or

 git review --draft

=== Adding a dependency ===

To make your commit dependent upon another change...

 # 
 git review -d 6150
 # Create a new branch called foo
 git checkout -b foo
 git commit 
 git review

=== Updating a Patch ===

Assuming you already have the local branch with your patch in, simply make your changes...

 git commit --amend
 git review

Alternatively you can checkout a patch to review use the '''-d''' flag followed by the change number in Gerrit

 git review -d 6150

Make your changes and resubmit to Gerrit.

 git commit --amend
 git review -t <original-topic> -f

''-f'' will delete the local branch and checkout the master branch.

== Reviewing Patches ==

If you are downloading code to make changes or test functionality you can use the you can do so as follows:

 git review -d 6150
 git commit --amend
 git review -t <original-topic> -f

If you wish to diff between two patch sets you can do so using git-review

 git review -m 6150,3

Will diff between Patch Set 3 of change 6150 and the latest Patch Set.

= Further Reading =

The [http://www.mediawiki.org/wiki/Gerrit/git-review#Submitting_changes_with_git-review git-review wiki page] is a great resource.

= Appendix A: Why Gerrit Topics are Awesome! =

Topics can be used as a search criteria in Gerrit by typing '''topic:foo'''.
This allows commits that are part of a feature to be easily tracked.
