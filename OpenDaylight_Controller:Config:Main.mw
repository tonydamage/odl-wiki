= Configuration subsystem = 

= Terminology =
'''Module''' is a compact part of a system, whose configuration is managed by the configuration subsystem.<br />
'''Module factory''' is important for creating module instances. Module factories are uniquely identified by name.<br />
'''Service''' represents public API, which is used to access module instances (similar to interface in Java). Any module can implement or provide multiple services.<br />
'''Configuration''' application state represented by modules definition, properties and relations among them.

= Motivation =
Common way for application configuration is usage of configuration files (i.e. xml or properties files). However they are easy to use for small scale applications, they offer only limited possibilities in case of fast growing and multi-module applications. Static config files become vast, non-transparent and inconsistent. For highly dynamic and long living environments is proper configuration essential requirement. The OSGi framework, provides configuration service (Config Admin), allows runtime module configuration, but still lack of validation process - new module configuration can negatively affect other modules, also does not solve problems of change's atomicity.

= Configuration process =
[[OpenDaylight Controller:Config:Configuration|Configuration]]

= YANG to Java code generator =
[[OpenDaylight Controller:Config:Java Code Generator|Java code generator]]

= Examples =
* [[OpenDaylight Controller:Config:Examples:Threadpool:Yuma|Example configuration of thread pools using yuma]]
* [[OpenDaylight Controller:Config:Examples|Examples]]

= FAQ =
[[OpenDaylight Controller:Config:FAQ|Frequently asked questions]]
