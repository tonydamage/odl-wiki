= OpenDove's Data Model =

OpenDove has an L3 view in that we define virtual networks (collections of endpoints) grouped into administrative groups called domains
we also define IPv4 subnets, and in OpenDove the mapping between network and subnet is many to many. 

Further, OpenDove allows traffic between endpoints within a virtual network, but traffic between endpoints on separate virtual networks is denied *unless* a OpenDove policy has been configured to allow the traffic to flow

Lastly, there are three objects related to the oDGW:
# Each oDGW has an external facing IPv4 address
# When a virtual network is attached to a particular oDGW, an SNAT pool object is created for that network and oDGW pair to support sNAT
# Finnaly, for dNAT OpenDove uses a forward rule object

= Mapping from Neutron Objects =

== Tenants to Domains ==

This is implicit because the OpenStack tenant api isn't part of Neutron and so there is no explicit creation of tenants that the ODL Neutron Service receives.

Instead, the mapping is handled implicitly in that when a network create operation is received, if necessary, an OpenDove domain is created for the OpenStack tenant that is referred to by the Network create operation.

== Networks ==

For Neutron Networks, the mapping is pretty straightforward for the majority of cases.
However, since the semantics of network are slightly different, that leads to some interesting corner cases.

First, in OpenStack, a network is an L2 broadcast domain, while in OpenDove we have a bit more freedom in grouping endpoints.  The other major semantic is that Neutron includes the concept of a shared network while OpenDove doesn't.  On the other hand, OpenDove supports the concept of a shared subnet, while Neutron doesn't (this is discussed more below).

There are three different types of networks that Neutron can create and look at each of them:

=== Dedicated Network ===
Maps directly to an OpenDove Network

=== External Network ===
For a Neutron network that is decorated as "router:external" it represents a network outside the overlay and so no OpenDove network is created. Rather, network information is held for configuring oDGWs later on in the mapping process.

=== Shared Network === 

The mapping of shared Neutron networks is controlled by the OpenDoveNeutronControlBlock support object.  This includes a parameter for controlling "domain separation".

If this parameter is false (i.e. if domains are not being separated), then there is a special "shared domain" and "shared network" created and the neutron network is mapped to that.

If domains are being separated (i.e. that parameter is true), then OpenDove uses delayed binding to only create the domain/network/subnet when a port request is received for a tenant on that shared network as that operations is essentially a commitment to use the resources provided by the shared network. 

== Subnets ==

The main difference between Neutron subnets and OpenDove subnets is that in Neutron,
the mapping between subnet and network is many-to-one (within a tenant), while in OpenDove, it is many-to-many.  So for the Hydrogen release, that  many-to-one mapping in maintained via the OpenDove mapping. In Helium, if/when there is an ODL CLI, this will be revisited.

In addition, as mentioned above, in OpenDove we have the concepts of both
dedicated and shared subnets.  The difference between the two concepts is that a dedicated subnet is only used by the overlay while a shared subnet is used by both
the overlay and the underlay.  This lets us approximate the concept of the shared Neutron network by using a shared subnet when mapping the Neutron subnet associated with a shared Neutron network. It should be noted that this is an approximation as the semantics are different.

Lastly, for a subnet on a router:external network, no OpenDove subnet object is created, but rather the subnet information is cached for use later.

== Ports ==

Ports are a little tricky in that the oDMC itself doesn't track endpoints or ports, but leaves that to other components of the OpenDOVE system.  Therefore, the oDMC
pays attention to Neutron port operations for three reasons:

#the delayed binding case stated above
#so that a portUUID may be mapped to a VNID (OpenDove Virtual Network Identifier) so that an OpenDove switch handles an attached VM correctly
#so that neutron router interface attachments/detachments can be handled properly

== Router ==

Pure router objects are not mapped, but rather tracked for handling neutron router interfaces attach/detach operations

=== Router Interface Attachments ===
ok, now for the fun part - router interface attachments
regXboi
which spin out both opendove policies as well as oDGW snat pools
regXboi
In neutron, the router object has the semantic of providing connectivity between all of its attached interfaces.
regXboi
so on each interface attach operation, we first look at the associated port and network that is being attached
regXboi
and then depending on whether it is "router:external" or not, we handle setting up opendove objects for all the other interfaces that were previously attached
regXboi
obviously, this means we don't start doing anything until the second interface is attached.
regXboi
when we do a pairwise compare of the interfaces, if both are internal, then we create opendove policies to allow traffic to flow between the opendove virtual networks that were created for those neutron networks
regXboi
if one interface is external, then we create first (if necessary) find available oEGWs to associate with the internal opendove network, then (if necessary) assign an external IP to the oDGW from the external subnet space
regXboi
and then lastly, create an SNAT pool for the oDGW to use for that internal network
regXboi
the size of the SNAT pool and the number of oDGWs used for each network are determined by other parameters of the OpenDoveNeutronControlBlock 

ok, last is floatingip
regXboi
neutron floating ips are used to provide dnat services for the neutron router model
regXboi
so that is pretty much a direct map to the opendove external forwarding rule for an oDGW
