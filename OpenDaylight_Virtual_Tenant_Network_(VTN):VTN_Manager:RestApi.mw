
This page describes the REST APIs provided by VTN Manager.

= Data Format =

REST API of VTN Manager uses [[wikipedia:JSON|JSON]] or [[wikipedia:XML|XML]] while exchanging Struct data with REST client.

*REST client uses JSON or XML format data as request body while sending Struct data.
**Specify format of the data sent in the '''Content-Type''' header of HTTP.
***Specify '''Application/Json''' for JSON.
***Specify '''Application/Xml''' for XML.
*OpenDaylight controller uses JSON or XML format data as response body while sending data to REST client.
**Format of the data received is decided on the basis of HTTP '''Accept''' header that was sent by REST client.
***Specify '''Application/Json''' for receiving data in JSON format.
***Specify '''Application/Xml''' for receiving data in XML format.
***JSON format is used if the REST client does not specify '''Accept''' header.

= Data Model =

This section describes the Struct data used in REST API of VTN Manager.

== VTN Data ==

This section describes the data showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.

=== vtnconf ===

'''vtnconf''' shows the configuration information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].
This is used for sending VTN information to controller during creation or modification of VTN by REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vtnconf description="Description about VTN 1" idleTimeout="300" 
         hardTimeout="0"/></pre>
*JSON format
<pre>
{  
  "description": "Description about VTN 1",  
  "idleTimeout": "300",  
  "hardTimeout": "0"  
}  
</pre>

Meaning of each attribute is given below.

:;<div id="vtnconf.description">description</div>
::Specify the string that shows the description of VTN.
::*There are no restrictions on the permissible characters or length of the string.
::*Can be omitted.
:;<div id="vtnconf.idleTimeout">idleTimeout</div>
::Specify in seconds the timeout value you want to set in idle_timeout of flow entries configured by VTN. Flow entries configured by VTN in switch will get deleted if it is not referred for the specified seconds.
::*Can be omitted.
::*Allowed range for value is between '''0''' or more and '''65535''' or less.
::*'''0''' shows infinite time.
::*If a negative value is specified, then the specified value is ignored and it will be treated as if it is omitted.
:;<div id="vtnconf.hardTimeout">hardTimeout</div>
::Specify in seconds the timeout value you want to set in hard_timeout of flow entries configured by VTN. Flow entries configured by VTN in switch will get deleted after the specified time period.
::*Can be omitted.
::*Allowed range for value is between '''0''' or more and '''65535''' or less.
::*'''0''' shows infinite time.
::*If a negative value is specified, then the specified value is ignored and it will be treated as if it is omitted.

Further, if a value greater than 0 is configured in both '''idleTimeout''' and '''hardTimeout''', then the value specified in '''hardTimeout''' must be greater than the value in '''idleTimeout'''.

=== vtn ===

'''vtn''' shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.
This is used for returning VTN information to REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vtn name="vtn_1" description="Description about VTN 1" idleTimeout="300"
     hardTimeout="0"/>
</pre>
*JSON format
<pre>
{
  "name": "vtn_1",
  "description": "Description about VTN 1",
  "idleTimeout": "300",
  "hardTimeout": "0"
}
</pre>

Meaning of each attribute is given below.

:;<div id="vtn.name">name</div>
::VTN name gets configured.
:;<div id="vtn.description">description</div>
::String showing VTN description gets configured.
::*It is omitted if the description is not set.
:;<div id="vtn.idleTimeout">idleTimeout</div>
::Seconds configured in idle_timeout of flow entry configured by VTN will get configured.
::* '''0''' shows infinite time.
:;<div id="vtn.hardTimeout">hardTimeout</div>
::Seconds configured in hard_timeout of flow entry configured by VTN will get configured.
::* '''0''' shows infinite time.

=== vtns ===

'''vtns''' shows a list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.
This is used for returning VTN information list to REST client.

*When child elements are included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vtns>
  <vtn name="vtn_1" description="Description about VTN 1"
       idleTimeout="300" hardTimeout="0"/>
  <vtn name="vtn_2" idleTimeout="600" hardTimeout="1000"/>
</vtns>
</pre>
:*JSON format
<pre>
{
  "vtn": [
    {
      "name": "vtn_1",
      "description": "Description about VTN 1",
      "idleTimeout": "300",
      "hardTimeout": "0"
    },
    {
      "name": "vtn_2",
      "idleTimeout": "600",
      "hardTimeout": "1000"
    }
  ]
}
</pre>
*When child elements are not included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vtns/>
</pre>
:*JSON format
<pre>
{"vtn":[]}
</pre>

'''vtns''' includes 0 or more [[#vtn|vtn]] as child elements.

== vBridge data ==

This section describes the data showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] information.

=== vbridgeconf ===

'''vbridgeconf''' shows the configuration information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This is used for sending vBridge information to controller during creation or modification of vBridge by REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vbridgeconf description="Description about vBridge 1" ageInterval="600"/>
</pre>
*JSON format
<pre>
{"description": "Description about vBridge 1", "ageInterval": "600"}
</pre>

Meaning of each attribute is given below.

:;<div id="vbridgeconf.description">description</div>
::Specify the string that describes vBridge.
::*There are no restrictions on the permissible characters or length of the string.
::*Can be omitted.
:;<div id="vbridgeconf.ageInterval">ageInterval</div>
::Specify in seconds the interval of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] in vBridge.
::* Can be omitted.
::* Allowed range for value is between '''10''' or more and '''1000000''' or less.
::* If a negative value is specified, then the specified value is ignored and it will be treated as if it is omitted.

=== vbridge ===

'''vbridge''' shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] information.
This is used to return vBridge information to REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vbridge name="vbridge_1" description="Description about vBridge 1"
         ageInterval="600" faults="0" state="-1"/>
</pre>
*JSON format
<pre>
{
  "name": "vbridge_1",
  "description": "Description about vBridge 1",
  "ageInterval": "600",
  "faults": "0",
  "state": "-1"
}
</pre>

Meaning of each attribute is given below.

:;<div id="vbridge.name">name</div>
::vBridge name gets configured.
:;<div id="vbridge.description">description</div>
::String showing vBridge description gets configured.
::*It is omitted if the description is not set.
:;<div id="vbridge.ageInterval">ageInterval</div>
::Seconds that shows the interval of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable.aging|aging]] for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] in vBridge will get configured.
:;<div id="vbridge.faults">faults</div>
::Count of path faults detected inside vBridge gets configured. This shows the number of paths between the switches, constituting a vBridge, that could not be configured by VTN Manager because the paths were broken.
::* '''0''' gets configured when no path fault has been detected.
::* Count of path fault is counted for each direction of path. E.g., if switch '''A''' and switch '''B''' are separated, then the path from switch '''A''' to switch '''B''' and path from switch '''B''' to switch '''A''' are treated as different and both are counted.
:;<div id="vbridge.state">state</div>
::Value showing vBridge state gets configured.
::* '''1''' gets configured when vBridge is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state.UP|UP]] state.
::* '''0''' gets configured when vBridge is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state.DOWN|DOWN]] state.
::* '''-1''' gets configured when vBridge is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.state.UNKNOWN|UNKNOWN]] state.

=== vbridges ===

'''vbridges''' shows the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] information.
This is used for returning vBridge information list to REST client.

*When child elements are included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vbridges>
  <vbridge name="vbridge_1" description="Description about vBridge 1"
           ageInterval="600" faults="0" state="-1" />
  <vbridge name="vbridge_2" ageInterval="1000" faults="2" state="0"/>
</vbridges>
</pre>
:*JSON format
<pre>
{
  "vbridge": [
    {
      "name": "vbridge_1",
      "description": "Description about vBridge 1",
      "ageInterval": "600",
      "faults": "0",
      "state": "-1"
    },
    {
      "name": "vbridge_2",
      "ageInterval": "1000",
      "faults": "2",
      "state": "0"
    }
  ]
}
</pre>
*When child elements are not included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vbridges/>
</pre>
:*JSON format
<pre>
{"vbridge":[]}
</pre>

'''vbridges''' includes 0 or more [[#vbridge|vbridge]] as child elements.

== Interface data ==

This section describes the data showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]] information.

=== interfaceconf ===

'''interfaceconf''' shows the configuration information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
This is used for sending interface information to controller during creation or modification of vBridge interface by REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<interfaceconf description="Description about IF-1" enabled="true"/>
</pre>
*JSON format
<pre>
{"description": "Description about IF-1", "enabled": true}
</pre>

Meaning of each attribute is given below.

:;<div id="interfaceconf.description">description</div>
::Specify the string showing interface description.
::*There are no restrictions on the permissible characters or length of the string.
::*Can be omitted.
:;<div id="interfaceconf.enabled">enabled</div>
::Specify whether interface is to be enabled or not.
::*Specify '''true''' for enabling it and '''false''' for disabling it.
::*Can be omitted.

=== interface ===

'''interface''' shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]] information.
This is used for returning vBridge interface information to REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<interface name="if_1" state="-1" entityState="-1"
           description="Description about IF-1" enabled="true"/>
</pre>
*JSON format
<pre>
{
  "name": "if_1",
  "state": "-1",
  "entityState": "-1",
  "description": "Description about IF-1",
  "enabled": "true"
}
</pre>

Meaning of each attribute is given below.

:;<div id="interface.name">name</div>
::Interface name gets configured.
:;<div id="interface.description">description</div>
::String showing the interface description gets configured.
::*It is omitted if the description is not set.
:;<div id="interface.enabled">enabled</div>
::Boolean value showing whether interface is enabled gets configured.
::*'''true''' is configured if it is enabled and '''false''' is configured if it is disabled.
:;<div id="interface.state">state</div>
::Value showing the interface state gets configured.
::* '''1''' gets configured when interface is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state.UP|UP]] state.
::* '''0''' gets configured when interface is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state.DOWN|DOWN]] state.
::* '''-1''' gets configured when interface is in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface.state.UNKNOWN|UNKNOWN]] state.
:;<div id="interface.entityState">entityState</div>
::Status of the network elements mapped to interface gets configured. If [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] is configured on the interface, then the status of the physical port of the mapped switch gets configured.
::* If the mapped network elements are operating, then '''1''' gets configured.
::* If the mapped network elements are not operating, then '''0''' gets configured.
::* If network elements are not mapped to interface, then '''-1''' gets configured.
 
Further, the status of network elements are configured irrespective of whether interface is enabled or not. 
E.g., even if the interface is disabled, '''1''' will be configured in [[#interface.entityState|entityState]] if the mapped network elements are operating.

=== interfaces ===

'''interfaces''' shows the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]] information.
This is used for returning vBridge interface information list to REST client.

*When child elements are included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<interfaces>
  <interface name="if_1" state="-1" entityState="-1"
             description="Description about IF-1" enabled="true"/>
  <interface name="if_2" state="0" entityState="1" enabled="false"/>
</interfaces>
</pre>
:*JSON format
<pre>
{
  "interface":[
    {
      "name": "if_1",
      "state": "-1",
      "entityState": "-1",
      "description": "Description about IF-1",
      "enabled": "true"
    },
    {
      "name": "if_2",
      "state": "0",
      "entityState": "1",
      "enabled": "false"
    }
  ]
}
</pre>
*When child elements are not included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<interfaces/>
</pre>
:*JSON format
<pre>
{"interface":[]}
</pre>

'''interfaces''' includes 0 or more [[#interface|interface]] as child elements.

== Port mapping data ==

This section describes the data showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] information.

=== portmapconf ===

'''portmapconf''' shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] configuration information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
This is used to send configuration information to controller during configuration of Port mapping by REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<portmapconf vlan="100">
  <node>
    <type>OF</type>
    <id>00:00:00:00:00:00:00:03</id>
  </node>
  <port name="port-1" type="OF" id="1"/>
</portmapconf>
</pre>
*JSON format
<pre>
{
  "vlan": 100,
  "node": {
    "type": "OF",
    "id": "00:00:00:00:00:00:00:03"
  },
  "port": {
    "name": "port-1",
    "type": "OF",
    "id": "1"
  }
}
</pre>

Meaning of each attribute is given below.

:;<div id="portmapconf.vlan">vlan</div>
::Specify the VLAN ID to be mapped by using numerical value.
::*Allowed range for value is between '''0''' or more and '''4095''' or less.
::*'''0''' implies untagged ethernet frame.
::*If omitted, it will be treated as if '''0''' is specified.

<span id="portmapconf.node">'''node''' element</span> shows the <tt>Node</tt> information corresponding to the switch that is mapped to interface. It is necessary to include one '''node''' element in '''portmapconf'''.

Meaning of elements inside '''node''' is given below. 

:;<div id="portmapconf.node.type">type</div>
::Specify the string showing <tt>Node</tt> type.
::*Specify '''OF''' for OpenFlow switch.
:;<div id="portmapconf.node.id">id</div>
::Specify the string showing the identifier of <tt>Node</tt>.
::*Specify the string representation of DPID while specifying OpenFlow switch.

<span id="portmapconf.port">'''port''' element</span> shows the condition for identifying physical ports of the switch specified in the element [[#portmapconf.node|node]].
It is necessary to include one '''node''' element in '''portmapconf'''.

Meaning of '''port''' attributes is given below.

:;<div id="portmapconf.port.name">name</div>
::Show port name of switch.
::*It is necessary to specify a character string with 1 or more characters.
::*If  the attribute '''name''' is omitted, then it is necessary to specify both '''type''' and '''id''' attributes.
:;<div id="portmapconf.port.type">type</div>
::Specify the string that shows the type of <tt>NodeConnector</tt>.
::*Specify '''OF''' for physical port of OpenFlow switch.
::*It should be specified along with the attribute '''id'''.
::*If the attribute '''type''' is omitted, then it is necessary to specify the attribute '''name'''.
:;<div id="portmapconf.port.id">id</div>
::Specify the string representing identifier of <tt>NodeConnector</tt>.
::*Specify the string representation of port number for physical port of OpenFlow switch.
::*It should be specified along with the attribute '''type'''.
::*If the attribute '''id''' is omitted, then it is necessary to specify the attribute '''name'''.


Actual physical port of switch that gets mapped to vBridge interface is decided as follows.

*If the attribute [[#portmapconf.port.name|name]] is configured in the element [[#portmapconf.port|port]], then out of the physical ports in the switch specified in the element [[#portmapconf.node|node]],the physical port that has the specified port name will get mapped.
*If the attributes [[#portmapconf.port.type|type]] and [[#portmapconf.port.id|id]] are configured in the element [[#portmapconf.port|port]], then out of the physical ports in the switch specified in the element [[#portmapconf.node|node]], the physical port corresponding to the specified <tt>NodeConnector</tt> will get mapped.
*If all the attributes are configured in the element [[#portmapconf.port|port]], then out of the physical ports in the switch specified in the element [[#portmapconf.node|node]], the physical port that meets all the condition will get mapped.
:I.e., Port mapping will be enabled only if the specified port name is configured for the specified <tt>NodeConnector</tt>.

=== portmap ===

'''portmap''' shows the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] information corresponding to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
It is used for returning Port mapping information to REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<portmap vlan="100">
  <node>
    <type>OF</type>  
    <id>00:00:00:00:00:00:00:03</id>
  </node>
  <port name="port-1" type="OF" id="1"/>
  <mapped type="OF" id="1" />
</portmap>
</pre>
*JSON format
<pre>
{
  "vlan": "100",
  "node": {
    "type": "OF",
    "id": "00:00:00:00:00:00:00:03"
  },
  "port": {
    "name": "port-1",
    "type": "OF",
    "id": "1"
  },
  "mapped": {
    "type": "OF",
    "id": "1"
  }
}
</pre>

Meaning of each attribute is given below.

:;<div id="portmap.vlan">vlan</div>
::Mapped VLAN ID gets configured.
::*'''0''' implies that untagged ethernet frame is mapped.

Details given in the elements [[#portmapconf.node|node]] and [[#portmapconf.port|port]] of [[#portmapconf|portmapconf]], which was specified during port mapping configuration, will get configured in <span id="portmap.node">'''node''' element</span> and <span id="portmap.port">'''port''' element</span> respectively.

<span id="portmap.mapped">'''mapped''' element</span> shows the <tt>NodeConnector</tt> information corresponding to physical port of the switch which is actually mapped.
If there are no physical ports that meet the condition mentioned in [[#portmapconf|portmapconf]], then the element '''mapped''' is omitted.

Meaning of attributes of the element '''mapped''' is as follows.

:;<div id="portmap.connector.type">type</div>
::String showing the type of <tt>NodeConnector</tt> gets configured.
::*'''OF''' is configured in case of OpenFlow switch.
:;<div id="portmap.connector.id">id</div>
::String showing the identifier of <tt>NodeConnector</tt> gets configured.
::*String representation of port number is configured for OpenFlow switch.

== VLAN mapping data ==

This section describes the data showing [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] information.

=== vlanmapconf ===

'''vlanmapconf''' shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] configuration information for [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
This is used to send configuration information to controller during configuration of VLAN mapping by REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vlanmapconf vlan="100">
  <node>
    <type>OF</type>
    <id>00:00:00:00:00:00:00:03</id>
  </node>
</vlanmapconf>
</pre>
*JSON format
<pre>
{
  "vlan": "100",
  "node":  {
    "type": "OF",
    "id": "00:00:00:00:00:00:00:03"
  }
}
</pre>

Meaning of each attribute is given below.

:;<div id="vlanmapconf.vlan">vlan</div>
::Specify the VLAN ID to be mapped by using numerical value.
::*Allowed range for value is between '''0''' or more and '''4095''' or less.
::*'''0''' implies untagged ethernet frame.
::*If omitted, it will be treated as if '''0''' is specified.

'''vlanmapconf''' can include one '''<span id="vlanmapconf.node">node</span>''' element in child elements.
The element '''node''' shows the <tt>Node</tt> information corresponding to the switch that is to be mapped.
If the element '''node''' is omitted, then all the switches are mapped.

Meaning of elements inside '''node''' is given below.

:;<div id="vlanmapconf.node.type">type</div>
::Specify the string showing the type of <tt>Node</tt>.
::*Specify '''OF''' for OpenFlow switch.
:;<div id="vlanmapconf.node.id">id</div>
::Specify the string showing the identifier of <tt>Node</tt>.
::*Specify the string representation of DPID for OpenFlow switch.

=== vlanmap ===

'''vlanmap''' shows [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] information.
This is used for returning VLAN mapping information to REST client.

*XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vlanmap id="OF-00:00:00:00:00:00:00:03.0" vlan="0">
  <node>
    <type>OF</type>
    <id>00:00:00:00:00:00:00:03</id>
  </node>
</vlanmap>
</pre>
*JSON format
<pre>
{
  "id": "OF-00:00:00:00:00:00:00:03.0",
  "vlan": "0",
  "node": {
    "type": "OF",
    "id": "00:00:00:00:00:00:00:03"
  }
}
</pre>

Meaning of each attribute is as follows.

:;<div id="vlanmap.id">id</div>
::Identifier allocated in VLAN mapping information gets configured.
:;<div id="vlanmap.vlan">vlan</div>
::VLAN ID which is mapped gets configured.
::*'''0''' implies that untagged ethernet frame is mapped.

Contents of [[#vlanmapconf.node |node]] element of [[#vlanmapconf|vlanmapconf]] specified during VLAN Mapping configuration gets set in '''<span id="vlanmap.node">node</span>'''. 
The element '''node''' will be omitted if switch is not specified.

=== vlanmaps ===

'''vlanmaps''' shows list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] information.
This is used for sending VLAN mapping information list to REST client.

*When child elements are included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vlanmaps>
  <vlanmap id="OF-00:00:00:00:00:00:00:03.0" vlan="0">
    <node>
      <type>OF</type>
      <id>00:00:00:00:00:00:00:03</id>
    </node>
  </vlanmap>
  <vlanmap id="ANY.7" vlan="7"/>
</vlanmaps>
</pre>
:*JSON format
<pre>
{
  "vlanmap": [
    {
      "id": "OF-00:00:00:00:00:00:00:03.0",
      "vlan": "0",
      "node": {
        "type": "OF",
        "id": "00:00:00:00:00:00:00:03"
      }
    },
    {
      "id": "ANY.7",
      "vlan": "7"
    }
  ]
}
</pre>
*When child elements are not included
**XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<vlanmaps/>
</pre>
:*JSON format
<pre>
{"vlanmap":[]}
</pre>

'''vlanmaps''' includes 0 or more [[#vlanmap|vlanmap]] as child elements.

== MAC address table data ==

This section describes the data that shows the MAC address information learned in [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

=== macentry ===
 
'''macentry''' shows the MAC address information learned inside [OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]].
This is used to return MAC address information inside MAC address table to REST client.

:* XML format 
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<macentry address="01:02:03:04:05:06" vlan="0">
  <node>
    <type>OF</type>
    <id>00:00:00:00:00:11:22:33</id>
  </node>
  <port type="OF" id="1"/>
  <inetAddresses>
    <inetAddress address="192.168.10.1"/>
  </inetAddresses>
</macentry>
</pre>
:* JSON format 
<pre>
{ 
  "address": "01:02:03:04:05:06",
  "vlan": "0",
  "node": {
    "type": "OF",
    "id": "00:00:00:00:00:11:22:33"
  },
  "port": {
    "type": "OF",
    "id": "1"
  },
  "inetAddresses": {
    "inetAddress": {"address": "192.168.10.1"}
  }
} 
</pre>

Meaning of each attribute is as follows. 

:;<div id="macentry.address">address</div>
::String showing the learned MAC address gets configured.
::* String wherein hexadecimal notation of each octet inside MAC address are concatenated by <tt>':'</tt> gets configured.
:;<div id="macentry.vlan">vlan</div>
::VLAN ID configured inside the Ethernet frame, where MAC address is detected, gets configured.
::* '''0''' implies that VLAN tag was not detected.

Element '''node''' shows the <tt>Node</tt> information corresponding to switch where MAC address is detected.

Meaning of elements inside '''node''' is as follows.

:;<div id="macentry.node.type">type</div>
::String showing the type of `Node` gets configured.
::* '''OF''' gets configured for OpenFlow switches.
:;<div id="macentry.node.id">id</div>
::String showing the identifier of <tt>Node</tt> gets configured.
::* String representation of DPID gets configured for OpenFlow switches.

Element '''port''' shows the <tt>NodeConnector</tt> information corresponding to physical port of switch where MAC address is detected.

Meaning of attributes of element '''port''' is as follows.

:;<div id="macentry.connector.type">type</div>
::String showing the type of <tt>NodeConnector</tt> gets configured.
::* '''OF''' gets configured for OpenFlow switches.
:;<div id="macentry.connector.id">id</div>
::String showing the identifier of <tt>NodeConnector</tt> gets configured.
::* String representation of port number gets configured for OpenFlow switches.

Element '''inetAddresses''' shows the IP address information configured in the Ethernet frame where MAC address was detected.

* If multiple IP address corresponding to MAC address are detected, then the information for all the IP addresses that were detected gets configured.
* If no IP address is detected, element '''inetAddresses''' is omitted.

One or more than one '''inetAddress''' elements are configured inside the element '''inetAddresses'''.
String representation of the detected IP address gets configured in the attribute '''address''' of each '''inetAddress''' element.

=== macentries ===

'''macentries''' shows the list of MAC address information learned inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]].
This is used to return MAC address information list to REST client.

* When child elements are included
:* XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<macentries>
  <macentry address="01:02:03:04:05:06" vlan="0">
    <node>
      <type>OF</type>
      <id>00:00:00:00:00:11:22:33</id>
    </node>
    <port type="OF" id="1"/>
    <inetAddresses>
      <inetAddress address="192.168.10.1"/>
    </inetAddresses>
  </macentry>
  <macentry address="11:22:33:44:55:66" vlan="1">
    <node>
      <type>OF</type>
      <id>00:00:00:00:12:34:56:78</id>
    </node>
    <port type="OF" id="2"/>
    <inetAddresses>
      <inetAddress address="192.168.10.20"/>
      <inetAddress address="10.1.2.3"/>
    </inetAddresses>
  </macentry>
</macentries>
</pre>
:* JSON format
<pre>
{
  "macentry": [
    {
      "address": "01:02:03:04:05:06",
      "vlan": "0",
      "node": {
        "type": "OF",
        "id": "00:00:00:00:00:11:22:33"
      },
      "port": {
        "type": "OF",
        "id": "1"
      },
      "inetAddresses": {
        "inetAddress": {"address": "192.168.10.1"}
      }
    },
    {
      "address": "11:22:33:44:55:66",
      "vlan": "1",
      "node": {
        "type":"OF",
        "id": "00:00:00:00:12:34:56:78"
      },
      "port": {
        "type": "OF",
        "id":"2"
      },
      "inetAddresses": {
        "inetAddress": [
          {"address": "192.168.10.20"},
          {"address": "10.1.2.3"}
        ]
      }
    }
  ]
}
</pre>
* When child elements are not included 
:* XML format 
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<macentries/>
</pre>
:* JSON format
<pre>
{"macentry":[]}
</pre>

'''macentries''' includes 0 or more [[#macentry|macentry]] as child elements.

== Other data ==

=== version ===

'''version''' shows version information of VTN Manager.
It is used for returning version information of VTN Manager to REST client.

:* XML format
<pre>
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<version api="1">
  <bundle major="0" minor="1" micro="0" qualifier="SNAPSHOT"/>
</version>
</pre>
:* JSON format
<pre>
{
  "api": "1",
  "bundle": {
    "major": "0",
    "minor": "1",
    "micro": "0",
    "qualifier": "SNAPSHOT"
  }
}
</pre>
 
Meaning of each attribute is as follows. 


:;<div id="version.api">api</div>
::Value showing the API version of VTN Manager will get configured.
::API version will be a value equal to or greater than 1, and it is incremented if API of VTN Manager is changed.
::*Current VTN Manager will return 1 as API version. 

'''bundle''' element shows version information of OSGi bundle that implements VTN Manager. 
Meaning of each '''bundle''' attribute is as follows. 

:;<div id="version.bundle.major">major</div>
::major component of OSGi bundle version is configured.
:;<div id="version.bundle.minor">minor</div>
::minor component of OSGi bundle version is configured.
:;<div id="version.bundle.micro">micro</div>
::micro component of OSGi bundle version is configured.
:;<div id="version.bundle.qualifier">qualifier</div>
::qualifier component of OSGi bundle version is configured.
::'''qualifier''' is omitted if qualifier is not set in OSGi bundle version.

= REST API =

This section describes the specifications of REST API provided by VTN Manager.

Further, specify the name of the target container in the REST URI '''containerName''' described in this document. For example, specify '''default''' in '''containerName''' when operation is to be performed against default container.

== VTN related API ==

This section describes [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] related REST API.

=== <div id="REST.vtns.GET">Get VTN information list</div> ===

This retrieves the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] present in the specified container.

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns
</pre>

:;containerName
::Specify the Container name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#vtns|vtns]], which shows VTN information list, gets configured in Response body.

It returns Status Code showing the error in case of an abnormal end.
Following are the main Status Codes that get returned in case of error.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::Specified container does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error in Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vtn.POST">Create VTN</div> ===

It creates [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] inside the specified container.

==== Request ====
<pre>
POST /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify name of the VTN which is to be created.
::*It is necessary to specify a string containing 1 or more characters and 31 or less characters.
::*Characters allowed for name are US-ASCII alphabet, numbers and underscore (<tt>'_'</tt>) only. Further, the first character should be US-ASCII alphabet or number.

Specify [[#vtnconf|vtnconf]] in Request body.

*VTN description is not registered if [[#vtnconf.description|description]] is omitted.
*If [[#vtnconf.idleTimeout|idleTimeout]] is omitted, it will be treated as if '''300''' is specified in the value.
*If [[#vtnconf.hardTimeout|hardTimeout]] is omitted, it will be treated as if '''0''' is specified in the value.

==== Response ====

It returns '''201 (Created)''' as Status Code in case of normal end.

*Response body is not configured.
*URI of the resource that is created (URI specified in request) gets configured in '''Location''' header.

It returns Status Code showing error in case of abnormal end.
Following are the main Status Codes returned during error.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::Specified container does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;409 (Conflict)
::VTN having the name specified in '''tenantName''' already exists.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Specified incorrect VTN name in '''tenantName'''.
::*Specified incorrect value in [[#vtnconf.idleTimeout|idleTimeout]] or [[#vtnconf.hardTimeout|hardTimeout]] of Request body.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vtn.GET">Get VTN information</div> ===

It acquires the information related to the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#vtn|vtn]] that shows VTN information gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vtn.PUT">Modify VTN information</div> ===

It modifies the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]] information.

==== Request ====
<pre>
PUT /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.

You must specify [[#vtnconf|vtnconf]] in Request body.

Also, the following query parameter can be specified in URI.

:;all
::Specify the Boolean value that decides the handling of attributes omitted in [[#vtnconf|vtnconf]].
::If nothing is specified, then it is treated as '''false'''.
::*If '''true''' is specified, then all the attributes related to VTN are modified.
::**If [[#vtnconf.description|description]] is omitted, then the description of the specified VTN will get deleted.
::**If [[#vtnconf.idleTimeout|idleTimeout]] is omitted, it will be treated as if '''300''' is specified in the value.
::**If [[#vtnconf.hardTimeout|hardTimeout]] is omitted, it will be treated as if '''0''' is specified in the value.
::*If '''false''' is specified, then the attributes that are omitted will not be modified.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Incorrect value is specified in [[#vtnconf.idleTimeout|idleTimeout]] or [[#vtnconf.hardTimeout|hardTimeout]] of Request body.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vtn.DELETE">Delete VTN</div> ===

It deletes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VTN|VTN]].
All the vBridge etc. that are included in the specified VTN also will get deleted.

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

== vBridge related API ==

This section describes REST APIs related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

=== <div id="REST.vbridges.GET">Get vBridge information list</div> ===

It retrieves the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] present inside the specified VTN.

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#vbridges|vbridges]] showing vBridge information list gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbridge.POST">Create vBridge</div> ===

It creates [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] inside the specified VTN.

==== Request ====
<pre>
POST /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify name of the vBridge which is to be created.
::*It is necessary to specify a string containing 1 or more characters and 31 or less characters.
::*Characters allowed for name are US-ASCII alphabet, numbers and underscore (<tt>'_'</tt>) only.
:::Further, the first character should be US-ASCII alphabet or number.

[[#vbridgeconf|vbridgeconf]] must be specified in the Request body.

*If [[#vbridgeconf.description|description]] is omitted, then vBridge description is not registered.
*If [[#vbridgeconf.ageInterval|ageInterval]] is omitted, it will be treated as if '''600''' is specified in the value.

==== Response ====

It returns '''201 (Created)''' as Status Code in case of normal end.

*Response body is not configured.
*URI of the resource that is created (URI specified in request) gets configured in '''Location''' header.

It returns Status Code showing error in case of abnormal end.
Following are the main Status Codes returned during error.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;409 (Conflict)
::vBridge having the name specified in '''bridgeName''' already exists.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Specified incorrect vBridge name in '''bridgeName'''.
::*Incorrect value is specified in [[#vbridgeconf.ageInterval|ageInterval]] of Request body.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbridge.GET">Get vBridge information</div> ===

It retrieves the information related to the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#vbridge|vbridge]] showing vBridge information gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbridge.PUT">Modify vBridge information</div> ===

It modifies the information of specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
PUT /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

[[#vbridgeconf|vbridgeconf]] must be specified in Request body.

Also, the following query parameter can be specified in URI.

:;all
::Specify the Boolean value that decides the handling of attributes omitted in [[#vbridgeconf|vbridgeconf]].
::If nothing is specified, then it is treated as '''false'''.
::*If '''true''' is specified, then all the attributes related to vBridge are modified.
::**If [[#vbridgeconf.description|description]] is omitted, then the description of the specified vBridge will get deleted.
::**If [[#vbridgeconf.ageInterval|ageInterval]] is omitted, it will be treated as if '''600''' is specified in the value.
::*If '''false''' is specified, then the attributes that are omitted will not be modified.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Incorrect value is specified in [[#vbridgeconf.ageInterval|ageInterval]] of Request body.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbridge.DELETE">Delete vBridge</div> ===

It deletes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].
All the interfaces etc. that are included inside the specified vBridge also get deleted.

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

== vBridge interface related API ==

This section describes the REST API related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

=== <div id="REST.vbifs.GET">Get vBridge interface information list</div> ===

It retrieves the list of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] present inside the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#interfaces|interfaces]] showing vBridge information list gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbif.POST">Create vBridge interface</div> ===

It creates [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] inside the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
POST /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify name of the interface which is to be created.
::*It is necessary to specify a string containing 1 or more characters and 31 or less characters.
::*Characters allowed for name are US-ASCII alphabet, numbers and underscore (<tt>'_'</tt>) only.
:::Further, the first character should be US-ASCII alphabet or number.

[[#interfaceconf|interfaceconf]] must be specified in Request body.

*If [[#interfaceconf.description|description]] is omitted, then the description of the interface will not get registered.
*If [[#interfaceconf.enabled|enabled]] is omitted, then it is treated as if '''true''' is specified in the value.

==== Response ====

It returns '''201 (Created)''' as Status Code in case of normal end.

*Response body is not configured.
*URI of the resource that is created (URI specified in request) gets configured in '''Location''' header.

It returns Status Code showing error in case of abnormal end.
Following are the main Status Codes returned during error.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;409 (Conflict)
::Interface having the name specified in '''ifName''' already exists.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Specified incorrect interface name in '''ifName'''.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbif.GET">Get vBridge interface information</div> ===

It retrieves information related to a specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] inside the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify vBridge interface name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#interface|Interface]] showing vBridge interface information gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified vBridge interface does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbif.PUT">Modify vBridge interface information</div> ===

It modifies the information of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] inside the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
PUT /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify vBridge interface name.

[[#interfaceconf|interfaceconf]] must be specified in the Request body.

Also, the following query parameter can be specified in URI.

:;all
::Specify the Boolean value that decides the handling of attributes omitted in [[#interfaceconf|interfaceconf]].
::If nothing is specified, then it is treated as '''false'''.
::*If '''true''' is specified, then all the attributes related to vBridge interface are modified.
::**If [[#interfaceconf.description|description]] is omitted, then the description of the specified vBridge interface will get deleted.
::**If [[#interfaceconf.enabled|enabled]] is omitted, value is modified to '''true'''.
::*If '''false''' is specified, then the attributes that are omitted will not be modified.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified vBridge interface does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;415 (Unsupported Media Type)
::Specified unsupported data type in '''Content-Type''' header.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vbif.DELETE">Delete vBridge interface</div> ===

It deletes the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|virtual interface]] inside the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify vBridge interface name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified vBridge interface does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

== Port mapping related API ==

This section describes the REST API related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]].

=== <div id="REST.portmap.PUT">Configure Port mapping</div> ===

It configures [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].
If Port mapping is already configured on the specified vBridge interface, then old configuration is deleted and the configuration specified in request body gets applied.

==== Request ====
<pre>
PUT /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}/portmap
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify vBridge interface name.

[[#portmapconf|portmapconf]] must be specified in the Request body.

*Information of the node corresponding to the switch, which is to be mapped to interface, must be specified in [[#portmapconf.node|node]].
*Conditions that specify the physical port of the switch, which is to be mapped to interface, must be specified in [[#portmapconf.port|port]].
**Currently you can specify physical port of OpenFlow switches only.
*Specify VLAN ID, which is to be mapped to interface, in [[#portmapconf.vlan|vlan]].
**If value other than '''0''' is specified, then the ethernet frame that has the specified VLAN ID configured will get mapped.
**If '''0''' is specified, or if [[#portmap.vlan|vlan]] is omitted, then untagged ethernet frame will get mapped to the interface.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.
*Port map is successful even if the specified physical port of the switch does not exist. Actual mapping will be done when that specified physical port is found later.
**However, when mapping is actually done with the specified physical port, the processing will not be carried out if that physical port and VLAN ID are mapped to another vBridge interface.

It returns Status Code showing error in case of abnormal end.
Following are the main Status Codes returned during error.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified vBridge interface does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;409 (Conflict)
::Specified physical port is present and the specified physical port and VLAN ID are mapped to another vBridge interface.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Incorrect value is specified inside [[#portmapconf|portmapconf]] of Request body.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.portmap.GET">Get Port mapping information</div> ===

It retrieves the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] information configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}/portmap
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify vBridge interface name.

==== Response ====

It returns the following information in case of normal end.

*It returns '''200 (OK)''' as Status Code if Port mapping is configured on the specified vBridge interface.
**[[#portmap|portmap]] which shows Port mapping information is configured in the Response body.
*It returns '''204 (No Content)''' as Status Code if port mapping is not configured on the specified vBridge interface.
**Request body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified vBridge interface does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.portmap.DELETE">Delete Port mapping</div> ===

It deletes [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#port-map|Port mapping]] configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vInterface|vBridge interface]].

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/interfaces/{ifName}/portmap
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;ifName
::Specify vBridge interface name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.
Further, it will end normally even if Port mapping is not configured in the specified vBridge interface.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified vBridge interface does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

== VLAN mapping related API ==

This section describes the REST API related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]].

=== <div id="REST.vlanmaps.GET">Get VLAN mapping information list</div> ===

It retrieves [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] information list configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/vlanmaps
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#vlanmaps|vlanmaps]] showing VLAN mapping information list gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vlanmap.POST">Configure VLAN mapping</div> ===

It creates the mapping between the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]] and [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN]].

==== Request ====
<pre>
POST /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/vlanmaps
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

[[#vlanmapconf|vlanmapconf]] must be specified in the Request body.

*Specify the VLAN ID, which is to be mapped to vBridge, in [[#vlanmapconf.vlan|vlan]].
**If value other than '''0''' is specified, then the ethernet frame that has the specified VLAN ID configured will get mapped to vBridge.
**If '''0''' is specified, or if [[#vlanmapconf.vlan|vlan]] is omitted, then untagged ethernet frame will get mapped to the vBridge.
*Specify the <tt>Node</tt> information corresponding to switch, which is mapped to vBridge, in [[#vlanmapconf.node|node]].
**Currently you can specify <tt>Node</tt> corresponding to OpenFlow switches only.
**If it is omitted, then it will be treated as if all the switches are specified.

==== Response ====

It returns '''201 (Created)''' as Status Code in case of normal end.

*An identifier is allocated to the VLAN mapping information that was created, and the REST resource URI corresponding to that VLAN mapping information gets configured in '''Location''' header.
**Last path configuration element of URI configured in '''Location''' header is the identifier allocated to VLAN mapping information.
*Response body is not configured.
*VLAN configuration will succeed even if the switch specified in [[#vlanmapconf.node|node]] is not found. Actual mapping is done when the specified switch is found later.

It returns Status Code showing error in case of abnormal end.
Following are the main Status Codes returned during error.

:;400 (Bad Request)
::Incorrect XML or JSON data is specified in Request body.
:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;409 (Conflict)
::Specified VLAN is already mapped to the specified vBridge or some other vBridge.
:;415 (Unsupported Media Type)
::
::*Specified unsupported data type in '''Content-Type''' header.
::*Incorrect value is specified inside [[#vlanmapconf|vlanmapconf]] of Request body.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vlanmap.GET">Get VLAN mapping information</div> ===

It retrieves the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] information configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/vlanmaps/{mapId}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;mapId
::Specify the identifier of VLAN mapping information.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*[[#vlanmap|vlanmap]] which shows the VLAN mapping information gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified VLAN mapping information does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.vlanmap.DELETE">Delete VLAN mapping</div> ===

It deletes [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#VLAN-map|VLAN mapping]] configured in the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/vlanmaps/{mapId}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;mapId
::Specify the identifier of VLAN mapping information.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

*Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::*Specified container does not exist.
::*Specified VTN does not exist.
::*Specified vBridge does not exist.
::*Specified VLAN mapping information does not exist.
:;406 (Not Acceptable)
::Specified <tt>"default"</tt> in '''containerName''' when a container other than the Default container is present.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

== MAC address table related API ==

This section describes the REST API related to [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

=== <div id="REST.macentries.GET">Get MAC address information list</div> ===

It retrieves the MAC address information list learned inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/mac
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

* [[#macentries|macentries]] that shows the MAC address information list gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::* Specified container does not exist.
::* Specified VTN does not exist.
::* Specified vBridge does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.macentries.DELETE">Flush MAC address table</div> ===

It deletes the entire MAC address information learned inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/mac
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

* Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::* Specified container does not exist.
::* Specified VTN does not exist.
::* Specified vBridge does not exist.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.
 
=== <div id="REST.macentry.GET">Get MAC address information</div> ===

It retrieves the specific MAC address information learned inside the [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
GET /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/mac/{macAddr}
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;macAddr
::Specify the string representation of MAC address.
::* Specify the string wherein hexadecimal notation of each octet inside MAC address are concatenated by <tt>':'</tt>.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

* [[#macentry|macentry]] showing the showing the information of the MAC address specified in '''macAddr''' gets configured in Response body.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::* Specified container does not exist.
::* Specified VTN does not exist.
::* Specified vBridge does not exist.
::* Specified MAC address is not learned in the MAC address table.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

=== <div id="REST.macentry.DELETE">Delete MAC address information</div> ===
 
It deletes a specific MAC address information learned inside [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge.macTable|MAC address table]] of the specified [[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:Specification#vBridge|vBridge]].

==== Request ====
<pre>
DELETE /controller/nb/v2/vtn/{containerName}/vtns/{tenantName}/vbridges/{bridgeName}/mac/{macAddr} 
</pre>

:;containerName
::Specify Container name.
:;tenantName
::Specify VTN name.
:;bridgeName
::Specify vBridge name.
:;macAddr
::Specify the string representation of MAC address.
::* Specify the string wherein hexadecimal notation of each octet inside MAC address are concatenated by <tt>':'</tt>.

==== Response ====

It returns '''200 (OK)''' as Status Code in case of normal end.

* Response body is not configured.

It returns Status Code showing error in case of abnormal end.
Main Status Codes returned during error is as follows.

:;401 (Unauthorized)
::Authorization error.
:;404 (Not Found)
::
::* Specified container does not exist.
::* Specified VTN does not exist.
::* Specified vBridge does not exist.
::* Specified MAC address is not learned in the MAC address table.
:;500 (Internal Server Error)
::Process failed due to internal error of Controller.
:;503 (Service Unavailable)
::Services like VTN Manager etc., that are considered necessary inside controller are not operating.

[[Category:OpenDaylight Virtual Tenant Network]]
