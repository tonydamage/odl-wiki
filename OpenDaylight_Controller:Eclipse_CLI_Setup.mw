These instructions should enable you to use the CLI to pull and push to the git repository, but hack on code from Eclipse.

==Starting From Scratch==

# Pull the code from the command line and build it with these [[OpenDaylight Controller:Pulling, Hacking, and Pushing the Code from the CLI|instructions]]. The short version is:
## Pull the code: <tt>git clone ssh://<username>@git.opendaylight.org:29418/controller.git</tt>
## Build the code: <tt>cd controller && mvn clean install</tt> ''You can also build from opendaylight/distribution/opendaylight, but it just builds the distribution as opposed to building everything''
# Download and install Eclipse ("for Java EE Developers", "for Java Developers" and "for RCP and RAP Developers" all seem to work)
# Install Eclipse Maven Integration
## From Eclipse, go to Help => Install New Software...
## Paste "http://download.eclipse.org/technology/m2e/releases" into the "Work with:" field
## Select m2e and (optionally) m2e - slf4j both ''(1.4.0 is current as of the writing of these instructions)''
## Click Next, OK and Finish else until things install
# Restart Eclipse when it asks
# Install Eclipse Xtend plugin
## From Eclipse, go to Help => Install New Software...
## Paste "http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases" into the "Work with:" field
## Select Xtend SDK and Xtend M2E extensions under Xtend-2.4.3 ''(2.4.3 is the most recent version as of the writing of these instructions)''
## Click Next, OK and Finish else until things install
# Restart Eclipse when it asks
# Import all of the OpenDaylight projects
## From Eclipse, go to File => Import => Maven => Existing Maven Projects
## Browse to the root directory of the git repository
## All of the projects should be selected by default, just click Finish
## It may ask you to install Tycho, do so if it asks
## It may also complain about jacoco, you should be able to ignore those errors
# If the projects still have errors, they are usually because for whatever reason Eclipse didn't properly import the java for the xtend files. To fix this:
## Figure out what class seems to be missing.
## Find the xtend file for that class and open in it in Eclipse. (I find using the CLI helps me figure out where it is. For example <tt>find . -name "FlowProgrammerAdapter.xtend"</tt>.)
## That should cause the xtend file to be compiled and then Eclipse should find it.

==Eclipse Maven Integration (m2e) version==

Previously, there were issues with m2e 1.3 and we recommended using 1.2, but those issues have been fixed and everything should works as expected with the most recent m2e version, 1.4.

==Debugging Weird Errors==

If Eclipse starts giving you lots of weird errors that seem to make no sense, try the following things:

# right click on the project with the issue and go to Maven => Update Project... and then press OK
#* You can do this more easily by creating a single "Java Working Set" for all of the OpenDaylight projects
#* Do that by going File => New => Java Working Set and giving it a name and adding all the projects you want
#* When you're importing Maven projects into Eclipse, you can also check the "Add project(s) to working set" box at the bottom of the dialog and pick the working set you're using for OpenDaylight
#* Then you can right-click on the project and do the Maven = Update Project... on all of them at once
# If that doesn't work closing, deleting and the reimporting all of the OpenDaylight projects seems to help when nothing else does
#* while you have the projects not imported into Eclipse, it doesn't hurt to do a build from the CLI as well
