
=code-generator=

==binding-generator-api==

==binding-generator-impl==
* org.opendaylight.yangtools.sal.binding.generator.impl.AugmentedTypeTest
::Test if all Type objects were created for augmentations in parsed models.
* org.opendaylight.yangtools.sal.binding.generator.impl.AugmentRelativeXPathTest
::Test if all Type objects were created for augmentations with relative target path in parsed models.
* org.opendaylight.yangtools.sal.binding.generator.impl.BaseTypeProvider
::Test type provider from BaseYangTypes class.
* org.opendaylight.yangtools.sal.binding.generator.impl.BinaryTypeTest
::Test Type objects generated from nodes with binary type.
* org.opendaylight.yangtools.sal.binding.generator.impl.BitAndUnionTOEnclosingTest
::Test Type objects generated from nodes with bit or union type.
* org.opendaylight.yangtools.sal.binding.generator.impl.ChoiceCaseGenTypesTest
::Test Type objects generated from choice case nodes and augmented choice case nodes.
* org.opendaylight.yangtools.sal.binding.generator.impl.ControllerTest
::Test Type objects generation from controller models.
* org.opendaylight.yangtools.sal.binding.generator.impl.ExtendedTypedefTest
::Test Type objects generated from nested typedef statements.
* org.opendaylight.yangtools.sal.binding.generator.impl.GenEnumResolvingTest
::Test Type objects generated from nodes with yang enum type.
* org.opendaylight.yangtools.sal.binding.generator.impl.GeneratedTypesBitsTest
::Test Type objects generated from nodes with yang bits type.
* org.opendaylight.yangtools.sal.binding.generator.impl.GeneratedTypesLeafrefTest
::Test Type objects generated from nodes with yang leafref type and leafref with invalid path.
* org.opendaylight.yangtools.sal.binding.generator.impl.GeneratedTypesStringTest
::Test Type objects generated from nodes with yang string type with pattern constraints.
* org.opendaylight.yangtools.sal.binding.generator.impl.GeneratedTypesTest
:: Test resolving of multiple modules, containers, leaflists, lists and lists with composite key.
* org.opendaylight.yangtools.sal.binding.generator.impl.GenTypesSubSetTest
:: Test generated types generation for particular modules from schema context.
* org.opendaylight.yangtools.sal.binding.generator.impl.IdentityrefTypeTest
::Test Type objects generated from nodes with yang identityref type.
* org.opendaylight.yangtools.sal.binding.generator.impl.RefineTest
* org.opendaylight.yangtools.sal.binding.generator.impl.TypeProviderIntegrationTest
:: Test functionality of TypeProviderImpl.
* org.opendaylight.yangtools.sal.binding.generator.impl.UnionTypeDefTest
::Test Type objects generated from nodes with yang union type.
* org.opendaylight.yangtools.sal.binding.generator.impl.UsesTest
::Test Type objects generated from nodes with uses statement.
* org.opendaylight.yangtools.sal.binding.yang.types.NodeWrappedTypeTest
::Test NodeWrappedType class.

==binding-generator-spi==

==binding-generator-util==
* org.opendaylight.yangtools.binding.generator.util.BindingGeneratorUtilTest
:: Test helper methods in BindingGeneratorUtil.
* org.opendaylight.yangtools.binding.generator.util.generated.type.builder.AnnotationBuilderTest
:: Test AnnotationBuilder class and its methods.

==binding-java-api-generator==
* org.opendaylight.yangtools.sal.java.api.generator.test.AugmentToUsesInAugmentCompilationTest
:: Test compilation of code generated for yang augmentation with target in node added by uses in augmentation.
* org.opendaylight.yangtools.sal.java.api.generator.test.CascadeUsesCompilationTest
:: Test compilation of code generated from model containing nested uses statements.
* org.opendaylight.yangtools.sal.java.api.generator.test.ClassCodeGeneratorTest
:: Test for Type objects representing class source code (GeneratedTransferObject).
* org.opendaylight.yangtools.sal.java.api.generator.test.CompilationTest
:: Test compilation of list, augment in uses, augment of augment, leafs with different types and context-reference annotation.
* org.opendaylight.yangtools.sal.java.api.generator.test.GenerateInnerClassForBitsAndUnionInLeavesTest
::Test inner class Type objects generated from nodes with bits or union type.
* org.opendaylight.yangtools.sal.java.api.generator.test.GeneratorJavaFileTest
:: Test GeneratorJavaFile class and generation of files from Type objects.
* org.opendaylight.yangtools.sal.java.api.generator.test.TypedefCompilationTest
:: Test compilation of classes generated from typedef statements.

==binding-model-api==

==binding-type-provider==
* org.opendaylight.yangtools.sal.binding.yang.types.NodeWrappedTypeTest

==maven-sal-api-gen-plugin==
* org.opendaylight.yangtools.yang.unified.doc.generator.maven.DocGenTest
* org.opendaylight.yangtools.yang.wadl.generator.maven.WadlGenTest



=restconf=

==restconf-client-api==

==restconf-client-impl==
* org.opendaylight.yangtools.restconf.client.RestconfClientImplTest

==restconf-common==

==restconf-jaxrs-api==

==restconf-util==
* org.opendaylight.yangtools.restconf.utils.Bug1196Test
* org.opendaylight.yangtools.restconf.utils.Bug527Test
* org.opendaylight.yangtools.restconf.utils.RestconfUtilsTest



=yang=

==yang-binding==
* org.opendaylight.yangtools.yang.binding.test.InstanceIdentifierTest
:: Test binding-aware instance identifier.

==yang-common==
* org.opendaylight.yangtools.yang.common.QNameTest
:: Test toString method, creation of QName from string and compareTo method. 

==yang-data-api==
* org.opendaylight.yangtools.yang.data.api.InstanceIdentifierTest
:: Test binding-independent instance identifier.

==yang-data-impl==
* org.opendaylight.yangtools.yang.data.impl.CompositeNodeTOImplTest
* org.opendaylight.yangtools.yang.data.impl.LazyNodeToNodeMapTest
* org.opendaylight.yangtools.yang.data.impl.NodeFactoryTest
* org.opendaylight.yangtools.yang.data.impl.NodeModificationBuilderImplTest
* org.opendaylight.yangtools.yang.data.impl.NodeUtilsTest
* org.opendaylight.yangtools.yang.data.impl.XmlTreeBuilderTest
* org.opendaylight.yangtools.yang.data.impl.schema.NormalizedDataBuilderTest
* org.opendaylight.yangtools.yang.data.impl.schema.test.NormalizedNodeUtilsTest
* org.opendaylight.yangtools.yang.data.impl.schema.transform.dom.serializer.NormalizedNodeXmlTranslationTest
* org.opendaylight.yangtools.yang.data.impl.test.codecs.IntCodecStringTest
* org.opendaylight.yangtools.yang.data.impl.test.codecs.TypeDefinitionAwareCodecTest

==yang-data-json==
* org.opendaylight.yangtools.yang.data.json.schema.cnsn.parser.ParseCnSnStructToNormalizedStructTest
* org.opendaylight.yangtools.yang.data.json.schema.cnsn.serializer.SerializeNormalizedStructToCnSnStructTest


==yang-data-operations==
* org.opendaylight.yangtools.yang.data.operations.YangDataOperationsNegativeTest
* org.opendaylight.yangtools.yang.data.operations.YangDataOperationsTest

==yang-data-util==

==yang-maven-plugin==
* org.opendaylight.yangtools.yang2sources.plugin.GenerateSourcesTest
:: Test plugin function of code generation.
* org.opendaylight.yangtools.yang2sources.plugin.UtilTest
:: Test Util class and files loading with cache.


==yang-maven-plugin-it==
* org.opendaylight.yangtools.yang2sources.plugin.it.YangToSourcesPluginTestIT
:: Tests for yang-maven-plugin.

==yang-maven-plugin-spi==

==yang-model-api==

==yang-model-util==
* org.opendaylight.yangtools.yang.model.util.BitImplTest
:: Test BitImpl class - implementation of yang bit type.
* org.opendaylight.yangtools.yang.model.util.Int8Test
:: Test int8 yang type.
* org.opendaylight.yangtools.yang.model.util.MustDefinitionTest
:: Test MustDefinitionImpl class which represents must statement while parsing.

==yang-parser-api==

==yang-parser-impl==
* org.opendaylight.yangtools.yang.parser.impl.AugmentTest
:: Test parsing and resolving yang augmentations.
* org.opendaylight.yangtools.yang.parser.impl.Bug394Test
:: Test antlr parser for handling unknown nodes ([https://bugs.opendaylight.org/show_bug.cgi?id=394 BUG-394])
* org.opendaylight.yangtools.yang.parser.impl.GroupingTest
:: Test parsing and resolving yang grouping, uses and refine statement.
* org.opendaylight.yangtools.yang.parser.impl.TwoRevisionsTest
:: Test parsing 2 identical yang modules with different revision (both of them have to be present after parsing)
* org.opendaylight.yangtools.yang.parser.impl.TypesResolutionTest
:: Yang built-in types and typedef test.
* org.opendaylight.yangtools.yang.parser.impl.UsesAugmentTest
:: Test parser for handling uses/augment/uses model.
* org.opendaylight.yangtools.yang.parser.impl.YangModelValidationListTest
:: Test YangModelBasicValidationListener.
* org.opendaylight.yangtools.yang.parser.impl.YangModelValidationModuleTest
:: Test YangModelBasicValidationListener.
* org.opendaylight.yangtools.yang.parser.impl.YangModelValidationSubModuleTest
:: Test YangModelBasicValidationListener.
* org.opendaylight.yangtools.yang.parser.impl.YangModelValidationTest
:: Test YangModelBasicValidationListener.
* org.opendaylight.yangtools.yang.parser.impl.YangParserNegativeTest
:: Test if parser can handle negative situations (invalid imports, types, augment targets, refine, constraints, duplicate nodes, mandatory statement).
* org.opendaylight.yangtools.yang.parser.impl.YangParserSimpleTest
:: Test parsing anyxml and container nodes.
* org.opendaylight.yangtools.yang.parser.impl.YangParserTest
:: Test parsing: module header, typedef ordering, child nodes ordering, list, type's constraints, decimal type, union type, choice, deviation, unknown nodes, feature, extension, notification, rpc, submodules.
* org.opendaylight.yangtools.yang.parser.impl.YangParserWithContextTest
:: Test parsing of new module with already provided schema context.
* org.opendaylight.yangtools.yang.parser.impl.util.YangModelDependencyInfoTest
:: Test of YangModelDependencyInfo class.
* org.opendaylight.yangtools.yang.parser.util.ModuleDependencySortTest
:: Test sorting of modules based on their dependencies.
* org.opendaylight.yangtools.yang.parser.util.RefineHolderTest
:: Test RefineHolderImpl class which represents refine statement while parsing.
* org.opendaylight.yangtools.yang.parser.util.TopologicalSortTest
:: Test of TopologicalSort class and topological sorting.
