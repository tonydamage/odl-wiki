This is a list of the modules/bundles in each controller, the interfaces they export, the backing implementations of those interfaces, and a brief description of the functionality provided. The three controllers currently sketched out are: the [https://git.opendaylight.org/gerrit/#/admin/projects/controller OpenDaylight <tt>controller</tt>] and the [https://git.opendaylight.org/gerrit/#/admin/projects/net-virt-platform OpenDaylight <tt>net-virt-platform</tt>]. (For posterity's sake, a similar analysis of the Floodlight open source controller can be found at the bottom of the page.)

The current lists are a work in progress and may be either incomplete or out of date. For <tt>net-virt-platform</tt>, the list of modules, interfaces and implementations should be complete as of 4/30/2013. The similar list of package/bundles and interfaces (but not implementations) for <tt>controller</tt> should be complete as of 4/30/2013.

The lists were generated by searching for implementations of org.sdnplatform.core.module.IModule.getModuleServices() in <tt>net-virt-platform</tt> and all calls to org.osgi.framework.ServiceRegistration.Component.setInterface() in <tt>controller</tt>. Note that there are two implementations of the second function: one that takes a single interface and one that takes a list.

The <tt>net-virt-platform</tt> code is presented in a hierarchy of package => module => interface => implementation since that was pretty fairly easy to extract from the code.

The <tt>controller</tt> code is presented in a hierarchy of package/bundle => interface. In practice, there is a 1:1 correspondence between packages and bundles in the code, so that's fine. However, there is no real notion of a "module" which is easy to pull out. The result is that there is only currently per-bundle information.

<blockquote>In reality, it seems like there's something of a concept of a module in the Daylight code, but it's weakly codified. Basically, in implementations of org.opendaylight.controller.sal.core.ComponentActivatorAbstractBase.configureInstance() and org.opendaylight.controller.sal.core.ComponentActivatorAbstractBase.configureGlobalInstance(), they pass the particular implementation being activated and based on that they change the interfaces. In some cases, the package/bundle only has one such expected implementation and thus they don't ever use it. In other cases it has multiple, which are effectively modules, and it modifies it's behavior depending on which implementation is passed back.</blockquote>

Hopefully, this will provide at least a sound technical backing for discussions going forward.

==Daylight==

{| class="wikitable"
|+ OpenDaylight Controller
|-
! Package/OSGi Bundle
! Exported Interfaces
! Description
|-
| org.opendaylight.controller.arphandler.internal
|
* IHostFinder
* IListenDataPacket
|
|-
| org.opendaylight.controller.clustering.services_implementation.internal
|
* IClusterContainerServices
* IClusterServices
* IClusterGlobalServices
|
|-
| org.opendaylight.controller.clustering.stub.internal
|
* IClusterContainerServices
* IClusterGlobalServices
|
|-
| org.opendaylight.controller.configuration.internal
|
* IConfigurationService
* IConfigurationContainerService
* IConfigurationAware
|
|-
| org.opendaylight.controller.containermanager.internal
|
* IContainerManager
* IContainer
|
|-
| org.opendaylight.controller.forwarding.staticrouting.internal
|
* IForwardingStaticRouting
* ICacheUpdateAware
* IfNewHostNotify
* IConfigurationContainerAware
|
|-
| org.opendaylight.controller.forwardingrulesmanager.internal
|
* IContainerListener
* ISwitchManagerAware
* IForwardingRulesManager
* IInventoryListener
* ICacheUpdateAware
* IConfigurationContainerAware
* IFlowProgrammerListener
|
|-
| org.opendaylight.controller.hosttracker.internal
|
* ISwitchManagerAware
* IInventoryListener
* IfIptoHost
* IfHostListener
* ITopologyManagerAware
|
|-
| org.opendaylight.controller.protocol_plugin.openflow.internal
|
* IContainerListener
* IController
* IDataPacketListen
* IDataPacketMux
* IDiscoveryService
* IFlowProgrammerNotifier
* IInventoryShimExternalListener
* IMessageListener
* IOFStatisticsManager
* IPluginInDataPacketService
* IPluginInFlowProgrammerService
* IPluginInInventoryService
* IPluginInReadService
* IPluginInTopologyService
* IPluginReadServiceFilter 
* IRefreshInternalProvider
* IStatisticsListener
* ITopologyServiceShimListener
|
|-
| org.opendaylight.controller.protocol_plugins.stub.internal
|
* IPluginInReadService
|
|-
| org.opendaylight.controller.routing.dijkstra_implementation.internal
|
* ITopologyManagerAware
* IRouting
|
|-
| org.opendaylight.controller.sal.implementation.internal
|
* IReadService
* IPluginOutTopologyService
* ITopologyService
* IInventoryService
* IPluginOutInventoryService
* IFlowProgrammerService
* IPluginOutFlowProgrammerService
* IPluginOutDataPacketService
* IDataPacketService
|
|-
| org.opendaylight.controller.samples.loadbalancer.internal
|
* IListenDataPacket
* IConfigManager
|
|-
| org.opendaylight.controller.samples.simpleforwarding.internal
|
* IInventoryListener
* IfNewHostNotify
* IListenRoutingUpdates
|
|-
| org.opendaylight.controller.statisticsmanager.internal
|
* IStatisticsManager
|
|-
| org.opendaylight.controller.switchmanager.internal
|
* IListenInventoryUpdates
* ISwitchManager
* ICacheUpdateAware
* IConfigurationContainerAware
|
|-
| org.opendaylight.controller.topologymanager.internal
|
* IListenTopoUpdates
* ITopologyManager
* IConfigurationContainerAware
|
|-
| org.opendaylight.controller.usermanager.internal
|
* ICacheUpdateAware
* IUserManager
* IConfigurationAware
|}

==Net Virt Platform==
{| class="wikitable"
|+ Net Virt Platform
|-
! Package
! Module/Interface Class - Implementation Class
! Description
|-
| org.sdnplatform
| BetterDriverManager
| 
|-
| org.sdnplatform.addressspace
| AddressSpaceManagerImpl
* IAddressSpaceManagerService - AddressSpaceManagerImpl
* IEntityClassifierService - AddressSpaceManagerImpl
| Manages devices with overlapping identifiers (e.g., allows two hosts with the same MAC to live in different address spaces).  For multi-tenancy.
|-
| org.sdnplatform.core
| ControllerProvider
* IControllerService - Controller
OFMessageFilterManager
* IOFMessageFilterManagerService - OFMessageFilterManager
| Core control loops for OpenFlow switches, HA, application registration and message dispatch. 
|-
| org.sdnplatform.counter
| CounterStore
* ICounterStoreService - CounterStore
NullCounterStore
* ICounterStoreService - NullCounterStore
| Interface for handling counters and relevant operations on them.
|-
| org.sdnplatform.devicemanager.internal
| BetterDeviceManagerImpl
* ITagManagerService - BetterDeviceManagerImpl
* IDeviceService - DeviceManagerImpl
DefaultEntityClassifier
* IEntityClassifierService - DefaultEntityClassifier
DeviceManagerImpl
* IDeviceService - DeviceManagerImpl
| Maintains a unique ID for each device and any associated state, e.g., it's attachment point in the network, discovered IP addresses, vlans, and MAC addresses.
|-
| org.sdnplatform.flowcache
| BetterFlowCache
* IFlowCacheService - BetterFlowCache
FlowCache
* IFlowCacheService - FlowCache
FlowReconcileManager
* IFlowReconcileService - FlowReconcileManager
PortDownReconciliation
|
|-
| org.sdnplatform.forwarding
| Forwarding
* IForwardingService - Forwarding
RewriteServiceImpl
* IRewriteService - RewriteServiceImpl
|
|-
| org.sdnplatform.hub
| Hub
|
|-
| org.sdnplatform.jython
| JythonDebugInterface
|
|-
| org.sdnplatform.learningswitch
| LearningSwitch
* ILearningSwitchService - LearningSwitch
|
|-
| org.sdnplatform.linkdiscovery
| BetterLinkDiscoveryManager
|
|-
| org.sdnplatform.linkdiscovery.internal
| LinkDiscoveryManager
* ILinkDiscoveryService - LinkDiscoveryManager
|
|-
| org.sdnplatform.loadbalancer
| LoadBalancer
* ILoadBalancerService - LoadBalancer
|
|-
| org.sdnplatform.netvirt.manager.internal
| NetVirtManagerImpl
* INetVirtManagerService - NetVirtManagerImpl
|
|-
| org.sdnplatform.netvirt.virtualrouting.internal
| VirtualRouting
* IVirtualRoutingService - VirtualRouting
* IVirtualMacService - VirtualRouting
|
|-
| org.sdnplatform.ovsdb.internal
| OVSDBManagerImpl
* IOVSDBManagerService - OVSDBManagerImpl
|
|-
| org.sdnplatform.perfmon
| NullPktInProcessingTime
* IPktInProcessingTimeService - NullPktInProcessingTime
PktInProcessingTime
* IPktInProcessingTimeService - PktInProcessingTime
|
|-
| org.sdnplatform.restserver
| RestApiServer
* IRestApiService - RestApiServer
|
|-
| org.sdnplatform.staticflowentry
| StaticFlowEntryPusher
* IStaticFlowEntryPusherService - StaticFlowEntryPusher
|
|-
| org.sdnplatform.storage
| AbstractStorageSource
* IStorageSourceService - AbstractStorageSource
|
|-
| org.sdnplatform.threadpool
| ThreadPool
* IThreadPoolService - ThreadPool
|
|-
| org.sdnplatform.topology
| BetterTopologyManager
* ITopologyService - BetterTopologyManager
* IBetterTopologyService - BetterTopologyManager
* IRoutingService - BetterTopologyManager
TopologyManager
* ITopologyService - TopologyManager
* IRoutingService - TopologyManager
|
|-
| org.sdnplatform.tunnelmanager
| TunnelManager
* ITunnelManagerService - TunnelManager
|
|}

==Floodlight==

packages => modules => exported interfaces

*net.floodlightcontroller.core
**OFMessageFilterManager
***IOFMessageFilterManagerService
**FloodlightProvider/Controller
***IFloodlightProviderService
*net.floodlightcontroller.counter
**CounterStore
***ICounterStoreService
**NullCounterStore
***ICounterStoreService
*net.floodlightcontroller.devicemanager.internal
**DefaultEntityClassifier
***IEntityClassifierService
**DeviceManagerImpl
***IDeviceService
*net.floodlightcontroller.firewall
**Firewall
***IFirewallService
*net.floodlightcontroller.flowcache
**FlowCache
***IFlowCacheService
**FlowReconcileManager
***IFlowReconcileService
**PortDownReconciliation
***(none)
*net.floodlightcontroller.forwarding
**Forwarding
***(none)
*net.floodlightcontroller.hub
**Hub
***(none)
*net.floodlightcontroller.jython
**JythonDebugInterface
***(none)
*net.floodlightcontroller.learningswitch
**LearningSwitch
***ILearningSwitchService
*net.floodlightcontroller.linkdiscovery.internal
**LinkDiscoveryManager
***ILinkDiscoveryService
*net.floodlightcontroller.loadbalancer
**LoadBalancer
***ILoadBalancerService
*net.floodlightcontroller.perfmon
**NullPktInProcessingTime
***IPktInProcessingTimeService
**PktInProcessingTime
***IPktInProcessingTimeService
*net.floodlightcontroller.restserver
**RestApiServer
***IRestApiService
*net.floodlightcontroller.staticflowentry
**StaticFlowEntryPusher
***IStaticFlowEntryPusherService
*net.floodlightcontroller.storage
**AbstractStorageSource
***IStorageSourceService
**NoSqlStorageSource
***IStorageSourceService
*net.floodlightcontroller.threadpool
**ThreadPool
***IThreadPoolService
*net.floodlightcontroller.topology
**TopologyManager
***ITopologyService
***IRoutingService
*net.floodlightcontroller.ui.web
**StaticWebRoutable
***(none)
*net.floodlightcontroller.virtualnetwork
**VirtualNetworkFilter
***IVirtualNetworkService
