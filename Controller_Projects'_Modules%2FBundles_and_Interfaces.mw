Here's a first cut at a list of the modules/bundles in each controller and the interfaces they export. I used the version of Floodlight that is available on github rather than the current net-virt-platform code base because that's what I had loaded up in Eclipse when I started this process. Obviously, there are going to be some changes, but I think they are minor.

Throughout the mail I'll use Floodlight to refer to the Floodlight code base and Daylight to refer to the controller project currently hosted on the OpenDaylight git repositories. Hopefully, this will simplify the discussion.

After playing around for a while I generated this list by searching for implementations of net.floodlightcontroller.core.module.IFloodlightModule.getModuleServices() in Floodlight and all calls to org.osgi.framework.ServiceRegistration.Component.setInterface() in the Daylight code. Note that there are two implementations of the second function: one that takes a single interface and one that takes a list.

I classified the Floodlight code into a hierarchy of package => module => interface since that was pretty easy. I classified the Daylight code into a hierarchy of package/bundle => interface. In practice, I think that there's a 1:1 correspondence between packages and bundles in the Daylight code, so that's fine. However, there is no real notion of a "module" in Daylight which is easy to pull out. The result is that I can really only get per-bundle information.

In reality, it seems like there's something of a concept of a module in the Daylight code, but it's weakly codified. Basically, in implementations of org.opendaylight.controller.sal.core.ComponentActivatorAbstractBase.configureInstance() and org.opendaylight.controller.sal.core.ComponentActivatorAbstractBase.configureGlobalInstance(), they pass the particular implementation being activated and based on that they change the interfaces. In some cases, the package/bundle only has one such expected implementation and thus they don't ever use it. In other cases it has multiple, which are effectively modules, and it modifies it's behavior depending on which implementation is passed back.

Hopefully, this will provide at least a sound technical backing for discussions going forward.

==Floodlight==

packages => modules => exported interfaces

*net.floodlightcontroller.core
**OFMessageFilterManager
***IOFMessageFilterManagerService
**FloodlightProvider/Controller
***IFloodlightProviderService
*net.floodlightcontroller.counter
**CounterStore
***ICounterStoreService
**NullCounterStore
***ICounterStoreService
*net.floodlightcontroller.devicemanager.internal
**DefaultEntityClassifier
***IEntityClassifierService
**DeviceManagerImpl
***IDeviceService
*net.floodlightcontroller.firewall
**Firewall
***IFirewallService
*net.floodlightcontroller.flowcache
**FlowCache
***IFlowCacheService
**FlowReconcileManager
***IFlowReconcileService
**PortDownReconciliation
***(none)
*net.floodlightcontroller.forwarding
**Forwarding
***(none)
*net.floodlightcontroller.hub
**Hub
***(none)
*net.floodlightcontroller.jython
**JythonDebugInterface
***(none)
*net.floodlightcontroller.learningswitch
**LearningSwitch
***ILearningSwitchService
*net.floodlightcontroller.linkdiscovery.internal
**LinkDiscoveryManager
***ILinkDiscoveryService
*net.floodlightcontroller.loadbalancer
**LoadBalancer
***ILoadBalancerService
*net.floodlightcontroller.perfmon
**NullPktInProcessingTime
***IPktInProcessingTimeService
**PktInProcessingTime
***IPktInProcessingTimeService
*net.floodlightcontroller.restserver
**RestApiServer
***IRestApiService
*net.floodlightcontroller.staticflowentry
**StaticFlowEntryPusher
***IStaticFlowEntryPusherService
*net.floodlightcontroller.storage
**AbstractStorageSource
***IStorageSourceService
**NoSqlStorageSource
***IStorageSourceService
*net.floodlightcontroller.threadpool
**ThreadPool
***IThreadPoolService
*net.floodlightcontroller.topology
**TopologyManager
***ITopologyService
***IRoutingService
*net.floodlightcontroller.ui.web
**StaticWebRoutable
***(none)
*net.floodlightcontroller.virtualnetwork
**VirtualNetworkFilter
***IVirtualNetworkService

==Daylight==

packages/bundles => exported interfaces

*org.opendaylight.controller.arphandler.internal
**IHostFinder
**IListenDataPacket
*org.opendaylight.controller.clustering.services_implementation.internal
**IClusterContainerServices
**IClusterServices
**IClusterGlobalServices
*org.opendaylight.controller.clustering.stub.internal
**IClusterContainerServices
**IClusterGlobalServices
*org.opendaylight.controller.configuration.internal
**IConfigurationService
**IConfigurationContainerService
**IConfigurationAware
*org.opendaylight.controller.containermanager.internal
**IContainerManager
**IContainer
*org.opendaylight.controller.forwarding.staticrouting.internal
**IForwardingStaticRouting
**ICacheUpdateAware
**IfNewHostNotify
**IConfigurationContainerAware
*org.opendaylight.controller.forwardingrulesmanager.internal
**IContainerListener
**ISwitchManagerAware
**IForwardingRulesManager
**IInventoryListener
**ICacheUpdateAware
**IConfigurationContainerAware
**IFlowProgrammerListener
*org.opendaylight.controller.hosttracker.internal
**ISwitchManagerAware
**IInventoryListener
**IfIptoHost
**IfHostListener
**ITopologyManagerAware
*org.opendaylight.controller.protocol_plugin.openflow.internal
**IContainerListener
**IController
**IDataPacketListen
**IDataPacketMux
**IDiscoveryService
**IFlowProgrammerNotifier
**IInventoryShimExternalListener
**IMessageListener
**IOFStatisticsManager
**IPluginInDataPacketService
**IPluginInFlowProgrammerService
**IPluginInInventoryService
**IPluginInReadService
**IPluginInTopologyService
**IPluginReadServiceFilter 
**IRefreshInternalProvider
**IStatisticsListener
**ITopologyServiceShimListener
*org.opendaylight.controller.protocol_plugins.stub.internal
**IPluginInReadService
*org.opendaylight.controller.routing.dijkstra_implementation.internal
**ITopologyManagerAware
**IRouting
*org.opendaylight.controller.sal.implementation.internal
**IReadService
**IPluginOutTopologyService
**ITopologyService
**IInventoryService
**IPluginOutInventoryService
**IFlowProgrammerService
**IPluginOutFlowProgrammerService
**IPluginOutDataPacketService
**IDataPacketService
*org.opendaylight.controller.samples.loadbalancer.internal
**IListenDataPacket
**IConfigManager
*org.opendaylight.controller.samples.simpleforwarding.internal
**IInventoryListener
**IfNewHostNotify
**IListenRoutingUpdates
*org.opendaylight.controller.statisticsmanager.internal
**IStatisticsManager
*org.opendaylight.controller.switchmanager.internal
**IListenInventoryUpdates
**ISwitchManager
**ICacheUpdateAware
**IConfigurationContainerAware
*org.opendaylight.controller.topologymanager.internal
**IListenTopoUpdates
**ITopologyManager
**IConfigurationContainerAware
*org.opendaylight.controller.usermanager.internal
**ICacheUpdateAware
**IUserManager
**IConfigurationAware

==Net Virt Platform==
{| class="wikitable"
|+ Net Virt Platform
|-
! Package
! Module/Interface Class - Implementation Class
! Description
|-
| org.sdnplatform
| BetterDriverManager
| 
|-
| org.sdnplatform.addressspace
| AddressSpaceManagerImpl
* IAddressSpaceManagerService - AddressSpaceManagerImpl
* IEntityClassifierService - AddressSpaceManagerImpl
|
|-
| org.sdnplatform.core
| ControllerProvider
* IControllerService - Controller
OFMessageFilterManager
* IOFMessageFilterManagerService - OFMessageFilterManager
| Core control loops for OpenFlow switches, HA, application registration and message dispatch. 
|-
| org.sdnplatform.counter
| CounterStore
* ICounterStoreService - CounterStore
NullCounterStore
* ICounterStoreService - NullCounterStore
| Interface for handling counters and relevant operations on them.
|-
| org.sdnplatform.devicemanager.internal
| BetterDeviceManagerImpl
* ITagManagerService - BetterDeviceManagerImpl
* IDeviceService - DeviceManagerImpl
DefaultEntityClassifier
* IEntityClassifierService - DefaultEntityClassifier
DeviceManagerImpl
* IDeviceService - DeviceManagerImpl
|
|-
| org.sdnplatform.flowcache
| BetterFlowCache
* IFlowCacheService - BetterFlowCache
FlowCache
* IFlowCacheService - FlowCache
FlowReconcileManager
* IFlowReconcileService - FlowReconcileManager
PortDownReconciliation
|
|-
| org.sdnplatform.forwarding
| Forwarding
* IForwardingService - Forwarding
RewriteServiceImpl
* IRewriteService - RewriteServiceImpl
|
|-
| org.sdnplatform.hub
| Hub
|
|-
| org.sdnplatform.jython
| JythonDebugInterface
|
|-
| org.sdnplatform.learningswitch
| LearningSwitch
* ILearningSwitchService - LearningSwitch
|
|-
| org.sdnplatform.linkdiscovery
| BetterLinkDiscoveryManager
|
|-
| org.sdnplatform.linkdiscovery.internal
| LinkDiscoveryManager
* ILinkDiscoveryService - LinkDiscoveryManager
|
|-
| org.sdnplatform.loadbalancer
| LoadBalancer
* ILoadBalancerService - LoadBalancer
|
|-
| org.sdnplatform.netvirt.manager.internal
| NetVirtManagerImpl
* INetVirtManagerService - NetVirtManagerImpl
|
|-
| org.sdnplatform.netvirt.virtualrouting.internal
| VirtualRouting
* IVirtualRoutingService - VirtualRouting
* IVirtualMacService - VirtualRouting
|
|-
| org.sdnplatform.ovsdb.internal
| OVSDBManagerImpl
* IOVSDBManagerService - OVSDBManagerImpl
|
|-
| org.sdnplatform.perfmon
| NullPktInProcessingTime
* IPktInProcessingTimeService - NullPktInProcessingTime
PktInProcessingTime
* IPktInProcessingTimeService - PktInProcessingTime
|
|-
| org.sdnplatform.restserver
| RestApiServer
* IRestApiService - RestApiServer
|
|-
| org.sdnplatform.staticflowentry
| StaticFlowEntryPusher
* IStaticFlowEntryPusherService - StaticFlowEntryPusher
|
|-
| org.sdnplatform.storage
| AbstractStorageSource
* IStorageSourceService - AbstractStorageSource
|
|-
| org.sdnplatform.threadpool
| ThreadPool
* IThreadPoolService - ThreadPool
|
|-
| org.sdnplatform.topology
| BetterTopologyManager
* ITopologyService - BetterTopologyManager
* IBetterTopologyService - BetterTopologyManager
* IRoutingService - BetterTopologyManager
TopologyManager
* ITopologyService - TopologyManager
* IRoutingService - TopologyManager
|
|-
| org.sdnplatform.tunnelmanager
| TunnelManager
* ITunnelManagerService - TunnelManager
|
|}
