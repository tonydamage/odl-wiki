==Overview and Architecture==
===Overview===
We propose a southbound plugin that can control the off-the-shelf commodity Ethernet switches for the purpose of building SDN using Ethernet switches. For Ethernet switches, forwarding table and ACL are where one can install the flow configuration on, and this is done via SNMP and CLI in the proposed plugin. In addition, extensions to the SAL configuration APIs are needed to provide additional API to support some settings, e.g. disabling STP and flooding, etc, which are required for Ethernet switches in SDN.

[[File:SNMP4SDN_in_ODL_Architecture.jpg|400px]]

'''Figure. SNMP4SDN as a southbound plugin in OpenDaylight architecture'''

===Architecture===
The modules in the plugin are depicted as the following figure, their features exposed to users includes flow configuration, topology discovery, proprietary configurations, statistic retrieving, and switch/port property retrieving. Brief guide is as follows, comprehensive guide could be found [[SNMP4SDN:Developer_Guide#Architecture | here]].

[[File:snmp4sdn_modules.jpg|400px]]

'''Figure. Modules in the SNMP4SDN plugin'''

* FlowProgrammerService: to add/modify/remove flows on the switches.
* ReadService: to acquire the flow's or switch's or port's statistics.
* InventoryService: to acquire the switches’ and their ports’ properties.
* DiscoveryService: to probe and resolve the underlying switches as well as the port pairs connecting the switches. The probing is realized by SNMP queries. The updates from discovery will also be reflected to the TopologyService.
* TopologyService: to query and acquire the switches' topology.
* ConfigService: to do kinds of vendor-specific proprietary settings on switches
** Supported vendor-specific proprietary settings, such as: to disable kind of flooding (BPDU flooding, broadcast flooding, multicast flooding, and unknown flooding), disabling source mac check and source learning, and setting SNMP host and community.

For the services above, when they need to read or configure the underlying switches via SNMP or CLI, these queries are dealt with the modules SNMPHandler and CLIHandler which directly talk with the switches.

==Installation Guide==
[[SNMP4SDN:Installation_Guide | Installation Guide]]

==Installation Troubleshooting==
The plugin will throw an exception during startup if the controller is run without privileges to bind the SNMP port

=== Problem starting SNMP Trap Interface ===
It is possible to get the following exception during controller startup:
 2014-01-31 15:00:44.688 CET [fileinstall-./plugins] WARN  o.o.snmp4sdn.internal.SNMPListener - Problem starting SNMP Trap Interface: {}
 java.net.BindException: Permission denied
        at java.net.PlainDatagramSocketImpl.bind0(Native Method) ~[na:1.7.0_51]
        at java.net.AbstractPlainDatagramSocketImpl.bind(AbstractPlainDatagramSocketImpl.java:95) ~[na:1.7.0_51]
        at java.net.DatagramSocket.bind(DatagramSocket.java:376) ~[na:1.7.0_51]
        at java.net.DatagramSocket.<init>(DatagramSocket.java:231) ~[na:1.7.0_51]
        at java.net.DatagramSocket.<init>(DatagramSocket.java:284) ~[na:1.7.0_51]
        at java.net.DatagramSocket.<init>(DatagramSocket.java:256) ~[na:1.7.0_51]
        at org.snmpj.SNMPTrapReceiverInterface.<init>(SNMPTrapReceiverInterface.java:126) ~[org.snmpj-1.4.3.jar:na]
        at org.snmpj.SNMPTrapReceiverInterface.<init>(SNMPTrapReceiverInterface.java:99) ~[org.snmpj-1.4.3.jar:na]
        at org.opendaylight.snmp4sdn.internal.SNMPListener.<init>(SNMPListener.java:75) ~[bundlefile:na]
        at org.opendaylight.snmp4sdn.core.internal.Controller.start(Controller.java:174) [bundlefile:na]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_51]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_51]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_51]
        at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_51]
        at org.apache.felix.dm.InvocationUtil.invokeMethod(InvocationUtil.java:111) [bundlefile:na]
        at org.apache.felix.dm.InvocationUtil.invokeCallbackMethod(InvocationUtil.java:66) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl.invokeCallbackMethod(ComponentImpl.java:688) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl.invoke(ComponentImpl.java:679) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl.bindService(ComponentImpl.java:624) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl.access$400(ComponentImpl.java:52) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl$7.run(ComponentImpl.java:181) [bundlefile:na]
        at org.apache.felix.dm.impl.SerialExecutor$1.run(SerialExecutor.java:47) [bundlefile:na]
        at org.apache.felix.dm.impl.SerialExecutor.scheduleNext(SerialExecutor.java:84) [bundlefile:na]
        at org.apache.felix.dm.impl.SerialExecutor.access$000(SerialExecutor.java:33) [bundlefile:na]
        at org.apache.felix.dm.impl.SerialExecutor$1.run(SerialExecutor.java:50) [bundlefile:na]
        at org.apache.felix.dm.impl.SerialExecutor.scheduleNext(SerialExecutor.java:84) [bundlefile:na]
        at org.apache.felix.dm.impl.SerialExecutor.execute(SerialExecutor.java:68) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl.calculateStateChanges(ComponentImpl.java:231) [bundlefile:na]
        at org.apache.felix.dm.impl.ComponentImpl.start(ComponentImpl.java:399) [bundlefile:na]
        at org.apache.felix.dm.DependencyManager.add(DependencyManager.java:169) [bundlefile:na]
        at org.opendaylight.controller.sal.core.ComponentActivatorAbstractBase.start(ComponentActivatorAbstractBase.java:346) [bundlefile:na]
        at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:711) [org.eclipse.osgi-3.8.1.v20120830-144521.jar:na]
        at java.security.AccessController.doPrivileged(Native Method) [na:1.7.0_51]
        at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:702) [org.eclipse.osgi-3.8.1.v20120830-144521.jar:na]
        at org.eclipse.osgi.framework.internal.core.BundleContextImpl.start(BundleContextImpl.java:683) [org.eclipse.osgi-3.8.1.v20120830-144521.jar:na]
        at org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:381) [org.eclipse.osgi-3.8.1.v20120830-144521.jar:na]
        at org.eclipse.osgi.framework.internal.core.AbstractBundle.start(AbstractBundle.java:300) [org.eclipse.osgi-3.8.1.v20120830-144521.jar:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:1175) [org.apache.felix.fileinstall-3.1.6.jar:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:1153) [org.apache.felix.fileinstall-3.1.6.jar:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.processAllBundles(DirectoryWatcher.java:1146) [org.apache.felix.fileinstall-3.1.6.jar:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:456) [org.apache.felix.fileinstall-3.1.6.jar:na]
        at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:263) [org.apache.felix.fileinstall-3.1.6.jar:na]

This indicates that the controller is being run as a user which does not have sufficient OS privileges to bind the SNMPTRAP port (162/UDP)

==Configuration==
1. Edit the switch list database file, a sample is [[:File:SwitchDB.txt | here]]. Note that the first line is title and should not be removed.

2. After Hydrogen is launched, in OSGi console, use the command ''s4sReadDB'' to read the switch list database file into SNMP4SDN plugin. 
<pre>
s4sReadDB <filepath>
For example: s4sReadDB /home/sdnadmin/SwitchDB.txt
</pre>

3. If one’d like to confirm whether the switch list database file is read correctly, use the command ''s4sPrintDB'' to show the database content
<pre>s4sPrintDB</pre>

4. Initial topology discovery: use the command ''s4sTopoDiscover'' so that the SNMP4SDN plugin will search and resolve the switches’ topology
<pre>s4sTopoDiscover</pre>

==Tutorial / How-To==
===Topology Discovery===
Step 1 is required only once, Step 2 is also required only once or when one’d like to refresh the topology.
# In OSGi console, execute: s4sReadDB <path>   (show it: s4sPrintDB)
# In OSGi console, execute: s4sTopoDiscover 
# Then one may see the topology in Web GUI, pressing the OpenDaylight icon at the left-top corner

===Flow configurations===
Refer to the Web/Graphical Interface below

==Web / Graphical Interface==
Web GUI: http://<ip_address_of_where_the_controller_is_installed>:8080 (default username/password: admin/admin)
===Show/Refresh the switch topology===
1. Press the OpenDaylight icon at the left-top corner, one can see the switches’ topology.
* '''In initialization''': The topology may grow from zero to complete when every time pressing the icon, if s4sTopoDiscover was just executed for the first time in OSGi console, it takes a little time to collect the topology completely
* '''New switch join''': if a switch is newly connected to the subnet, it will be detected by the plugin, then users can press the icon again and see the new switch
* '''Switch's label''': The switches are listed with Node ID as “SNMP|xxxxxx” (xxxxxx is the switch’s MAC address, as specified in the switch list database file. But it is not shown in hexadecimal string due to controller’s limitation. This will be resolved in later)
* '''Unmanaged switches''': If a switch exists in the subnet but is not listed in the switch list database file, then the switch would not be shown here

[[File:snmp4sdn_topology_init.jpg|400px]]

2. If the topology are not shown as expected, please do:
* Switch list database file is already read? In OSGi console, execute the command ''s4sReadDB <path>''  (if would like to show it: use the command ''s4sPrintDB'')
* Execute the command ''s4sTopoDiscover'' in OSGi console again

===Add flow to switch===
* '''Currently only configurations with SNMP are supported''' (i.e. add/remove entries on switch’s forwarding table).
** '''That is, the effective fields are: Node(switch)/VLAN ID/Destination Mac Address/Action(add output port) [These four items must be given together].''' Other fields are ineffective now.

1. Add flow entry

[[File:snmp4sdn_add_flow.jpg|500px]]

2. Specify the flow’s name and target node

[[File:snmp4sdn_add_flow_name_node.jpg|400px]]

3. Specify the VLAN ID and Destination MAC Address

[[File:snmp4sdn_add_flow_vlan_mac.jpg|400px]]

4. Specify the Action – Add Output Port, and assign the output port

[[File:snmp4sdn_add_flow_action_outport.jpg|400px]]

5. One can see the log of the flow adding, in the OSGi console

[[File:snmp4sdn_add_flow_log.jpg|600px]]

===Remove flow on switch===
*'''Currently only configurations with SNMP are supported''' (i.e. add/remove entries on switch’s forwarding table)
1. Select the flow to be removed

[[File:snmp4sdn_remove_flow.jpg|500px]] 

2. You can see the log of the flow removing, in the OSGi console

[[File:snmp4sdn_remove_flow_log.jpg|600px]]

==Command Line Interface==
None

==Console Interface==
None

==Programmatic Interface==
The starting point for developers is [[SNMP4SDN:Installation_Guide#Installation_from_scratch | here]] and [[SNMP4SDN:Developer_Guide | here]].

==Help==
* [[SNMP4SDN:Main | SNMP4SDN Wiki]]
* SNMP4SDN Mailing List ([https://lists.opendaylight.org/mailman/listinfo/snmp4sdn-users user], [https://lists.opendaylight.org/mailman/listinfo/snmp4sdn-dev developer], [https://lists.opendaylight.org/mailman/listinfo/snmp4sdn-bugs bugs], [https://lists.opendaylight.org/mailman/listinfo/snmp4sdn-announce announcement])
