== Maintainer ==
Carol Sanders (carol.sanders@brocade.com)

== Introduction ==

Robot Framework is a Keyword Driven automation framework using Python or Java as it's back end. Test cases are automated by writing steps using Robot framework keywords.

Robot Framework is a Python-based, extensible keyword-driven test automation framework for end-to-end acceptance testing and acceptance-test-driven development (ATDD). It can be used for testing distributed, heterogeneous applications, where verification requires touching several technologies and interfaces.

    Enables easy-to-use tabular syntax for creating test cases in a uniform way.
    Provides ability to create reusable higher-level keywords from the existing keywords.
    Provides easy-to-read result reports and logs in HTML format.
    Is platform and application independent.
    Provides a simple library API for creating customized test libraries which can be implemented with either Python or Java.
    Provides a command line interface and XML based output files for integration into existing build infrastructure 
    (continuous integration systems).
    Provides support for Selenium for web testing, Java GUI testing, running processes, Telnet, SSH, and so on.
    Supports creating data-driven test cases.
    Has built-in support for variables, practical particularly for testing in different environments.
    Provides tagging to categorize and select test cases to be executed.
    Enables easy integration with source control: test suites are just files and directories whos version can be designated with the
    production code.
    Provides test-case and test-suite -level setup and tear down.
    The modular architecture supports creating tests even for applications with several diverse interfaces. 

Check for more information on Robot.
[http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.8.1 Robot user guide]

== Test Case Organization == 

Collections of test cases are called test suites in Robot Framework. Every input file which contains test cases forms a test suite. It is possible to organize test cases hierarchically by placing test case files into directories and these directories into other directories. All these directories automatically create higher level test suites that get their names from directory names. Since test suites are just files and directories, 
they are trivially placed into any version control system.

=== Test Repository ===

* We use [[CrossProject:Integration_Group:Testopia|Testopia]] for test documentation and report and GIT/Gerrit for test code management
* Robot test suites for Continuous System Integration Test (CSIT) are stored in our Integration GIT under /test/csit/suites
* We have suites for several distributions like Base, Base with -of13 option, Virtualization or Service Provider. Every suite matches a Testopia Test Plan
* Under each main suite folder we have sub-suites that can run independently to test an specific controller functions like AD-SAL NSF, MD-SAL NSF, AD-SAL Apps, OVSDB or VTN. Every sub-suite matches a Testopia Category
* Finally under every sub-suite we find the test files named “module.txt” (like “030__topology_manager.txt”).  Each test file is in charge of testing a particular component or feature in Opendaylight like Topology Manager, Switch Manager, Flow Programmer, etc… Every file here matches a Testopia Test Case

=== Test Order ===

* Test case order makes sense as we prefer to start testing from bottom to top, from base features to more advanced features
* Order is implemented by adding "XXX__" at the beginning of a filename or folder like: “030__topology_manager.txt”, “040__forwarding_rules_manager.txt”, etc... The "XXX__" will be used for test execution and will be neglected for anything else like reporting.

=== Test Pre-conditions ===

Test pre-conditions (and post-conditions) are written in the "__init__.txt" file in the test suite folders. So far the most typical pre-condition is to start mininet VM with topology=tree,2 which creates 3 OF switches: 

* SW1 with 2 ports: 1,2 that connects to SW2 and SW3
* SW2 with 3 ports: 1 to host1 (10.0.0.1), 2 to host2 (10.0.0.2) and 3 to SW1
* SW3 with 3 ports: 1 to host3 (10.0.0.3), 2 to host4 (10.0.0.4) and 3 to SW1

=== How to use Mininet from Robot ===

Robot connects to mininet VM during test setup phase (__init__.txt). After that mininet shell (mininet>) is available for system test. Use Write and Read keywords from SSHLibrary like in the example below to control Mininet VM. Please do not forget to clear any mininet configuration and also clear output buffer (use Read) for next test file to run clean.

<pre>
*** Settings ***
Library     SSHLibrary

*** Keywords ***
My test case  
    Write    h1 ifconfig
    Sleep    2
    ${buffer}=     Read
</pre>

=== Robot Test File sample ===

<pre>
[odluser@odl-test-tools base]$ cat 035__forwarding_manager.txt 
*** Settings ***
Documentation     Test suite for the forwarding manager module.
Suite Setup       Create Session   session   http://${CONTROLLER}:8080   auth=${AUTH}   headers=${HEADERS}
Suite Teardown    Delete All Sessions
Library           SSHLibrary
Library           Collections
Library           ../../libraries/RequestsLibrary.py
Library           ../../libraries/Common.py
Variables         ../../variables/Variables.py

*** Variables ***
${name}           test_route1
${key}            staticRoute
${REST_CONTEXT}    /controller/nb/v2/staticroute

*** Test Cases ***
Add a static route
    [Documentation]    Add a static route, list to validate the result.
    [Tags]    add
    ${body}    Create Dictionary    name    ${name}    prefix    192.168.1.0/24    nextHop
    ...    10.0.0.2
    ${resp}    Put    session    ${REST_CONTEXT}/${CONTAINER}/route/${name}    data=${body}
    Should Be Equal As Strings    ${resp.status_code}    201    Response status code error
    ${resp}    Get    session    ${REST_CONTEXT}/${CONTAINER}/routes
    Should Be Equal As Strings    ${resp.status_code}    200    Response status code error
    ${result}    To JSON    ${resp.content}
    ${content}    Get From Dictionary    ${result}    ${key}
    List Should Contain Value    ${content}    ${body}
    Sleep    2
Remove a static route
    [Documentation]    Remove a static route, list to validate the result.
    [Tags]    remove
    ${body}    Create Dictionary    name    ${name}    prefix    192.168.1.0/24    nextHop
    ...    10.0.0.2
    ${resp}    Delete    session    ${REST_CONTEXT}/${CONTAINER}/route/${name}
    Should Be Equal As Strings    ${resp.status_code}    204    Response status code error
    ${resp}    Get    session    ${REST_CONTEXT}/${CONTAINER}/routes
    Should Be Equal As Strings    ${resp.status_code}    200    Response status code error
    ${result}    To JSON    ${resp.content}
    ${content}    Get From Dictionary    ${result}    ${key}
    List Should Not Contain Value    ${content}    ${body}
Remove flows
    [Documentation]    Remove flows generated by simple fwd
    [Tags]   Get
    Write   dpctl del-flows
    Sleep   1
    Read
</pre>

== Start Test ==

System test is invoked using a command like: 
<pre>
pybot -v CONTROLLER:<Controller IP> -v MININET:<Mininet IP> -v MININET_USER:<Mininet_Username> -v USER_HOME:<Robot User Home path> <Robot Suite path>
</pre>

Where:
* ${CONTROLLER}= Controller IP
* ${MININET}= Mininet IP
* ${MININET_USER}= Mininet Username
* ${USER_HOME}= Robot User Home path

The above global variables can be used in any test case.

== Robot Links ==

* [https://docs.google.com/spreadsheet/ccc?key=0AoYIvwUEF-qYdGl4LTFEU3otMl9MVl9sdmUxbXZOVmc&usp=sharing Test Repository sheet]
* [[File:Robot-Tutorial.ppt]]
* [[CrossProject:Integration Group:CSIT Test Tools: Robot Based| CSIT Robot based Test Tool]]

[[Category:Integration Group]]
