'''How To Access Robot Framework'''

Robot Framework is a Keyword Driven automation framework using Python or Java as it's backend. Test cases are automated by writing steps using Robot framework keywords.

Robot Framework is a Python-based, extensible keyword-driven test automation framework for end-to-end acceptance testing and acceptance-test-driven development (ATDD). 
It can be used for testing distributed, heterogeneous applications, where verification requires touching several technologies and interfaces.

    Enables easy-to-use tabular syntax for creating test cases in a uniform way.
    Provides ability to create reusable higher-level keywords from the existing keywords.
    Provides easy-to-read result reports and logs in HTML format.
    Is platform and application independent.
    Provides a simple library API for creating customized test libraries which can be implemented natively with either Python or Java.
    Provides a command line interface and XML based output files for integration into existing build infrastructure (continuous integration systems).
    Provides support for Selenium for web testing, Java GUI testing, running processes, Telnet, SSH, and so on.
    Supports creating data-driven test cases.
    Has built-in support for variables, practical particularly for testing in different environments.
    Provides tagging to categorize and select test cases to be executed.
    Enables easy integration with source control: test suites are just files and directories that can be versioned with the production code.
    Provides test-case and test-suite -level setup and teardown.
    The modular architecture supports creating tests even for applications with several diverse interfaces. 

<big>'''Test Case Organization'''</big> 

'''Test Suite'''

Collections of test cases are called test suites in Robot Framework. Every input file which contains test cases forms a test suite. 
It is possible to organize test cases hierarchically by placing test case files into directories and these directories into other directories. 
All these directories automatically create higher level test suites that get their names from directory names. Since test suites are just files and directories, 
they are trivially placed into any version control system. 

<big>'''Using Robot Framework at Open Test Lab'''</big> <br/>
1. Connect to the Lab at Ericsson using access instructions https://wiki.opendaylight.org/view/CrossProject:Integration_Group:Test_Lab
2. Conect to odl-test-tools 10.125.136.37
             username: odluser,  password: odluser1
3. CD to public_html. Here is the current working directory for robot test case files.  <br/>
4. Create a directory in which you run your Robot test case /test siute file as to not write over others' output files created after each run. <br/>
5. To run your test case created as a .txt or .html use the following command example: <br/>
       pybot SimpleTest.txt  where:  pybot runs test case files written to use Python keywords. <br/>
                                     SimpleTest.txt is the name of your test case file. <br/>
6. Test Run Results <br/>
    Files output.xml, log.html, and report.html are created each time you run a test case. <br/>
    These files are stored in the current directory from where you run your test case file. <br/>
7. Viewing results <br/>
     Files in ~olduser/public_html are accessible via browser but you will have to configure an ssh tunnel to browse to http://10.125.136.37/~odluser/ <br/>
     Test run results are also directed to standard out when run on the cli directly. <br/>
          
'''Example Test Run'''

odluser@odl-test-tools:~/public_html/Tunnels/GRE$ pybot -T -b GREtunnels-debug GREtunnels.txt
==============================================================================
GREtunnels                                                                    
==============================================================================
GRE Tunnel Functionnal Test                                           | PASS |
------------------------------------------------------------------------------
Verify Build Version                                                  | PASS |
------------------------------------------------------------------------------
Configure Commands Test                                               | PASS |
------------------------------------------------------------------------------
Show Commands Test                                                    | FAIL |
'tun0@lo: <POINTOPOINT,NOARP,UP,LOWER_UP> mtu 65508 qdisc noqueue state UP group default 
    link/gre 101.0.0.2 peer 101.0.0.1
    inet 201.0.0.2/24 brd 201.0.0.255 scope global tun0
       valid_lft forever preferred_lft forever
    inet6 fe80::200:5efe:6500:2/64 scope link 
       valid_lft forever preferred_lft forever
    Description: VR test tunnel

    RX:  bytes    packets     errors    dropped    overrun      mcast
         59220        705          0          0          0          0
    TX:  bytes    packets     errors    dropped    carrier collisions
         45120        705          0          0          0          0
vyatta@GREvr-r2:~$' contains 'tun0'
------------------------------------------------------------------------------
Logout of Host                                                        | PASS |
------------------------------------------------------------------------------
GREtunnels                                                            | FAIL |
5 critical tests, 4 passed, 1 failed
5 tests total, 4 passed, 1 failed
==============================================================================
Debug:   /home/carolsand/public_html/Tunnels/GRE/GREtunnels-debug-20131104-112845.txt
Output:  /home/carolsand/public_html/Tunnels/GRE/output-20131104-112845.xml
Log:     /home/carolsand/public_html/Tunnels/GRE/log-20131104-112845.html
Report:  /home/carolsand/public_html/Tunnels/GRE/report-20131104-112845.html
