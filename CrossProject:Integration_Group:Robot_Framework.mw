==How To Access Robot Framework==

Robot Framework is a Keyword Driven automation framework using Python or Java as it's backend. Test cases are automated by writing steps using Robot framework keywords.

Robot Framework is a Python-based, extensible keyword-driven test automation framework for end-to-end acceptance testing and acceptance-test-driven development (ATDD). 
It can be used for testing distributed, heterogeneous applications, where verification requires touching several technologies and interfaces.

    Enables easy-to-use tabular syntax for creating test cases in a uniform way.
    Provides ability to create reusable higher-level keywords from the existing keywords.
    Provides easy-to-read result reports and logs in HTML format.
    Is platform and application independent.
    Provides a simple library API for creating customized test libraries which can be implemented natively with either Python or Java.
    Provides a command line interface and XML based output files for integration into existing build infrastructure (continuous integration systems).
    Provides support for Selenium for web testing, Java GUI testing, running processes, Telnet, SSH, and so on.
    Supports creating data-driven test cases.
    Has built-in support for variables, practical particularly for testing in different environments.
    Provides tagging to categorize and select test cases to be executed.
    Enables easy integration with source control: test suites are just files and directories that can be versioned with the production code.
    Provides test-case and test-suite -level setup and teardown.
    The modular architecture supports creating tests even for applications with several diverse interfaces. 

==Test Case Organization== 

===Test Suite===

Collections of test cases are called test suites in Robot Framework. Every input file which contains test cases forms a test suite. 
It is possible to organize test cases hierarchically by placing test case files into directories and these directories into other directories. 
All these directories automatically create higher level test suites that get their names from directory names. Since test suites are just files and directories, 
they are trivially placed into any version control system. 

<big>'''Using Robot Framework at Open Test Lab'''</big> <br/>
1. Connect to the Lab at Ericsson using access instructions https://wiki.opendaylight.org/view/CrossProject:Integration_Group:Test_Lab <br/>
2. Conect to odl-test-tools 10.125.136.37 (username: odluser,  password: odluser1)
    ssh odluser@10.125.136.37
3. CD to public_html. Here is the current working directory for robot test case files.
    [odluser@odl-test-tools ~] cd public_html
4. Create a directory in which you run your Robot test case / test suite file as to not write over others' output files created after each run.
    [odluser@odl-test-tools public_html]$ mkdir CSIT
    [odluser@odl-test-tools public_html]$ cd CSIT
5. Create a Robot text file using library keywords. Libraries are normaly well documented in www.

   [odluser@odl-test-tools CSIT]$ cat SimpleTest.txt
   *** Settings ***
   Library       Collections
   Library       RequestsLibrary
   *** Testcases ***
   Get Topology
       ${auth}=    Create List    admin    admin
       ${headers}=    Create Dictionary    Content-Type   application/json
       Create Session    controller   http://10.125.136.52:8080    headers=${headers}   auth=${auth} 
       ${resp}=    Get    controller    /controller/nb/v2/topology/default 
       Should Be Equal As Strings    ${resp.status_code}    200
       ${jsondata}=  To Json  ${resp.content}
       Log    ${jsondata}


6. To run your test case created as a .txt or .html use the following command example:
    [odluser@odl-test-tools CSIT]$ pybot SimpleTest.txt
    ==============================================================================
    SimpleTest                                                                    
    ==============================================================================
    Get Topology                                                          | PASS |
    ------------------------------------------------------------------------------
    SimpleTest                                                            | PASS |
    1 critical test, 1 passed, 0 failed
    1 test total, 1 passed, 0 failed
    ==============================================================================
    Output:  /home/odluser/public_html/CSIT/output.xml
    Log:     /home/odluser/public_html/CSIT/log.html
    Report:  /home/odluser/public_html/CSIT/report.html
  
Where pybot runs test case files written to use Python keywords. SimpleTest.txt is the name of your test case file.<br/>

7. Test Run Results files: output.xml, log.html, and report.html are created each time you run a test case. These files are stored in the current directory from where you run your test case file.

   [odluser@odl-test-tools CSIT]$ ls -l
   total 404
   -rw-rw-r--. 1 odluser odluser 194773 Nov  8 09:40 log.html
   -rw-rw-r--. 1 odluser odluser   9185 Nov  8 09:40 output.xml
   -rw-rw-r--. 1 odluser odluser 197296 Nov  8 09:40 report.html
   -rwxrwxr-x. 1 odluser odluser    522 Nov  8 09:40 SimpleTest.txt

8. Viewing results files: ~olduser/public_html folder is accessible via browser but you will have to configure an ssh tunnel to browse to http://10.125.136.37/~odluser/. Test run results are also directed to standard out when run on the cli directly.

==CSIT Robot Library == 
Please go to [[CrossProject:Integration_Group:CSIT_Test_Robot_Lib| CSIT Test Robot Library]].

[[Category:Integration Group]]
