== Maintainer ==
Carol Sanders (carol.sanders@brocade.com)

== Introduction ==

Robot Framework is a Keyword Driven automation framework using Python or Java as it's back end. Test cases are automated by writing steps using Robot framework keywords.

Robot Framework is a Python-based, extensible keyword-driven test automation framework for end-to-end acceptance testing and acceptance-test-driven development (ATDD). It can be used for testing distributed, heterogeneous applications, where verification requires touching several technologies and interfaces.

    Enables easy-to-use tabular syntax for creating test cases in a uniform way.
    Provides ability to create reusable higher-level keywords from the existing keywords.
    Provides easy-to-read result reports and logs in HTML format.
    Is platform and application independent.
    Provides a simple library API for creating customized test libraries which can be implemented with either Python or Java.
    Provides a command line interface and XML based output files for integration into existing build infrastructure 
    (continuous integration systems).
    Provides support for Selenium for web testing, Java GUI testing, running processes, Telnet, SSH, and so on.
    Supports creating data-driven test cases.
    Has built-in support for variables, practical particularly for testing in different environments.
    Provides tagging to categorize and select test cases to be executed.
    Enables easy integration with source control: test suites are just files and directories whos version can be designated with the
    production code.
    Provides test-case and test-suite -level setup and tear down.
    The modular architecture supports creating tests even for applications with several diverse interfaces. 

Check for more information on Robot.
[http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.8.1 Robot user guide]

== Test Case Organization == 

Collections of test cases are called test suites in Robot Framework. Every input file which contains test cases forms a test suite. 
It is possible to organize test cases hierarchically by placing test case files into directories and these directories into other directories. 
All these directories automatically create higher level test suites that get their names from directory names. Since test suites are just files and directories, 
they are trivially placed into any version control system.

== Robot Links ==

* [[File:Robot-Tutorial.ppt]]
* [[CrossProject:Integration Group:CSIT Test Tools: Robot Based| CSIT Robot based Test Tool]].

[[Category:Integration Group]]
