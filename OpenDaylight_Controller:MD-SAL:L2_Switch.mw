=Overview=

This is MD-SAL based implementation of a learning switch with optimizations in how packet is forwarded. 

When a packet comes in, '''L2Switch''' learns about the source's mac address if it doesnt already know about. It then checks if it knows where the target is. If it knows about the target, it ''teleports'' the packet to target. If it doesnt know about the target, it sends a broadcast message on all ''external'' ports in the network.
''Teleporting'' and using '''only''' ''external'' ports for broadcasting is an optimization over "flooding" which typical learning switch would do.

=Assumptions=

#Assumes that hosts don't move i.e a mac address associated with a port on a node does'nt move to another port.
#Assumes LLDP packets are handled by Openflow Plugin. This switch ignores LLDP packets
#Assumes that for non LLDP packets, L2 Switch is the only forwarder of packet. If not, duplicate packets may be forwarded.
#All nodes in the network are openflow capable controlled by the controller.

=Limitation=

# Flow expiration is not handled
# Flow is not updated when host moves (see   [[OpenDaylight Controller:MD-SAL:L2 Switch#Assumptions|Assumptions]] section)
# Flows are not reprogrammed when topology changes

=Switch actions=

Switch only deals with *non lldp* ethernet packets. 

{| class="wikitable"
|-
! Source Mac !! Target Mac !! L2 Switch Action !! Comments
|-
| Unknown || Unknown || Learn source, Broadcase packet on all external port minus ingress ||
|-
| Unknown || Known || Learn source, Unicast packet to the target || L2 Switch is essentially ''teleporting'' the packet to the ''node'' where the target is ''attached''. Attachment point is where the target is physically attached.
|-
| Known || Unknown || Broadcast packet on all external ports minus ingress || L2 Switch doesnt need to learn as it already knows the source. There could be case, however, where a host has moved from one node to another node in the network. In the current implementation, we dont update the attachment point. 
|-
| Known || Known || Unicast the packet to the target, find the shortest path between source and destination and install mac-to-mac flows on all the nodes in that path||
|}
