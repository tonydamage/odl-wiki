=Overview=

This is MD-SAL based implementation of a learning switch with optimizations in how packet is forwarded. 

When a packet comes in, '''L2Switch''' learns about the source's mac address if it doesnt already know about. It then checks if it knows where the target is. If it knows about the target, it ''teleports'' the packet to target. If it doesnt know about the target, it sends a broadcast message on all ''external'' ports in the network.
''Teleporting'' and using '''only''' ''external'' ports for broadcasting is an optimization over "flooding" which typical learning switch would do.

=Assumptions=

#Assumes that hosts don't move i.e a mac address associated with a port on a node does'nt move to another port.

=Limitation=

# Flow expiration is not handled
# Flow is not updated when host moves (see   [[OpenDaylight Controller:MD-SAL:L2 Switch#Assumptions|Assumptions]] section)
# Flows are not reprogrammed when topology changes

=Scenarios=
{| class="wikitable"
|-
! Source Mac !! Target Mac !! L2 Switch Action !! Comments
|-
| Unknown || Unknown || Learn source, Broadcase packet on all external port minus ingress ||
|-
| Unknown || Known || Learn source, Unicast packet to the target || The controller here is essentially ''teleporting'' the packet to the ''node'' where the target is ''attached''
|-
| Example || Example || Example
|}
