{{:OpenDaylight Controller:MD-SAL:Explained:Include:Basic Concepts}}

MD-SAL uses YANG to model data structures for following concepts:
* Data Tree
* RPC
* Notification

== Data Tree ==

Data tree represents structured tree-like hierarchy of data structures. Structure
of data tree is described by YANG models using basic building blocks such as
''list'', ''leaf'' or ''container''.

=== Types of Data Trees ===

* '''Configuration Data Tree''' - Configuration data tree represents intended state of system and usually is populated by consumers (users) of system or components (providers) in system
* '''Operational Data Tree''' - Operational data tree represents export of state as is perceived by components in the system, and may be consumed by other consumers / providers as source of information for their actions.

==== Configuration Data Tree ====

==== Operational Data Tree ====

== Instance Identifier ==

The Instance Identifier is a unique identifier of an element (location) in the yang data tree; basically it is the '''path''' to the node that uniquely identifies all the node's parent nodes. For unique identification of list elements it is required to specify key values as well.

MD-SAL currently provides three different APIs to access data in the common data store:

* Binding APIs (Java generated DTOs)
* DOM APIs
* [[OpenDaylight_Controller:MD-SAL:Restconf|HTTP Restconf APIs]]
 
=== Example ===

Consider the following simple YANG model for inventory:

<pre>module inventory {
    namespace &quot;urn:opendaylight:inventory&quot;;
    prefix inv;
    revision &quot;2013-06-07&quot;;
    container nodes {
        list node {
            key &quot;id&quot;;
            leaf &quot;id&quot; {
                type &quot;string&quot;;
            }
        }
    }
}</pre>
And having one instance of node with name ''foo'';

Lets asume we want to create instance identifier for node foo, in following bindings/ formats:

<ul>
<li><p><b>YANG / XML / XPath version</b></p>
<pre>/inv:nodes/inv:node[id=&quot;foo&quot;]</pre></li>
<li><p><b>Binding Independent version (yang-data-api)</b></p>
<pre>import org.opendaylight.yang.common.QName;
import org.opendaylight.yang.data.api.InstanceIdentifier;

QName nodes = QName.create(&quot;urn:opendaylight:inventory&quot;,&quot;2013-06-07&quot;,&quot;nodes&quot;);
QName node = QName.create(&quot;urn:opendaylight:inventory&quot;,&quot;2013-06-07&quot;,&quot;node&quot;);
QName idName = QName.create(&quot;urn:opendaylight:inventory&quot;,&quot;2013-06-07&quot;,&quot;id&quot;);
InstanceIdentifier = InstanceIdentifier.builder()
    .node(nodes)
    .nodeWithKey(node,idName,&quot;foo&quot;)
    .toInstance();</pre>
<p>'''Note:''' Last call ''toInstance()'' does not return an instance of node, but Java version of Instance identifier which uniquely identifies node &quot;foo&quot;;</p></li>

<li><p><b>Binding-Aware version (generated APIs)</b></p>
<pre>import org.opendaylight.yang.gen.urn.opendaylight.inventory.rev130607.Nodes;
import org.opendaylight.yang.gen.urn.opendaylight.inventory.rev130607.nodes.Node;
import org.opendaylight.yang.gen.urn.opendaylight.inventory.rev130607.nodes.NodeKey;

import org.opendaylight.yangtools.yang.binding.InstanceIdentifier;

InstanceIdentifier&lt;Node&gt; identifier = InstanceIdentifier.builder(Nodes.class).child(Node.class,new NodeKey(&quot;foo&quot;)).toInstance();
</pre>
<p>'''Note:''' Last call ''toInstance()'' does not return an instance of node, but Java version of Instance identifier of Instance identifier which uniquely identifies node &quot;foo&quot;;</p>
</li>
<li><p>'''HTTP Restconf APIs'''</p></li>
<pre>
http://localhost:8080/restconf/config/inventory:nodes/node/foo
</pre>
<p>'''Note:''' We assume that HTTP APIs are exposed on localhost, port 8080</p>
</li>
</ul>
