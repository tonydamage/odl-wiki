{{:OpenDaylight Controller:MD-SAL:Explained:Include:Basic Concepts}}

== Data Tree ==

Data tree represents structured tree-like hierarchy of data structures. Structure of data tree is described by [[OpenDaylight_Controller:MD-SAL:Explained:Data Structure Definition|YANG models using basic building blocks]] such as
''list'', ''leaf'' or ''container''.

Access and modifications of data tree is available via use of [[OpenDaylight Controller:MD-SAL:Explained:Messaging Patterns#Transactions|Data Transactions]]

Location of node in data tree is represented by [[#Instance_Identifier|Instance Identifier]].

=== Types of Data Trees ===

* '''Configuration Data Tree''' - Configuration data tree represents intended state of system and usually is populated by consumers (users) of system or components (providers) in system
* '''Operational Data Tree''' - Operational data tree represents export of state as is perceived by components in the system, and may be consumed by other consumers / providers as source of information for their actions.

== Instance Identifier ==

The Instance Identifier is a unique identifier of an element (location) in the yang data tree; basically it is the '''path''' to the node that uniquely identifies all the node's parent nodes. For unique identification of list elements it is required to specify key values as well.

MD-SAL currently provides three different representations of Instance Identifier:

* Binding APIs (Java generated DTOs)
* DOM APIs
* [[OpenDaylight_Controller:MD-SAL:Restconf|HTTP Restconf APIs]]
 
=== Example ===

=== Example ===

Consider the following simple YANG model for examples list:

<pre>module examples {
    namespace &quot;urn:example:examples&quot;;
    prefix inv;
    revision &quot;2013-06-07&quot;;
    container examples {
        list example {
            key &quot;id&quot;;
            leaf &quot;id&quot; {
                type &quot;string&quot;;
            }
        }
    }
}</pre>
And having one instance of node with name ''foo'';

Lets asume we want to create instance identifier for node foo, in following bindings/ formats:

<ul>
<li><p><b>YANG / XML / XPath version</b></p>
<pre>/inv:nodes/inv:node[id=&quot;foo&quot;]</pre></li>
<li><p><b>Binding Independent version (yang-data-api)</b></p>
<pre>import org.opendaylight.yang.common.QName;
import org.opendaylight.yang.data.api.InstanceIdentifier;

QName nodes = QName.create(&quot;urn:example:examples&quot;,&quot;2013-06-07&quot;,&quot;examples&quot;);
QName node = QName.create(&quot;urn:example:examples&quot;,&quot;2013-06-07&quot;,&quot;example&quot;);
QName idName = QName.create(&quot;urn:example:examples&quot;,&quot;2013-06-07&quot;,&quot;id&quot;);
InstanceIdentifier = InstanceIdentifier.builder()
    .node(nodes)
    .nodeWithKey(node,idName,&quot;foo&quot;)
    .toInstance();</pre>
<p>'''Note:''' Last call ''toInstance()'' does not return an instance of node, but Java version of Instance identifier which uniquely identifies node &quot;foo&quot;;</p></li>

<li><p><b>Binding-Aware version (generated APIs)</b></p>
<pre>
import org.opendaylight.yang.gen.urn.example.examples.rev130607.Examples;
import org.opendaylight.yang.gen.urn.example.examples.rev130607.examples.Example;
import org.opendaylight.yang.gen.urn.example.examples.rev130607.examples.ExampleKey;

import org.opendaylight.yangtools.yang.binding.InstanceIdentifier;

InstanceIdentifier&lt;Node&gt; identifier = InstanceIdentifier.builder(Examples.class).child(Example.class,new ExampleKey(&quot;foo&quot;)).toInstance();
</pre>
<p>'''Note:''' Last call ''toInstance()'' does not return an instance of node, but Java version of Instance identifier of Instance identifier which uniquely identifies node &quot;foo&quot;;</p>
</li>
<li><p>'''HTTP Restconf APIs'''</p></li>
<pre>
http://localhost:8080/restconf/config/examples:examples/example/foo
</pre>
<p>'''Note:''' We assume that HTTP APIs are exposed on localhost, port 8080</p>
</li>
</ul>



== Notification ==

Notification represents event (and data associated with this event) which is explicitly modeled in YANG, and could be [[OpenDaylight Controller:MD-SAL:Explained:Messaging Patterns#Notifications|published / received]] by users of MD-SAL.

Data structure of Notification is defined by [[OpenDaylight_Controller:MD-SAL:Explained:Data Structure Model|YANG Schema]].

== RPC ==

=== RPC Input ===

=== RPC Output ===
