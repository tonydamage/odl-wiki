
= VTN Manager Specifications =

This page describes the specifications of VTN Manager which is to be implemented in OpenDaylight Controller.
Further, this document mainly describes the external specifications and it only mentions some key points about the internal specifications.

== OSGi Bundle ==

VTN Manager is constituted of the following OSGi bundle.

:;<div id="bundle.api">manager</div>
::
::*This provides the VTN Manager class which is exposed to external applications.
::*Source code is kept at '''vtn/manager/api'''.
::*All the classes are kept in '''org.opendaylight.vtn.manager''' package.
:;<div id="bundle.implementation">manager.implementation</div>
::
::*This implements the VTN Manager service.
::*Source is kept at '''vtn/manager/implementation'''.
::*Classes inside this bundle are not exposed to outside.
::*All the classes are kept in '''org.opendaylight.vtn.manager.internal''' package.
:;<div id="bundle.northbound">manager.northbound</div>
::
::*This implements the REST API provided by VTN Manager.
::*Source is kept at '''vtn/manager/northbound'''.
::*Classes inside this bundle are not exposed to outside.
::*All the classes are kept in '''org.opendaylight.vtn.manager.northbound''' package.

== Function overview ==

=== VTN ===

VTN Manager manages the virtual network at '''VTN''' (Virtual Tenant Network) level.
At least one VTN should be created for setting up virtual network using VTN Manager.

VTN is a virtual network environment that gets created inside the container of OpenDaylight controller.
Set up virtual network environment inside VTN by configuring virtual network elements (virtual node) like [[#vBridge|vBridge]] in VTN.
If multiple VTNs are created, then networks inside different VTNs are managed as different individual networks.

=== vBridge ===

'''vBridge''' is a virtual layer 2 switch inside [[#VTN|VTN]], and it represents one virtual broadcast domain.
Virtual network environment in VTN is enabled when one or more vBridges are created inside VTN, and vBridge and physical network are mapped.

Following functionalities are provided at this point in time for mapping vBridge and physical network.

*[[#VLAN-map|VLAN mapping]]
*[[#port-map|Port mapping]]

==== <div id="vBridge.state>vBridge status</div> ====

vBridge can have the following internal status.

:;<div id="vBridge.state.UNKNOWN">UNKNOWN</div>
::This shows the state wherein physical network is not mapped to vBridge.
::vBridge status will be UNKNOWN if all the following conditions are met.
:::*[[#VLAN-map|VLAN mapping]] is not configured on vBridge.
:::*[[#port-map|Port mapping]] is not set for all the enabled [[#vInterface|virtual interfaces]] inside vBridge.
:;<div id="vBridge.state.DOWN">DOWN</div>
::This shows the state wherein the physical network mapped to vBridge is not operating correctly.
::If any of the following conditions are met, then vBridge status will be DOWN.
::*Physical switch is configured in the [[#VLAN-map|VLAN mapping]] done on vBridge and that physical switch is meeting any one of the following conditions.
::**Physical switch does not exist.
::**All the ports of the physical switch are connected to some other physical switch.
::**Except for the ports that connect two physical switches, no other ports are operational.
::*One or more than one interface out of the enabled [[#vInterface|virtual interfaces]] inside vBridge is in [[#vInterface.state.DOWN|DOWN]] state.
::*There is no reachable route available while configuring networks routes mapped to vBridge.
:;<div id="vBridge.state.UP">UP</div>
::This shows the state wherein the physical network mapped to the vBridge is operating correctly.

==== <div id="VLAN-map">VLAN mapping</div> ====

'''VLAN mapping''' functionality is used for mapping VLAN network to any specified vBridge.
It is possible to set one or more than one VLAN mapping to one vBridge.

While configuring VLAN mapping, specify the VLAN ID that is to be mapped to vBridge.

*If '''0''' is set as VLAN ID, then the Ethernet frame that does not have the VLAN tag gets mapped to vBridge.
**If the physical switch receives an Ethernet frame that does not have VLAN tag, then it is treated as an input against this vBridge.
**VLAN tag is removed if an Ethernet frame is output to this vBridge.
*If a value equal to or greater than '''1''' and equal to or less than '''4095''' is specified as VLAN ID, then Ethernet frames that have the same VLAN ID  inside the VLAN tag get mapped to this vBridge.
**If the physical switch receives an Ethernet frame that has this VLAN ID set inside the VLAN tag, then it is treated as an input against this vBridge.
**VLAN tag is added and the corresponding VLAN ID is configured when Ethernet frame is output to this vBridge.

Also, it is possible to specify one physical switch for VLAN mapping.
If the <tt>Node</tt> corresponding to physical switch is specified during VLAN mapping, then only the input and output of that physical switch is mapped to vBridge.
If a physical switch is not specified, then it will be used for all the physical switches recognized by OpenDaylight controller.

Please note the following caution while configuring VLAN mapping.

* VLAN ID (including 0), which was mapped in VLAN mapping, will be exclusive for that vBridge. It is not possible to map a VLAN ID to another vBridge if it has been already mapped to a vBridge.
* Input and output against the internal ports (ports that are connected to other switches) of the switch will not be managed by VLAN mapping.
** Even if the internal port of the switch receives an Ethernet frame that has the VLAN ID specified in the VLAN mapping, that Ethernet frame is not treated as an input against this vBridge.
** Ethernet frame is not output to the internal port when it is output to this vBridge.

==== <div id="vBridge.macTable">MAC address table</div> ====

vBridge internally stores MAC address table.
MAC address table stores the following information for each MAC address.

* Port of the physical switch where MAC address is detected
* VLAN ID inside the Ethernet frame 

Following information gets stored in the MAC address table when an input is detected from the physical network mapped to vBridge.

* Source MAC address of Ethernet frame
* Port of the physical switch that received Ethernet frame
* VLAN ID inside the Ethernet frame 

Further, if source MAC address information of Ethernet frame is registered in the MAC address table, and the physical switch port that received the Ethernet frame and VLAN ID is different from the information in MAC address table, then the information inside MAC address table is updated to the information of the received Ethernet frame. 

If a unicast packet is sent to vBridge and that packet is notified to OpenFlow controller, then VTN Manager checks that whether the destination MAC address is registered in the MAC address table.
Following flow entry is configured on the related physical switches only when it is registered. 

* VLAN ID inside Ethernet frame is overwritten with the VLAN ID stored inside the MAC address table.
* Route to port of the physical switch, which is stored inside MAC address table, is configured on each switch.

If the destination MAC address is not stored inside the MAC address table, then this Ethernet frame is sent to all the physical networks mapped to vBridge.

* VLAN ID can be overwritten according to the setting of [[#port-map|Port mapping]] and [[#VLAN-map|VLAN mapping]].

Only destination MAC address is used as the search key while searching inside MAC address table.
Thus, it is necessary to configure vBridge in such a manner that Ethernet frames that have the same MAC address as the source address and different VLAN IDs configured do not flow to the same vBridge.

For example, let us assume that the following vBridge and network devices are configured.

* Create a vBridge with the name '''bridge-1''' and map VLAN ID '''1''' and '''2''' by using [[#VLAN-map|VLAN mapping]].
* Configure '''A:1''' and '''A:2''' alias for network interface of host having the MAC address '''A''', and allocate VLAN ID '''1''' and '''2''' to each of the aliases. 

If the above configurations are done, then Ethernet frames that have the source MAC address '''A''' and different VLAN IDs will be treated as an input of '''bridge-1'''.

* When data is sent from alias '''A:1''', then Ethernet frames that have source  MAC address as '''A''' and VLAN ID '''1''' will be input to '''bridge-1'''.
* When data is sent from alias '''A:2''', then Ethernet frames that have source  MAC address as '''A''' and VLAN ID '''2''' will be input to '''bridge-1'''.

The behavior is not defined if the vBridge is configured in the above manner.

===== <div id="vBridge.macTable.aging">MAC address aging</div> ===== 

VTN Manager carries out the aging the process periodically against the MAC address stored in the MAC address table.
If the MAC address inside the MAC address table is not referred since the last aging process, then that MAC address information is deleted from the MAC address table.

It is possible to set aging interval for each vBridge.
'''600 seconds''' is the default value for aging interval.
I.e., when we use default settings, if the MAC address information inside MAC address table is not referred for some time, then it will be deleted earliest by '''600 seconds''' and latest by '''1200 seconds'''.

=== <div id="vInterface">Virtual interface</div> ===

'''Virtual interface''' shows the input and output interface that could be set in virtual node of VTN.
At this point in time, it is possible to set virtual interface to [[#vBridge|vBridge]] alone.

It is possible to dynamically enable or disable virtual interface.
If a virtual interface is disabled, then all the inputs from that virtual interface will be ignored.
Also, there will be no output against that virtual interface.

==== <div id="vInterface.state">Virtual interface status</div> ====

Virtual interface can have the following internal status.

:;<div id="vInterface.state.UNKNOWN">UNKNOWN</div>
:: This is a state wherein other network elements are not mapped to virtual interface.
:;<div id="vInterface.state.DOWN">DOWN</div>
:: This is a state wherein the network elements mapped to virtual interface are not operating.
:: It will be in '''DOWN''' state even when the virtual interface is disabled.
:;<div id="vInterface.state.UP">UP</div>
:: This is a state wherein the network elements mapped to virtual interface are operating.

==== vBridge interface status ====

Status of the virtual interface configured in vBridge is decided as follows.

* If the virtual interface is disabled, then interface state will be [[#vInterface.state.DOWN|DOWN]] unconditionally.
** However, state of the disabled virtual interface will not affect the [[#vBridge.state|status of vBridge]] to which that interface belongs.
* Status of the enabled virtual interface is decided on the following basis. 
** It will be [[#vInterface.state.UNKNOWN|UNKNOWN]] state when [[#port-map|Port mapping]] is not configured on the virtual interface.
** It will be in [[#vInterface.state.DOWN|DOWN]] state when port of the physical switch mapped in [[#port-map|Port mapping]] meets any of the following conditions.
*** Port of the physical switch is not operating. 
*** Port of the physical switch is connected to another physical switch.
** It will be in [[#vInterface.state.UP|UP]] state when port of physical switch that is mapped with [[#port-map|Port mapping]] is operating.

==== <div id="port-map">Port mapping</div> ====

'''Port mapping''' functionality is used to map port of physical switch to [[#vInterface|virtual interface]] of [[#vBridge|vBridge]].
Only one Port mapping can be set for one virtual interface.
If you want to map ports of multiple physical switches to one vBridge, then it is necessary to set multiple virtual interfaces in vBridge and configure port mapping against each virtual interface.

While configuring port mapping, specify <tt>NodeConnector</tt> corresponding to the port of physical switch and VLAN ID that is to be mapped.

*If '''0''' is set as VLAN ID, then Ethernet frame that does not have VLAN tag will be mapped to vBridge interface.
**If the specified port of the physical switch receives an Ethernet frame that does not have VLAN tag, then it will be treated as an input against this vBridge interface.
**VLAN tag is removed when Ethernet frame is output to this vBridge interface.
*If a value equal to or greater than '''1''' and equal to or less than '''4095''' is specified as VLAN ID, then Ethernet frame that have the same VLAN ID  inside the VLAN tag get mapped to this vBridge interface.
**If the specified port of the physical switch receives an Ethernet frame that has this VLAN ID set inside the VLAN tag, then it is treated as an input against this vBridge interface.
**VLAN tag is added and the corresponding VLAN ID is configured when Ethernet frame is output to this vBridge interface.

Please note the following caution while configuring Port mapping.

* Combination of the physical switch port and VLAN ID (including 0) that was specified during Port mapping, will be exclusive to that vBridge interface. It is not possible to map the combination of physical switch port and VLAN ID to another vBridge interface if it has been already mapped to a vBridge interface.
* Input and output against the internal ports (ports that are connected to another switch) of a switch will not be managed by Port mapping.
** If the internal port of switch is mapped to [[#vInterface|virtual interface]] with Port mapping, then that interface will be in [[#vInterface.state.DOWN|DOWN]] state and there will be no input and output of Ethernet frame. 

===== Duplicate settings of VLAN mapping =====

Port mapping settings will be given higher priority if the same VLAN network, which was set in Port mapping, is mapped to another [[#vBridge|vBridge]] using [[#VLAN-map|VLAN mapping]].

For example, let us assume that two vBridges with the names '''bridge-1''' and '''bridge-2''' are configured like shown below. 

* Configure Port mapping in '''bridge-1'''.
** Specify physical port '''port-1''' of switch '''switch-1'''.
** Specify '''10''' in VLAN ID.
* Configure VLAN mapping in '''bridge-2'''.
** Do not specify Physical switch. 
** Specify '''10''' in VLAN ID 

In this case, it will operate like below. 

* If the physical port '''port-1''' of switch '''switch-1''' receives an Ethernet frame with VLAN ID '''10''', then that Ethernet frame is treated as an input against '''bridge-1'''.
** It is not treated as an input against '''bridge-2'''.
* If any port, except for the physical port '''port-1''' of switch '''switch-1''', receives an Ethernet frame with VLAN ID '''10''', then that Ethernet frame is treated as an input against '''bridge-2'''.

=== Use of OSGi services ===

VTN Manager uses the following OSGi services provided by OpenDaylight controller.

:;IClusterGlobalServices
::This is used to create cache for storing information used in all containers and share management information between cluster nodes.
:;IClusterContainerServices
::This is used to create cache for storing information used in each Container and share management information between cluster nodes.
:;ISwitchManager
::This is used to acquire the information of switches managed by Controller.
:;ITopologyManager
::This is used to understand the connection state of switches managed by Controller. This is mainly used to distinguish the internal port (port connecting two switches) of the switch.
:;IDataPacketService
::This is used to instruct packet transmission to switch.
:;IForwardingRulesManager
::This is used to set flow entry against switch.
:;IRouting
::This is used to determine the route between switches.
:;IfHostListener
::This is used to notify the host information detected inside [[#vBridge|vBridge]] to hosttracker.

Further, VTN Manager registers the following OSGi listener services.

:;ICacheUpdateAware
::This is used to receive instruction to store configuration information from cluster node. VTN Manager will store the VTN configuration information in file when it receives the instruction to store configuration information from cluster node.
:;IConfigurationContainerAware
::This is used to receive instruction to store configuration information of Controller. VTN Manager will store the VTN configuration information in file when it receives the instruction to store configuration information from Controller.
:;IListenDataPacket
::This is used to acquire the packets received by switch.
:;IInventoryListener
::This is used to detect status change of switches managed by Controller.
:;ITopologyManagerAware
::This is used to detect connection status change of switches managed by Controller.
:;IContainerListener
::This is used to detect creation and deletion of Container.
::* This OSGi listener service is registered only by the VTN Manager inside default container. VTN Manager inside the default container will get disabled if container other than the Default container is created. 
:;IListenRoutingUpdates
::This is used to detect completion of route calculation between switches.

== Limitations ==

=== Proactive Mode ===

When building virtual environment with VTN Manager, all the switches to be used in VTN environment have to be set to reactive mode.
If you set the switch to proactive mode, the virtual network environment built by VTN Manager will not operate properly. 

=== Subnet ===

VTN Manager functions without using any of the subnet information set in OpenDaylight controller.
While sending broadcast packets like ARP request, the broadcast domain is decided by the settings of [[#vBridge|vBridge]]. 

=== arphandler ===

If [[#VTN|VTN]] is created in container by VTN Manager, the following functionalities of the arphandler inside that container will become disabled.

:;New host detection
::If arphandler receives ARP or IP packets, it will notify host information to hosttracker only when the host IP address is included in the subnet information set in OpenDaylight controller. Due to the fact that subnet settings by OpenDaylight controller is inconsistent with broadcast domain settings by [[#vBridge|vBridge]], new host detection with arphandler is disabled in containers having VTN.
::* VTN Manager will do the new host detection notification for hosttracker. 
:;ARP proxy
::If arphandler detects ARP request, irrespective of whether packets can actually reach the hosts, it will instead send the ARP response if the target is a known host. Since this operation is inconsistent with broadcast domain settings by vBridge, ARP proxy functionality by arphandler is disabled in containers having VTN.
::* ARP packets are forwarded as per flow entry registered by VTN Manager according to [[#vBridge|vBridge]] settings. 
::* The ARP packets between hosts isolated by vBridge setting are not forwarded. 

The '''IHostFinder''' service offered by ArpHandler will run even if VTN exists in same container. 
The following methods of arphandler will send ARP request via VTN Manager when VTN is present in the same container.
<pre>
public void find(InetAddress networkAddress);
public void probe(HostNodeConnector host);
</pre>

However, since ARP request is sent as per the vBridge settings in container,　it is not possible to detect host on physical network not mapped to vBridge.

=== Applications for setting Flow entry ===

VTN manager cannot successfully build an isolated virtual network environment if an application that sets flow entry to switch is running because this might be inconsistent with flow entry set by VTN manager.

The following applications in OpenDaylight controller set flow entry for switch.

* '''simpleforwarding''' (opendaylight/samples/simpleforwarding)
* '''loadbalancer''' (opendaylight/samples/loadbalancer)

Consequently, you cannot use VTN Manager simultaneously with the above applications.
VTN Manager will not run successfully especially if you do not stop or uninstall '''simpleforwarding''' because it sets flow entry automatically after detecting host information.

== Specifications ==

*[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:RestApi| REST API specifications]]
*[[OpenDaylight_Virtual_Tenant_Network_(VTN):VTN_Manager:JavaApi| Java API specifications]]

[[Category:OpenDaylight Virtual Tenant Network]]
