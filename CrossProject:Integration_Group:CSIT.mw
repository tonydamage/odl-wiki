== Introduction ==
Continuous Integration System Test (CSIT) area is created to develop automated system test.

== Continuous System Integration Tests ==

Currently we are considering 3 types of continuous system integration tests:

* System test using existing framework (Java)
 
You do not need robot framework, just maven and java. This is what we discussed with the Cisco person yesterday. In this case you put the system test java code in our repository, and then you run it every time you build it in OpenDaylight Jenkins or locally in your computer. The Cisco people have already Java artifacts to put NB API REST requests. Good thing of this solution is that all the Java environment is already there so you can start writing test cases from day 1. The only issue so far is that you need to have something on SB to simulate the devices. The plan for this is to have either a simulator running in the same system (collocated with the controller) or on a separate instance. 
 
* System test adding robot framework (Python or Java)
 
This is actually your plan. Andrew (ODL sysadmin) could install Robot on existing OpenDaylight Jenkins and testers can do the same with their local computers. Then Jenkins can be used to build a release vehicle and execute robot test cases. Same as 1) you need to have something on SB to simulate the devices either collocated with the controller or on a separate machine.
 
* System test using a new test bed (Python or Java)===
 
This is our original idea for system test. We use existing OpenDaylight Jenkins just to trigger system test on a separate test bed made of 3-5 instances: 1.Robot framework, 2. Controller, 3. Device simulation. With this infrastructure you do real blackbox testing as the controller is running on its own instance, also there is no impact on existing OpenDaylight Jenkins because Robot and tests run on a separate instance as well. Only issue with this solution is that you need more infrastructure to debug your test code, like 3-5 VMs.
