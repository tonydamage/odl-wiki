MD-SAL-App-Simple archetype demonstrates how to use some of MD-SAL services and helps developers to build applications and plugins on md-sal.  It creates a yang model based on the optional user provided fields. It also generates java-based implementation of RPC, available in the previously created yang model.  This RPC implementation also gives an example of how to use md-sal data store. Provider registers this yang model based RPC/service in OSGi context.
Archetype creates two more projects – consumer and web. Consumer, as the name suggest, consumes the service/RPC generated by yang model after it retrieves the reference from OSGi context. Web project use RestConf based APIs provided by model and provider, to retrieve and store data in data store. Storage of data again use RPC, but via RestConf.

This archetype is available under OpendayLight Toolkit project. You can get that code via ssh: git clone ssh://<<opendaylight user name>>@git.opendaylight.org:29418/toolkit

'''Quick HowTo'''

1.	Install the archetype-md-sal-app-simple under main/archetypes folder of toolkit project via command '''mvn clean install'''.

2.	Go to root and generate an app using the local archetypes you just installed via command 
           mvn archetype:generate -DarchetypeGroupId=org.opendaylight.toolkit  -DarchetypeArtifactId=md-sal-app-simple
           -DarchetypeVersion=1.0-SNAPSHOT
           -DgroupId=<< Any group Id such as org.opendaylight.controller.app>>
           -DartifactId=<<Any app name such as mdSalExample>>
           -Dversion=<<Any version such as 1.0.0-SNAPSHOT>>
           -DappName=<< Optional name of the app, default value is task>>
           -DmodelFields=<<Optional json format based list of fields, default is {"title":"string", "desc":"string"}>>

It will generate an application folder based on the artifact name you provided such as mdSalExample.  You can specify your application name, which has default value of task. Important thing to see above is the optional modelFields parameter. This optional field takes valid JSON format based model fields (currently, only String is supported) and creates a yang model, Java provider, consumer and web application based on that.
Imagine you want to create an employee database application, where you specify name, title and manager of the employee. You can specify fields such as {“name”:”string”, “title”:”string”,”manager”:”string”} and give appName such as directory. It will create a directory app for you with the specified fields you provide.

3.	Go inside your application folder and run following maven command: '''mvn clean install –Dgen'''. It will generate yang files, java code and spring based web project. Once successful, you will see an OSGi bundle under model, provider, consumer and web projects. Keep in mind, you don’t have to use –Dgen parameter in later stages, it is only for first time. Later, you can just use '''mvn clean install''' command.

4.	Copy these bundle jars and paste them in your controller’s distribution plugin directory. 

5.	Start your controller and try to access web application at http://localhost:8080/controller/web/{appname such as mdSalExample}/view. You will an application to add entries into the data store.

6.	By default, an entry will have title and desc field, but you can provide your own fields like we mentioned above. You can view the list of existing entries and add a new entry in the md-sal data store.


You can also watch this youtube video [https://www.youtube.com/watch?v=IMKFMJ-toGA HowTo Video] to get started. This video gives a demonstration of the archetype based application.
