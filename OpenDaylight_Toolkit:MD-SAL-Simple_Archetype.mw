== Introduction ==
MD-SAL-App-Simple archetype demonstrates how to use some of MD-SAL services and helps developers to build applications and plugins on md-sal.  It creates a yang model based on the optional user provided fields. It also generates java-based implementation of RPC, available in the previously created yang model.  This RPC implementation also gives an example of how to use md-sal data store. Provider registers this yang model based RPC/service in OSGi context.
Archetype creates two more projects – consumer and web. Consumer, as the name suggest, consumes the service/RPC generated by yang model after it retrieves the reference from OSGi context. Web project use RestConf based APIs provided by model and provider, to retrieve and store data in data store. Storage of data again use RPC, but via RestConf.


== Quick HowTo ==

This archetype is available under OpendayLight Toolkit project. You can get that code via ssh: git clone ssh://<<opendaylight user name>>@git.opendaylight.org:29418/toolkit. 

1.	Go to folder main/archetypes/archetype-md-sal-app-simple under toolkit project  and install md-sal-simple archetype via running command '''mvn clean install'''.

2.	Go to root and generate an app using the local archetypes you just installed via command 
           mvn archetype:generate -DarchetypeGroupId=org.opendaylight.toolkit  -DarchetypeArtifactId=md-sal-app-simple
           -DarchetypeVersion=1.0-SNAPSHOT
           -DgroupId=<< Any group Id such as org.opendaylight.controller.app>>
           -DartifactId=<<Any app name such as mdSalExample>>
           -Dversion=<<Any version such as 1.0.0-SNAPSHOT>>
           -DappName=<< Optional name of the app, default value is task>>
           -DmodelFields=<<Optional json format based list of fields, default is {"title":"string", "desc":"string"}>>

It will generate an application folder based on the artifact name you provided such as mdSalExample.  This archetype can take two optional fields -<br />

'''-DappName:''' You can specify your own application name. This name will be used to in most of the java, yang files. Also, it will create services based on the application name. Default application name is task.<br />

'''-DmodelFields:''' Each application has certain data fields. You can specify those data fields here in JSON format. Like a task entry should have a title and description. So we kept default values as {"title":"string", "desc":"string"}.
Currently, we support only string based fields. These model fields will be used to create RPC yang model, java services and web UI.<br />

Imagine you want to create an employee database application, where you specify name, title and manager of the employee. You can specify fields such as {“name”:”string”, “title”:”string”,”manager”:”string”} and give appName such as directory. It will create a directory application for you with the specified fields you provide.

3.	Go inside your application folder and run following maven command: 
        mvn clean install -Dgen

It will generate initial configuration xml file, yang files, java code and spring based web project. Once successful, you will see an OSGi bundle under model, provider, consumer and web projects configuration file should be available under configuration/initial folder. Configuration file name should be like with 05-<<appName>>-sample.xml. <br />

Keep in mind, '''you don’t have to use –Dgen parameter in later stages, it is only for first time. It will rewrite most of existing files, if you use this parameter again.''' Later, you can just use '''mvn clean install''' command.

4.	Copy the initial configuration file from configuration/initial folder of your project to your controller's distribution's configuration/initial folder.
5.     Copy these bundle jars (model, provider, consumer and web) and paste them in your controller’s distribution plugin directory. 

6.	Restart your controller and try to access web application at http://localhost:8080/controller/web/{artifactId such as mdSalExample}/view. You will an application to add entries into the data store.

7.	You can view the list of existing entries and add a new entry in the md-sal data store. Initially, there won't be any entry available.


== Behind the Scene: How Archetype works ==

Maven archetype is very limited when it comes to build dynamic applications out of it. md-sal-simple-archetype provides scaffold to build md-sal based application. It will generate yang model, service producer, service consumer for other Osgi applications and web based consumer, which use RESTConf Apis. <br />

Once you create your application using archetype, we ask you to use '''mvn clean install -Dgen''' just once, what it does is, it activates maven profile to generate dynamic code for you. It triggers one java class, CodeGenerator.class, present under generate folder. That CodeGenerator class use velocity templates to generate files under model, provider, consumer, web and configuration files. It generates all yang model, java service and config subsystem files for your application, based on the name of application.<br />

You can remove generate project from directory structure of your application and its reference in parent pom, once you create initial working application and start making your own changes.
