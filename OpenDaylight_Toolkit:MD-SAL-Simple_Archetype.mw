__TOC__

= Introduction =
A maven archetype (http://maven.apache.org/guides/introduction/introduction-to-archetypes.html) is essentially a maven project template. We have created an MD-SAL archetype (called MD-SAL-App-Simple) which demonstrates how to use some of the MD-SAL services and features. It is intended to give developers a head start in developing applications and can allow the majority of the developers to ignore some of the more complex MD-SAL features during their initial hacking.

More complex uses of the archetype enable developers to quickly auto generate more complex yang files based on user provided fields.

= MD-SAL-App-Simple Usage - Simple Use =

The following section talks you through how to use the MD-SAL-App-Simple archetype to get started on creating a simple MD-SAL application.

== ONE TIME SETUP ==

Note: We are working to resolve issues where the maven archetype can not be found. If you run the below maven commend but get prompted with a list of repository where you can go and find the archetype, then you need to run the follow commands to do a onetime download and compiling of the archetype source code and build it. There is an issue with certificates that is preventing us from referencing the repository directly.

Here is the list of commands, in a single line form, to download, and build the toolkit project:

<pre>git clone https://git.opendaylight.org/gerrit/p/toolkit.git && cd toolkit && mvn clean install -D skipTests</pre>

Once you have run this command once you will not have to run it again (until you want to get an update to the archetype). This wiki will be updated once the issue is resolved.

== Run the Maven Archetype ==
# cd to the folder where you want to place your MD-SAL application. This archetype will generate a parent bundle and 4 child bundles.
#*''Note: If you run this archetype in an existing maven project, the archetype will automatically add your new maven project root as a child to existing maven project (i.e. in the "module" section). This means you will automatically inherit all of the settings in your parents pom file.''
# Run the following mvn command: <pre>mvn archetype:generate -DarchetypeGroupId=org.opendaylight.toolkit  -DarchetypeArtifactId=md-sal-app-simple </pre>
#*''This command starts the maven archetype generating in an interactive mode, during which you will be prompted for the additional fields:''
#**'''groupId''': The group id will become the <groupId> in the maven project. Typically this is a high level grouping, starting with the company or organization, such as 'org.opendaylight.controller'
#**'''artifactId''': The artifact ID will become the <artifactId> in the maven project. This will be the prefix for the folder names and all sub-maven project. Typically this describes the functionality or group project, such as "toaster-sample" etc.
#**'''version''': The version of this artifact. You can hit enter to accept the default of "1.0=SNAPSHOT" or enter your own version.
#**'''package''': Defines the prefix for all packages. This defaults to a package created from the group id.
#**'''modelFields''': This is a property which you define fields when using the MD-SAL archetype in a more advanced way. See below for advanced options. For now, simple accept the defaults.

The maven archetype generation should now have completed, resulting in the following folder structure:

*<artifactId>
**consumer
**generator
**model
**provider
**web

Before we discuss what each of these bundles provides, continue to the next section to finish the template generation.

== Finish Generation - Run the 'Generator' ==

Because maven archetypes are extremely limited in their capabilities,we need to run one more step to generate the remainder of the template code which we need for our sample application. To do this we need to make use of the "generator" folder which was created in the previous step.

# cd into the <artifactId>/generator project.
# Run 'mvn clean install -Dgen' <br>'''This will copy a number of additional files to the remaining four projects and finishes the initialization.'''
# cd up one directory (i.e. 'cd ..'). And now run a complete build (i.e. 'mvn clean install'). You should see that the parent project (named after your artifact id), and four child projects (consumer, model, provider, and web) all compile successfully.
# Delete the generator bundle as it is no longer needed.

You now have a fully functional MD-SAL application template which provides a number of capabilities. Read on for more information about what each project provides a template for, and which you can discard.

At this point you can import your projects into eclipse or other IDE's as you desire (see https://wiki.opendaylight.org/view/GettingStarted:_Eclipse).

= What does the MD-SAL Archetype Provide for us? =

The MD-SAL Archetype provides demo projects for the following services:

* A yang model. This project provides a sample yang file with some minimal sample yang contents, including an RPC call.
** The only manually modified code in this project is generally the yang file which models your service. The project also contains all of the auto-generated java files that are created for your model.
* A provider application. This project provides a sample implementation of the RPC service which is defined in the yang file stored in the model project.
* A consumer application. This demonstrates how you can write a bundle which consumes one or more services through the MD-SAL (but doesn't provide any implementations of a service defined in a yang file etc).
** You may want to use this template if you have business intelligence which needs to use the RPC implementation defined in the provider, BUT is logically a separate piece of functionality. If you do not want to use this bundle, see below "How to Remove Unneeded Projects".
* A web application. This project provides a sample ''custom'' rest interface. This rest interface is in addition to the rest interfaces exposed via RESTConf automatically. 
** It is encouraged that you use the RESTConf web services whenever possible for interactions with your application, as opposed to using your own REST implementation.
** You do NOT need this bundle to use the RESTConf web services.
Most applications only need the model and the provider bundles.

= Additional Generation Parameters =
== Naming your Application (optional)==

By default the word "Task" is used to prefix your yang files and thus is used in your generated package names, java interfaces etc. To change this prefix, simply add the following option to the maven command line:

<code>
  -DappName=<appNamePrefix>
</code>

For example:

<code>
  mvn archetype:generate -DarchetypeGroupId=org.opendaylight.toolkit  -DarchetypeArtifactId=md-sal-app-simple -DappName=Toaster
</code>

== Specify Artifact ID and Group ID on the Command Line (optional) ==

You can also specify the desired group ID and artifact ID on the command line instead of interacting with maven archetype generator. To do this, simply add these fields to the archetype command:

<pre>
           -DgroupId=<< Any group Id such as org.opendaylight.controller.app>>
           -DartifactId=<<Any app name such as mdSalExample>>
</pre>

For example, the full command might be:

<code>
   mvn archetype:generate -DarchetypeGroupId=org.opendaylight.toolkit  -DarchetypeArtifactId=md-sal-app-simple -DappName=Toaster  -DgroupId=org.opendaylight.controller -DartifactId="Toaster-Sample"
</code>

== Quick Start Read Me ==
In ddition to code, the maven archetype also generates a READ_ME file. You can optionally follow the quick start steps in the generated READ_ME file. You can obtain the same information in this wiki as in the READ ME, however the wiki has more details.

Look for the "Archetype_Next_Steps.README" text file in the generated code.

= How to Remove Unneeded Projects =

To remove unneeded projects, you simply delete the project (i.e. 'rm -rf web' or 'i.e. rm-rf consumer') and then modify the pom.xml file in the root folder (which is the same name as your artifact) and remove the unneeded projects from the "<modules>" section. 
Then run a 'mvn clean install' to verify that all projects still build.

''Note, the consume and provider projects require the model project to build correctly.''

If you only want to stop building your dependent projects, but ''keep'' the sample code for future use, just remove the project name from the module section in the root pom.xml file.

= How to Deploy your Bundles =

These steps outline how to manually deploy your new bundles into the controller. See below for how to set your bundles up to be automatically included in your distribution whenever it is built. Skip these steps if they point to a project that you already removed.

# Locate your ODL distribution. The distribution for the core controller is found under the controller git repository (after running a mvn clean install from the controller root). The path is controller/opendaylight/distribution/opendaylight/target/distribution.opendaylight-osgipackage/opendaylight/. 
# Copy model/target/<app-name>-model-<version>.jar to the 'plugins' directory in your distribution of the controller.
# Copy provider/src/main/resources/configuration/initial/05-provider-<app_name>-sample.xml to the 'configuration/initial/' directory in your distribution of the controller.
# Copy provider/target/<app-name>-provider-<version>.jar to the 'plugins' directory in your distribution of the controller.
# Copy consumer/src/main/resources/configuration/initial/06-consumer-<app_name>-sample.xml to the 'configuration/initial/' directory in your distribution of the controller.
# Copy consumer/target/<app-name>-consumer-<version>.jar to the 'plugins' directory in your distribution of the controller.   
# Copy web/target/<app-name>-web-<version>.jar to the 'plugins' directory in your distribution of the controller
# Run the controller using the run.sh. You should see messages similar to the following being printed:

Note: Below our "app-name" is "Task" (yours by default is the same)- you can see that we use that name as the prefix for classes.
<pre>
2014-07-02 05:16:08.258 EDT [config-pusher] INFO  o.o.c.c.y.c.t.i.TaskProviderModule - TaskProvider (instance org.opendaylight.controller.config.yang.config.task_provider.impl.TaskProviderModule$1CloseResources@11a15a0) initialized.
2014-07-02 05:16:08.305 EDT [config-pusher] INFO  o.o.c.c.y.c.t.i.TaskConsumerModule - TaskConsumerService (instance org.opendaylight.controller.config.yang.config.task_consumer.impl.TaskConsumerModule$1AutoCloseableService@56e83e5e) initialized.
</pre>

If you see these info messages printed on the OSGi console then you have successfully deployed your bundles!

= Automatically Deploying your Bundles =

To have your bundles and configuration files deployed automatically when the distribution is built follow these steps:

# Modify the 'controller/opendaylight/distribution/opendaylight/pom.xml" adding the bundles you want to deploy as dependencies. When the distribution project is built, your artifacts will be automatically copied into the distribution.
# *Move* provider/src/main/resources/configuration/initial/05-provider-<app_name>-sample.xml to the  'controller/opendaylight/distribution/opendaylight/src/main/resources/configuration/initial/' directory
# *Move* consumer/src/main/resources/configuration/initial/06-consumer-<app_name>-sample.xml to the 'controller/opendaylight/distribution/opendaylight/src/main/resources/configuration/initial/' directory.
    
When the distribution project is built these configuration files are copied to the configuration/initial directory in the distribution.  

= Tips for Editing the Template Code =

A few tips to remember when you start to edit the template code:

* Build often! Your projects should build quickly (especially if you run the build command from the generate root project). Building often will allow you to catch errors quickly.
* There are a number of auto-generated java classes that are created from your yang model. After you modify the model yang file you will want to recompile, which may result in compile errors in the provider or consumer bundles who use that code. Consider commenting the example code out until things compile again.
* Remove the projects you don't think you need - this will reduce the time you may be tracing down code generation issues.
* A .gitignore file is created which ignores files that should not be checked in. If you are not using git make sure you set up the proper ignore files for your source control.

= Advanced Usage of the MD-SAL-App-Simple Archetype =

The advanced features of the MD-SAL-App-Simple archetype provides better auto generation of a yang file for you instead of you having to manually edit the file. To do this you will make use of the "modelProperties" field which we skipped (or rather accepted the defaults) before.

When prompted during the interactive mode, or optionally using the '-DmodelFields' flag on the command line, you can provide a JSON formatted list of fields that you want included in your yang file.

 '''TODO: We need more information and examples on how this works and what fields we can add.'''

== Behind the Scenes: How Archetype Works ==

Maven archetype is very limited when it comes to building dynamic applications. md-sal-simple-archetype provides scaffold to build an md-sal based application. It will generate a yang model, a service producer, a service consumer for other OSGi applications and a web based consumer that uses RESTConf APIs. <br />

Once you create your application using md-sal-simple-archetype, use '''mvn clean install -Dgen''' just once; it activates the maven profile to generate dynamic code for you. It triggers one java class, CodeGenerator.class, present under generate folder. That CodeGenerator class use velocity templates to generate files under model, provider, consumer, web and configuration files. It generates all yang model, java service and config subsystem files for your application, based on the name of application.<br />

You can remove the generate projects from your application's directory structure and its reference in the parent pom, once you create the initial working application and start making your own changes.
