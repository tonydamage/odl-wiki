== Introduction ==

The Hydrogen Release was *highly* challenged, almost fatally so, by version skew.  We have over 250 interdependent bundles in OpenDaylight currently, and they each carry a version.  But at the end of the day, we ship
one version in our Release Editions.  Trying to maintain version synchronization across all 250 simply doesn't scale.   

If you look at it closely, version skew becomes a variation of the 'Late Integration' problem.  Doing integration late (ie, falling out of sync till the end) is a well noted worst practice in software development.  The entire Continuous Integration
practice has arisen in recognition of this.

Therefore, it is critical that we maintain as tight a synchronization between bundles as possible.  Naively SNAPSHOT releases appear to be the best way to maintain such tight synchronization.  And they are.  Until they aren't.
SNAPSHOTs do a good job of maintaining synchronization, but they do not allow options to downstream consumers of a bundle to control the *timing* of their integration.   While staying continuously integrated with your 
upstream bundles is best, if something in an upstream bundle changes in a way that breaks a downstream consumer, that consumer rightly would like the option to be able to 'downgrade' to a point only a small amount
of time early so they can keep working while figuring out the root cause of the breakage, and getting it resolved (whether upstream or downstream... we've seen both be the root cause at various points during Hydrogen).

== First pass at the Solution == 

The first pass at a solution then would be to use the maven version change plugin to keep everyone in sync on the latest SNAPSHOT releases, and to do Jenkins automated weekly releases so as to 
provide that 'small amount of time earlier' downgrade point if needed by a project.

This falls down because, as we learned during the Hydrogen Release Artifact cutting, the current structure of our pom files makes the version plugin highly unreliable.  Frankly, it misses a lot of stuff, and
introduces version skew with the added sense of security that automation brings.

This further falls down because the practice of every bundle having its own version means it is almost impossible for a human to do a quick manual spot check to make sure the version change plugin is working
correctly.

Additionally, our pom files need to be fixed so that the maven release plugin works correctly.  As we discovered during the Hydrogen Release Artifact cutting... it's quite fragile.

== A Realistic Path to Implementation ==

# '''Fix the POM files:''' so that the maven change version and release plugins work reliably
#  '''Recommend One Version per ODL Project:''' so that a human being can manually spot check the automation
# '''Implement Jenkins Automated Weekly Releases''' so that we have a 'small amount of time earlier' point available 

It should be noted that, in order to reasonably achieve '''Implement Jenkins Automated Weekly Releases''' without producing massive version skew, we need to implement it first for the 'leaves' of the ODL project dependency tree (like integration) and walk our way back towards the root (controller, yangtools).

If we went the other direction, instituting weekly releases for a root project like yangtools or controller first, we would simply be guaranteeing that all downstream projects are out of sync due to the automated introduction of version skew.

== Other ideas to explore ==

Using [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Importing_Dependencies POM Imports] to manage cross project dependencies with pseudo versioning.

Proposed Solution: Slide deck: https://wiki.opendaylight.org/view/File:Versioning-Updated.ppt
