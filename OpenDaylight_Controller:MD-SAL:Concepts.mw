== RPC ==

In YANG, RPCs (Remote Procedure Calls) are used to model any procedure call implemented by a Provider (Server), which exposes functionality to Consumers (Clients).

In the MD-SAL terminology, the term 'RPC' is used to define the input and output for a procedure (function), which is to be provided by a Provider and adapted by the MD-SAL.

In context of the MD-SAL, there are three types of RPCs (RPC services):

* [[OpenDaylight Controller:MD-SAL:Service Types#Global Service|Global]] - one service instance (implementation) per controller container / mount point
* [[OpenDaylight Controller:MD-SAL:Service Types#Routed Service|Routed]] - multiple service instances (implementations) per controller container / mount point
* [[OpenDaylight Controller:MD-SAL:Service Types#Mounted Service|Mounted]] - multiple service instances, uniquely identified in the yang data tree.

== Instance Identifier ==

Instance Identifier is unique identifier of element (location) in data tree, basically it is '''path''' to the node (uniquelly idenfies all parent nodes). In case of list elements it is also require to specify key values for list items to uniquely identify item.

=== Example ===

Assume we have simple model YANG model for inventory:

<pre>module inventory {
    namespace &quot;urn:opendaylight:inventory&quot;;
    prefix inv;
    revision &quot;2013-06-07&quot;;
    container nodes {
        list node {
            key &quot;id&quot;;
            leaf &quot;id&quot; {
                type &quot;string&quot;;
            }
        }
    }
}</pre>
And having one instance of node with name ''foo'';

Lets asume we want to create instance identifier for node foo, in following bindings/ formats:

<ul>
<li><p>YANG / XML / XPath version</p>
<pre>/inv:nodes/inv:node[id=&quot;foo&quot;]</pre></li>
<li><p>Binding Independent version (yang-data-api)</p>
<pre>import org.opendaylight.yang.common.QName;
import org.opendaylight.yang.data.api.InstanceIdentifier;
import org.opendaylight.yang.data

QName nodes = new QName(&quot;urn:opendaylight:inventory&quot;,&quot;2013-06-07&quot;,&quot;nodes&quot;);
QName node = new QName(&quot;urn:opendaylight:inventory&quot;,&quot;2013-06-07&quot;,&quot;nodes&quot;);
QName node = new QName(&quot;urn:opendaylight:inventory&quot;,&quot;2013-06-07&quot;,&quot;id&quot;);
HashMap&lt;QName,Object&gt; nodeFields =  new HashMap&lt;&gt;();
nodeField.put(idName,&quot;foo&quot;);
InstanceIdentifier = InstanceIdentifier.builder()
    .node(nodes)
    .node(node,nodeFields)
    .toInstance();</pre>
<p>'''Note:''' Last call ''toInstance()'' does not return an instance of node, but Java version of Instance identifier which uniquely identifies node &quot;foo&quot;;</p></li>

<li><p>Binding-Aware version (generated APIs)</p>
<pre>import org.opendaylight.yang.gen.urn.opendaylight.inventory.rev130607.Nodes;
import org.opendaylight.yang.gen.urn.opendaylight.inventory.rev130607.nodes.Node;
import org.opendaylight.yang.gen.urn.opendaylight.inventory.rev130607.nodes.NodeKey;

import org.opendaylight.yangtools.yang.binding.InstanceIdentifier;

InstanceIdentifier&lt;Node&gt; identifier = InstanceIdentifier.builder()
      .node(Nodes.class)
      .node(Node.class,new NodeKey(&quot;foo&quot;))
      .toInstance();</pre>
<p>'''Note:''' Last call ''toInstance()'' does not return an instance of node, but Java version of Instance identifier of Instance identifier which uniquely identifies node &quot;foo&quot;;</p></li></ul>
