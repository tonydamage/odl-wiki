= Introduction = 

The following outlines what are the required elements from Project Information, Documentation and Testing required from projects to help facilitate the release appropriately.

== Project Information ==

As part of the project definition it is important to know and understand what a project is providing. For example, what sort of add-ons is it contributing to the platform's runtime from library, platform add-on or even external agent or component. Moreover, it should specify where the documentation for this component is located, along with a proposed test plan for this high-level component/feature.

The following is a "sample" metafile which is currently work in progress. The location of this metafile is to be at the root of project repository and any suggestion on improving this file is welcome.

The key word in the project metafile is the '''<component>'''. A component is a level of abstraction to uniformly obtain (programatically) what a project has to offer at a component level which can be used for uniform Packaging, Documentation, Test and GUI.

<pre>
<project>
    <metadataVersion>0.1</metadataVersion>
    <name>reservation</name>
    <description>This project allows X Y Z</description>
    <version>1.0.0</version>
    <release>helium</release>
    <source>location of gitsource</source>
    <tags>keywords,list,for,searching,purposes</tags>
    <documentation>
        <site>http://xx</site>
        <maintainer></maintainer>
        <license>EPL</license>
    </documentation>
    <component>
        <name>component-x</name>
        <version>1.0.0</version>
        <lifecycle>experimental</lifecycle>
        <type>runtime</type>
        <category>core/runtime</category>
        <priority>optional</priority>
        <documentation>
            <site>http://location</site>
            <apiLocation>mvn:xxx:api.wadl</apiLocation> 
        </documentation>
        <packaging>
            <format>karaf-feature</format>
            <featureRepository>mvn:xxx</featureRepository>
            <feature name="odl-base" version="1.0.0" repository="mvn:xxx"></feature>
        </packaging>
        <testing>
            <testPlan>
              <name>XYZ Component Testing</name>
              <type>functional</type>
              <testPlanUrl>http://locationtotestopiaplan</testPlanUrl>
            </testPlan>
        </testing>
        <dependencies>
            <dependency name="xxx" version="1.0"/>
        </dependencies>
        <conflicts>
            <conflict name="xxx" version="1.0"/>
        </conflicts>
    </component>
</project>
</pre>

== Packaging ==

From a packaging perspective, projects contribute packages as karaf features. These features can then be directly deployed in container via .kar file extensions or packaged in a distribution specific installable package such as .rpm / .deb add-ons where applicable.

As such it is required that projects create a proper Karaf Feature repository (feature.xml file) for their projects. 

Please see [[Runtime:Karaf_Features_Guidelines|Karaf Features Guideline]] for additional information and guidelines on how to create these feature files.

== Documentation ==

Each project is required to have a local Maven site which is using the opendaylight template (to be provided soon) and is deployed via a jenkins job. This site should have project-specific information targeted to developer level entry into the project's use and consumption. These site will be the reference documentation complementing the "ever changing" wiki format which is providing a less formal documentation.

For additional information on creating a maven site please see: [http://maven.apache.org/guides/mini/guide-site.html Maven Site Documentation]

For information on setting up site-deploy for your project please see: [[OpenDaylight Controller:How To: Site Deploy| How To: Site Deploy]]

== Testing ==

Each project is required to fill some basic information on how to test their components or features. This information can be in the form of javadocs so that it can be easily collected by Maven and published in Jenkins, we will be posting some examples and recommendations very soon.

The tests we normally do in OpenDaylight are: 

* Java Unit Test or J-Unit - This is normally done by project developers in their repositiory
* PAX-EXAM Integration test - This is also done by projects in their repositiory as it is an extension of the above. More information [[OpenDaylight_Controller:Integration_Tests | here]]
* System Integration test - We already have a framework for this (see [[CrossProject:Integration_Group:CSIT | CSIT wiki]]), the system test is hosted in the Integration repository. Projects with system test requirements should appoint a person to work with Integration group with the goal of generating the system test for their component/feature.

Finally we will be asking projects to provision necessary settings to report test coverage. Please check this [[Integration_Group:Code_Coverage_using_Jacoco | wiki]].
