{|  class="wikitable" style="color:#C95000; background-color:#FFE6CD; margin-left: 10px;"  align="right" border="1" 
|align="center"|''' Service Function Chaining                                                          '''
|-
|'''Primary Contact:''' Paul Quinn <paulq@cisco.com> <br>
'''Repo:''' sfc<br>
'''IRC:'''  freenode.net #opendaylight-sfc <br>
'''Mailing List:''' sfc-dev@lists.opendaylight.org <br>
'''Meeting Info:''' <br>
* When: Thursdays, 8-8:30AM PT
* Webex
** [ https://cisco.webex.com/ciscosales/j.php?MTID=m6986fe5bb0e61988b63cb90139653dc8 Webex]
** Webex Meeting number:              205 511 796 
** 1-866-432-9903 Call-in toll-free number (US/Canada)
** 1-408-525-6800  Call-in toll number (US/Canada)
** Access code: 205 511 796 
|}


Service Function Chaining provides the ability to define an ordered list of a network services (e.g. firewalls, load balancers).  These service are then "stitched" together in the network to create a service chain.  This project provides the infrastructure (chaining logic, APIs) needed for ODL to provision a service chain in the network and an end-user application for defining such chains.


This project includes the following documents:


* [[Project_Proposals:Service Function Chaining|Project Proposal]]
* [[Helium Release Plan|Helium Release Plan]]
* [[IETF Drafts|IETF Drafts]]
* [[Presentations|Presentations]]

== SFC TODO ==

* Finish the RPC interface (SfcProviderRPC). Today it is limited in scope and which elements it exercises 
* Integrate the config file bootstrap so the code is fully self healing 
* Iron out the JSON object to provision a SFF (see point below). This will most likely be similar to SFF Yang model. 
* Implement REST API to communicate southbound with switch front-end. This API will send the JSON object to the server that will communicate with switches 
* Integrate with dlux UI 
* Integrate the distribution POMs 
* At some point move to the new DataListener APIs. Hopefully somebody else will weed out the  bugs. 
* Change the Yang models to use  leafrefs, idenityrefs and others when we are confident it will not cause Data Deserialization errors. 
* Harden the code 
* SfcProvider*API classes need to be changed to Callable  
* Integrate with LISP service 
* Python regression tests
