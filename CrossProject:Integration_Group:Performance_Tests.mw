== Introduction ==
Performance tests are needed not only for benchmarking our controller but also for improving our code by continuosly monitoring the collected data. We also stated that for next release '''Helium''' our focus will be performance and stability and as a result we have decided to create and maintain this wiki.

== Scope ==
The goal of this wiki is to:
* Provide a set of recommendations for doing performance test
* Describe which performance tests are currently running in OpenDaylight
* Publish performance test results

== Performance values ==
We agreed we are going to start with following performance metrics:

* Inventory performance:
** Max number of OF switches and ports
** Time/CPU/RAM consumed in learning switches, ports and topology 

* Flow performance:
** Max number of flows in memory
** Max flows/sec we can process
** Time/CPU/RAM consumed in pushing flows

== Performance tools ==

* '''Mininet'''
Available at [http://mininet.org mininet.org] and also installed in the [[CrossProject:Integration_Group:Test_VMs|Test VMs]].
Mininet simulates a topology of openflow switches connected each other and also hosts attached to them. This tool can be used for inventory performance by increasing the number of switches and ports in the topology. It also allows custom configurations so that we can create topologies close to real scenarios (i.e. data centers)

* '''CBench'''
Available at [http://www.openflowhub.org/display/floodlightcontroller/Cbench+(New) Openflowhub] and also installed in the [[CrossProject:Integration_Group:Test_VMs|Test VMs]]. Cbench emulates a bunch of openflow switches which connect to a controller, send packet-in messages, and watch for flow-mods to get pushed down. This tool can be used for flow performance

* '''Enhanced CBench'''
We can use Cbench with Performance test scripts created by Michal Rehak to generate a 2D/3D plot with Gnuplot. Check instructions in [[CrossProject:Integration_Group:Performance_Test_Enhanced_Cbench|Enhanced CBench Test]]

* '''Jconsole'''
With Jconsole it is possible to monitor CPU and RAM for a Java process. Instructions on how to start the Jconsole are available [[Media:Jconsole.pdf|here]].

* '''Jenkins Monitoring plugin'''
Jenkins can also monitor CPU and RAM on slave nodes (like controller VM) through [https://wiki.jenkins-ci.org/display/JENKINS/Monitoring Monitoring plugin]

== Controller requirements ==
In order to run an homogeneous test, we agreed on using this configuration for all performance test:

* HW configuration: 
** Use dedicated VM or bare-metal for controller
** CPU: 4 Cores
** RAM: 4 GB

* SW configuration: 
** Use controller Base edition. See [[CrossProject:Integration_Group:Controller_Artifacts|Controller Artifacts for testing]]
** ODL Log level set to ERROR, edit  opendaylight/configuration/logback.xml
** Set Java memory: Min=2G, Max=4G, in run.sh we have to add following JVM options:
<pre>
run.sh -Xms2g -Xmx4g    # Minimum heap size 2G and maximum heap size 4G. Increase to higher values if we encounter 
                        # OutOfMemoryError crashes when MACs and Switches count are increased in CBench cmdline args
</pre>

== Test Cases ==

=== Mininet Test ===
Still in design, the idea will be to bring up small to large topologies of 16-32-64-128-256-... switches and verify the controller can properly learn topology: switches, ports and links. Also measure CPU and RAM consumed on each iteration. We can also configure mininet to bring a custom topology close to a data center.

* Test Steps:
** Download latest controller base distribution. See [[CrossProject:Integration_Group:Controller_Artifacts|Controller Artifacts for testing]]
** Configure controller according to requirements above and start it with -of13 option (new openflow plugin)
** Start mininet with tree topology of 15 switches: '''sudo mn --controller=remote,ip=<controllerIP> --topo tree,4''' or custom topology
** Check learned topology through GUI or NB API:  '''GET http://<controllerIP>:8080/controller/nb/v2/topology/default'''
** Monitor CPU and RAM
** Repeat the test increasing the number of switches, like -tree,5 (31 switches)

=== CBench Test ===
Still in design, the idea will be to bring up small to large topologies of 16-32-64-128-256-... switches and verify the controller can properly learn topology: switches, ports and links. Also measure CPU and RAM consumed on each iteration. We can also configure mininet to bring a custom topology close to a data center.
 
* Test Steps:
** Download latest controller base distribution. See [[CrossProject:Integration_Group:Controller_Artifacts|Controller Artifacts for testing]]
** Also download the OF plugin reactive forwarding bundle from same link and follow link instructions to install it
** Configure controller according to requirements above and start it with -of13 option (new openflow plugin)
** Start Cbench test with 16 switches: '''cbench -c <controllerIP> -p 6633 -m 10000 -l 10 -s 16 -M 1000'''
** Monitor CPU and RAM
** Repeat the test increasing the number of switches (-s 32), and number of Mac/switch (-M 2000)
