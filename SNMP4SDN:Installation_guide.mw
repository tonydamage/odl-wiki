== Install Controller and Eclipse ==
Go through the installation for the Controller and Eclipse first:
https://wiki.opendaylight.org/view/OpenDaylight_Controller:Pulling,_Hacking,_and_Pushing_the_Code_from_the_CLI
https://wiki.opendaylight.org/view/OpenDaylight_Controller:Eclipse_CLI_Setup

== Pull code via git CLI ==
<pre>
git clone ssh://<username>@git.opendaylight.org:29418/snmp4sdn.git
</pre>
or
<pre>
git clone https://git.opendaylight.org/gerrit/p/snmp4sdn.git
</pre>

== Hack the code ==
One may hack the code using either CLI or Eclipse, as follows.

=== Build the code in CLI ===
<pre>
cd snmp4sdn/
mvn clean install
</pre>

=== Import and build SNMP4SDN in Eclipse ===

==== Import the code ====
Eclipse --> File --> Import --> Existing Maven Projects <br>
--> Root Directory: Browse to select the SNMP4SDN's directory <br>
--> Selects all the Project POMs found --> ... Done

==== Build the code ====
On the project "snmp4sdn" --> Debug As --> Maven build

== Test ==
===Unit Test===
(For the files mentioned below, they are located somewhere under snmp4sdn's directory.)

Steps:

1. A subnet consisting of real Ethernet switches to run the program on.

2. Edit the switch_login_db.csv for the switches in 1.

3. In the FlowProgrammerServiceTest.java and DiscoveryServiceTest.java, remove the mark in front of "@Test" so that the tests will proceed when building the code.

4. In the FlowProgrammerServiceTest.java and DiscoveryServiceTest.java, the mac address given to addNewSwitch() should be consistent with that in switch_login_db.csv, otherwise the program cannot know the mapped ip address and so on.

===Plugin Test===
1. cd snmp4sdn

2. mvn clean intall

3. Start the controller and wait until its initialization done.

4. Manually reboot a Ethernet switch, and later this switch will be shown in the web GUI.
